
Ecran_Tactile_MLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000503c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b4  080057b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057bc  080057bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000010  080057d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080057d4  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7bf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcd  00000000  00000000  0002b7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235cf  00000000  00000000  0002e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6f4  00000000  00000000  00051fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b17  00000000  00000000  0005e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001341d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  00134224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080051ec 	.word	0x080051ec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	080051ec 	.word	0x080051ec

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000824:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000828:	f000 b974 	b.w	8000b14 <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9d08      	ldr	r5, [sp, #32]
 800084a:	4604      	mov	r4, r0
 800084c:	468e      	mov	lr, r1
 800084e:	2b00      	cmp	r3, #0
 8000850:	d14d      	bne.n	80008ee <__udivmoddi4+0xaa>
 8000852:	428a      	cmp	r2, r1
 8000854:	4694      	mov	ip, r2
 8000856:	d969      	bls.n	800092c <__udivmoddi4+0xe8>
 8000858:	fab2 f282 	clz	r2, r2
 800085c:	b152      	cbz	r2, 8000874 <__udivmoddi4+0x30>
 800085e:	fa01 f302 	lsl.w	r3, r1, r2
 8000862:	f1c2 0120 	rsb	r1, r2, #32
 8000866:	fa20 f101 	lsr.w	r1, r0, r1
 800086a:	fa0c fc02 	lsl.w	ip, ip, r2
 800086e:	ea41 0e03 	orr.w	lr, r1, r3
 8000872:	4094      	lsls	r4, r2
 8000874:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000878:	0c21      	lsrs	r1, r4, #16
 800087a:	fbbe f6f8 	udiv	r6, lr, r8
 800087e:	fa1f f78c 	uxth.w	r7, ip
 8000882:	fb08 e316 	mls	r3, r8, r6, lr
 8000886:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800088a:	fb06 f107 	mul.w	r1, r6, r7
 800088e:	4299      	cmp	r1, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x64>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800089a:	f080 811f 	bcs.w	8000adc <__udivmoddi4+0x298>
 800089e:	4299      	cmp	r1, r3
 80008a0:	f240 811c 	bls.w	8000adc <__udivmoddi4+0x298>
 80008a4:	3e02      	subs	r6, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1a5b      	subs	r3, r3, r1
 80008aa:	b2a4      	uxth	r4, r4
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008b8:	fb00 f707 	mul.w	r7, r0, r7
 80008bc:	42a7      	cmp	r7, r4
 80008be:	d90a      	bls.n	80008d6 <__udivmoddi4+0x92>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008c8:	f080 810a 	bcs.w	8000ae0 <__udivmoddi4+0x29c>
 80008cc:	42a7      	cmp	r7, r4
 80008ce:	f240 8107 	bls.w	8000ae0 <__udivmoddi4+0x29c>
 80008d2:	4464      	add	r4, ip
 80008d4:	3802      	subs	r0, #2
 80008d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008da:	1be4      	subs	r4, r4, r7
 80008dc:	2600      	movs	r6, #0
 80008de:	b11d      	cbz	r5, 80008e8 <__udivmoddi4+0xa4>
 80008e0:	40d4      	lsrs	r4, r2
 80008e2:	2300      	movs	r3, #0
 80008e4:	e9c5 4300 	strd	r4, r3, [r5]
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d909      	bls.n	8000906 <__udivmoddi4+0xc2>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	f000 80ef 	beq.w	8000ad6 <__udivmoddi4+0x292>
 80008f8:	2600      	movs	r6, #0
 80008fa:	e9c5 0100 	strd	r0, r1, [r5]
 80008fe:	4630      	mov	r0, r6
 8000900:	4631      	mov	r1, r6
 8000902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000906:	fab3 f683 	clz	r6, r3
 800090a:	2e00      	cmp	r6, #0
 800090c:	d14a      	bne.n	80009a4 <__udivmoddi4+0x160>
 800090e:	428b      	cmp	r3, r1
 8000910:	d302      	bcc.n	8000918 <__udivmoddi4+0xd4>
 8000912:	4282      	cmp	r2, r0
 8000914:	f200 80f9 	bhi.w	8000b0a <__udivmoddi4+0x2c6>
 8000918:	1a84      	subs	r4, r0, r2
 800091a:	eb61 0303 	sbc.w	r3, r1, r3
 800091e:	2001      	movs	r0, #1
 8000920:	469e      	mov	lr, r3
 8000922:	2d00      	cmp	r5, #0
 8000924:	d0e0      	beq.n	80008e8 <__udivmoddi4+0xa4>
 8000926:	e9c5 4e00 	strd	r4, lr, [r5]
 800092a:	e7dd      	b.n	80008e8 <__udivmoddi4+0xa4>
 800092c:	b902      	cbnz	r2, 8000930 <__udivmoddi4+0xec>
 800092e:	deff      	udf	#255	; 0xff
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	2a00      	cmp	r2, #0
 8000936:	f040 8092 	bne.w	8000a5e <__udivmoddi4+0x21a>
 800093a:	eba1 010c 	sub.w	r1, r1, ip
 800093e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	2601      	movs	r6, #1
 8000948:	0c20      	lsrs	r0, r4, #16
 800094a:	fbb1 f3f7 	udiv	r3, r1, r7
 800094e:	fb07 1113 	mls	r1, r7, r3, r1
 8000952:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000956:	fb0e f003 	mul.w	r0, lr, r3
 800095a:	4288      	cmp	r0, r1
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x12c>
 800095e:	eb1c 0101 	adds.w	r1, ip, r1
 8000962:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x12a>
 8000968:	4288      	cmp	r0, r1
 800096a:	f200 80cb 	bhi.w	8000b04 <__udivmoddi4+0x2c0>
 800096e:	4643      	mov	r3, r8
 8000970:	1a09      	subs	r1, r1, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb1 f0f7 	udiv	r0, r1, r7
 8000978:	fb07 1110 	mls	r1, r7, r0, r1
 800097c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000980:	fb0e fe00 	mul.w	lr, lr, r0
 8000984:	45a6      	cmp	lr, r4
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x156>
 8000988:	eb1c 0404 	adds.w	r4, ip, r4
 800098c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000990:	d202      	bcs.n	8000998 <__udivmoddi4+0x154>
 8000992:	45a6      	cmp	lr, r4
 8000994:	f200 80bb 	bhi.w	8000b0e <__udivmoddi4+0x2ca>
 8000998:	4608      	mov	r0, r1
 800099a:	eba4 040e 	sub.w	r4, r4, lr
 800099e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009a2:	e79c      	b.n	80008de <__udivmoddi4+0x9a>
 80009a4:	f1c6 0720 	rsb	r7, r6, #32
 80009a8:	40b3      	lsls	r3, r6
 80009aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80009b2:	fa20 f407 	lsr.w	r4, r0, r7
 80009b6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ba:	431c      	orrs	r4, r3
 80009bc:	40f9      	lsrs	r1, r7
 80009be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009c2:	fa00 f306 	lsl.w	r3, r0, r6
 80009c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ca:	0c20      	lsrs	r0, r4, #16
 80009cc:	fa1f fe8c 	uxth.w	lr, ip
 80009d0:	fb09 1118 	mls	r1, r9, r8, r1
 80009d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d8:	fb08 f00e 	mul.w	r0, r8, lr
 80009dc:	4288      	cmp	r0, r1
 80009de:	fa02 f206 	lsl.w	r2, r2, r6
 80009e2:	d90b      	bls.n	80009fc <__udivmoddi4+0x1b8>
 80009e4:	eb1c 0101 	adds.w	r1, ip, r1
 80009e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009ec:	f080 8088 	bcs.w	8000b00 <__udivmoddi4+0x2bc>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f240 8085 	bls.w	8000b00 <__udivmoddi4+0x2bc>
 80009f6:	f1a8 0802 	sub.w	r8, r8, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	1a09      	subs	r1, r1, r0
 80009fe:	b2a4      	uxth	r4, r4
 8000a00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a04:	fb09 1110 	mls	r1, r9, r0, r1
 8000a08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a10:	458e      	cmp	lr, r1
 8000a12:	d908      	bls.n	8000a26 <__udivmoddi4+0x1e2>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a1c:	d26c      	bcs.n	8000af8 <__udivmoddi4+0x2b4>
 8000a1e:	458e      	cmp	lr, r1
 8000a20:	d96a      	bls.n	8000af8 <__udivmoddi4+0x2b4>
 8000a22:	3802      	subs	r0, #2
 8000a24:	4461      	add	r1, ip
 8000a26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a2e:	eba1 010e 	sub.w	r1, r1, lr
 8000a32:	42a1      	cmp	r1, r4
 8000a34:	46c8      	mov	r8, r9
 8000a36:	46a6      	mov	lr, r4
 8000a38:	d356      	bcc.n	8000ae8 <__udivmoddi4+0x2a4>
 8000a3a:	d053      	beq.n	8000ae4 <__udivmoddi4+0x2a0>
 8000a3c:	b15d      	cbz	r5, 8000a56 <__udivmoddi4+0x212>
 8000a3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a42:	eb61 010e 	sbc.w	r1, r1, lr
 8000a46:	fa01 f707 	lsl.w	r7, r1, r7
 8000a4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a4e:	40f1      	lsrs	r1, r6
 8000a50:	431f      	orrs	r7, r3
 8000a52:	e9c5 7100 	strd	r7, r1, [r5]
 8000a56:	2600      	movs	r6, #0
 8000a58:	4631      	mov	r1, r6
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	40d8      	lsrs	r0, r3
 8000a64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a68:	fa21 f303 	lsr.w	r3, r1, r3
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	4301      	orrs	r1, r0
 8000a70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a74:	fa1f fe8c 	uxth.w	lr, ip
 8000a78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a80:	0c0b      	lsrs	r3, r1, #16
 8000a82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a86:	fb00 f60e 	mul.w	r6, r0, lr
 8000a8a:	429e      	cmp	r6, r3
 8000a8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x260>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a9a:	d22f      	bcs.n	8000afc <__udivmoddi4+0x2b8>
 8000a9c:	429e      	cmp	r6, r3
 8000a9e:	d92d      	bls.n	8000afc <__udivmoddi4+0x2b8>
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	4463      	add	r3, ip
 8000aa4:	1b9b      	subs	r3, r3, r6
 8000aa6:	b289      	uxth	r1, r1
 8000aa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aac:	fb07 3316 	mls	r3, r7, r6, r3
 8000ab0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d908      	bls.n	8000ace <__udivmoddi4+0x28a>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ac4:	d216      	bcs.n	8000af4 <__udivmoddi4+0x2b0>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d914      	bls.n	8000af4 <__udivmoddi4+0x2b0>
 8000aca:	3e02      	subs	r6, #2
 8000acc:	4461      	add	r1, ip
 8000ace:	1ac9      	subs	r1, r1, r3
 8000ad0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ad4:	e738      	b.n	8000948 <__udivmoddi4+0x104>
 8000ad6:	462e      	mov	r6, r5
 8000ad8:	4628      	mov	r0, r5
 8000ada:	e705      	b.n	80008e8 <__udivmoddi4+0xa4>
 8000adc:	4606      	mov	r6, r0
 8000ade:	e6e3      	b.n	80008a8 <__udivmoddi4+0x64>
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	e6f8      	b.n	80008d6 <__udivmoddi4+0x92>
 8000ae4:	454b      	cmp	r3, r9
 8000ae6:	d2a9      	bcs.n	8000a3c <__udivmoddi4+0x1f8>
 8000ae8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000af0:	3801      	subs	r0, #1
 8000af2:	e7a3      	b.n	8000a3c <__udivmoddi4+0x1f8>
 8000af4:	4646      	mov	r6, r8
 8000af6:	e7ea      	b.n	8000ace <__udivmoddi4+0x28a>
 8000af8:	4620      	mov	r0, r4
 8000afa:	e794      	b.n	8000a26 <__udivmoddi4+0x1e2>
 8000afc:	4640      	mov	r0, r8
 8000afe:	e7d1      	b.n	8000aa4 <__udivmoddi4+0x260>
 8000b00:	46d0      	mov	r8, sl
 8000b02:	e77b      	b.n	80009fc <__udivmoddi4+0x1b8>
 8000b04:	3b02      	subs	r3, #2
 8000b06:	4461      	add	r1, ip
 8000b08:	e732      	b.n	8000970 <__udivmoddi4+0x12c>
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	e709      	b.n	8000922 <__udivmoddi4+0xde>
 8000b0e:	4464      	add	r4, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e742      	b.n	800099a <__udivmoddi4+0x156>

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <ILI9341_SendCommand+0x54>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <ILI9341_SendCommand+0x58>)
 8000b2c:	8811      	ldrh	r1, [r2, #0]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 ff5b 	bl	80039ec <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <ILI9341_SendCommand+0x5c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <ILI9341_SendCommand+0x60>)
 8000b3c:	8811      	ldrh	r1, [r2, #0]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 ff53 	bl	80039ec <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000b46:	f107 010f 	add.w	r1, r7, #15
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <ILI9341_SendCommand+0x64>)
 8000b50:	f003 fdf3 	bl	800473a <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <ILI9341_SendCommand+0x5c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <ILI9341_SendCommand+0x60>)
 8000b5a:	8811      	ldrh	r1, [r2, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 ff44 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000090 	.word	0x20000090
 8000b70:	20000094 	.word	0x20000094
 8000b74:	20000088 	.word	0x20000088
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	20000030 	.word	0x20000030

08000b80 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <ILI9341_SendData+0x54>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <ILI9341_SendData+0x58>)
 8000b94:	8811      	ldrh	r1, [r2, #0]
 8000b96:	2201      	movs	r2, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 ff27 	bl	80039ec <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <ILI9341_SendData+0x5c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <ILI9341_SendData+0x60>)
 8000ba4:	8811      	ldrh	r1, [r2, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 ff1f 	bl	80039ec <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000bae:	f107 010f 	add.w	r1, r7, #15
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	480b      	ldr	r0, [pc, #44]	; (8000be4 <ILI9341_SendData+0x64>)
 8000bb8:	f003 fdbf 	bl	800473a <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <ILI9341_SendData+0x5c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <ILI9341_SendData+0x60>)
 8000bc2:	8811      	ldrh	r1, [r2, #0]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 ff10 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000090 	.word	0x20000090
 8000bd8:	20000094 	.word	0x20000094
 8000bdc:	20000088 	.word	0x20000088
 8000be0:	2000008c 	.word	0x2000008c
 8000be4:	20000030 	.word	0x20000030

08000be8 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 8000c06:	202a      	movs	r0, #42	; 0x2a
 8000c08:	f7ff ff86 	bl	8000b18 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffb3 	bl	8000b80 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ffae 	bl	8000b80 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ffa7 	bl	8000b80 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ffa2 	bl	8000b80 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8000c3c:	202b      	movs	r0, #43	; 0x2b
 8000c3e:	f7ff ff6b 	bl	8000b18 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff98 	bl	8000b80 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff93 	bl	8000b80 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000c5a:	883b      	ldrh	r3, [r7, #0]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff8c 	bl	8000b80 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000c68:	883b      	ldrh	r3, [r7, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff87 	bl	8000b80 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000c72:	202c      	movs	r0, #44	; 0x2c
 8000c74:	f7ff ff50 	bl	8000b18 <ILI9341_SendCommand>
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd90      	pop	{r4, r7, pc}

08000c80 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000c90:	2258      	movs	r2, #88	; 0x58
 8000c92:	68f9      	ldr	r1, [r7, #12]
 8000c94:	4853      	ldr	r0, [pc, #332]	; (8000de4 <ILI9341_Init+0x164>)
 8000c96:	f004 fa93 	bl	80051c0 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000c9a:	4a53      	ldr	r2, [pc, #332]	; (8000de8 <ILI9341_Init+0x168>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000ca0:	4a52      	ldr	r2, [pc, #328]	; (8000dec <ILI9341_Init+0x16c>)
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000ca6:	4a52      	ldr	r2, [pc, #328]	; (8000df0 <ILI9341_Init+0x170>)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000cac:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <ILI9341_Init+0x174>)
 8000cae:	8b3b      	ldrh	r3, [r7, #24]
 8000cb0:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <ILI9341_Init+0x168>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a4d      	ldr	r2, [pc, #308]	; (8000dec <ILI9341_Init+0x16c>)
 8000cb8:	8811      	ldrh	r1, [r2, #0]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fe95 	bl	80039ec <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8000cc2:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <ILI9341_Init+0x178>)
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <ILI9341_Init+0x17c>)
 8000cca:	8c3b      	ldrh	r3, [r7, #32]
 8000ccc:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000cce:	8c3b      	ldrh	r3, [r7, #32]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	69f8      	ldr	r0, [r7, #28]
 8000cd6:	f002 fe89 	bl	80039ec <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff ff1c 	bl	8000b18 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f001 ff4b 	bl	8002b7c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 8000ce6:	2028      	movs	r0, #40	; 0x28
 8000ce8:	f7ff ff16 	bl	8000b18 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000cec:	20c0      	movs	r0, #192	; 0xc0
 8000cee:	f7ff ff13 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 8000cf2:	2026      	movs	r0, #38	; 0x26
 8000cf4:	f7ff ff44 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 8000cf8:	20c1      	movs	r0, #193	; 0xc1
 8000cfa:	f7ff ff0d 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8000cfe:	2011      	movs	r0, #17
 8000d00:	f7ff ff3e 	bl	8000b80 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 8000d04:	20c5      	movs	r0, #197	; 0xc5
 8000d06:	f7ff ff07 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 8000d0a:	2035      	movs	r0, #53	; 0x35
 8000d0c:	f7ff ff38 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8000d10:	203e      	movs	r0, #62	; 0x3e
 8000d12:	f7ff ff35 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 8000d16:	20c7      	movs	r0, #199	; 0xc7
 8000d18:	f7ff fefe 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8000d1c:	20be      	movs	r0, #190	; 0xbe
 8000d1e:	f7ff ff2f 	bl	8000b80 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 8000d22:	2036      	movs	r0, #54	; 0x36
 8000d24:	f7ff fef8 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8000d28:	2048      	movs	r0, #72	; 0x48
 8000d2a:	f7ff ff29 	bl	8000b80 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8000d2e:	203a      	movs	r0, #58	; 0x3a
 8000d30:	f7ff fef2 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 8000d34:	2055      	movs	r0, #85	; 0x55
 8000d36:	f7ff ff23 	bl	8000b80 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8000d3a:	20b1      	movs	r0, #177	; 0xb1
 8000d3c:	f7ff feec 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ff1d 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 8000d46:	201f      	movs	r0, #31
 8000d48:	f7ff ff1a 	bl	8000b80 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8000d4c:	202a      	movs	r0, #42	; 0x2a
 8000d4e:	f7ff fee3 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff14 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff ff11 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff ff0e 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000d64:	20ef      	movs	r0, #239	; 0xef
 8000d66:	f7ff ff0b 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000d6a:	202b      	movs	r0, #43	; 0x2b
 8000d6c:	f7ff fed4 	bl	8000b18 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff ff05 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff ff02 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff feff 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000d82:	203f      	movs	r0, #63	; 0x3f
 8000d84:	f7ff fefc 	bl	8000b80 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000d88:	2034      	movs	r0, #52	; 0x34
 8000d8a:	f7ff fec5 	bl	8000b18 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000d8e:	20b7      	movs	r0, #183	; 0xb7
 8000d90:	f7ff fec2 	bl	8000b18 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000d94:	2007      	movs	r0, #7
 8000d96:	f7ff fef3 	bl	8000b80 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000d9a:	20b6      	movs	r0, #182	; 0xb6
 8000d9c:	f7ff febc 	bl	8000b18 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f7ff feed 	bl	8000b80 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000da6:	2082      	movs	r0, #130	; 0x82
 8000da8:	f7ff feea 	bl	8000b80 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000dac:	2027      	movs	r0, #39	; 0x27
 8000dae:	f7ff fee7 	bl	8000b80 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fee4 	bl	8000b80 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000db8:	2011      	movs	r0, #17
 8000dba:	f7ff fead 	bl	8000b18 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000dbe:	2064      	movs	r0, #100	; 0x64
 8000dc0:	f001 fedc 	bl	8002b7c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000dc4:	2029      	movs	r0, #41	; 0x29
 8000dc6:	f7ff fea7 	bl	8000b18 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f001 fed6 	bl	8002b7c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000dd0:	202c      	movs	r0, #44	; 0x2c
 8000dd2:	f7ff fea1 	bl	8000b18 <ILI9341_SendCommand>
   HAL_Delay(5);
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f001 fed0 	bl	8002b7c <HAL_Delay>
 }
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000030 	.word	0x20000030
 8000de8:	20000088 	.word	0x20000088
 8000dec:	2000008c 	.word	0x2000008c
 8000df0:	20000090 	.word	0x20000090
 8000df4:	20000094 	.word	0x20000094
 8000df8:	20000098 	.word	0x20000098
 8000dfc:	2000009c 	.word	0x2000009c

08000e00 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	80bb      	strh	r3, [r7, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	88fa      	ldrh	r2, [r7, #6]
 8000e16:	88b9      	ldrh	r1, [r7, #4]
 8000e18:	88f8      	ldrh	r0, [r7, #6]
 8000e1a:	f7ff fee5 	bl	8000be8 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff feaa 	bl	8000b80 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8000e2c:	887b      	ldrh	r3, [r7, #2]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fea5 	bl	8000b80 <ILI9341_SendData>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8000e4a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000e4e:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000e50:	23ff      	movs	r3, #255	; 0xff
 8000e52:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <ILI9341_Fill+0x84>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d003      	beq.n	8000e64 <ILI9341_Fill+0x24>
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <ILI9341_Fill+0x84>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d107      	bne.n	8000e74 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000e64:	f240 133f 	movw	r3, #319	; 0x13f
 8000e68:	22ef      	movs	r2, #239	; 0xef
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff febb 	bl	8000be8 <ILI9341_SetCursorPosition>
 8000e72:	e00e      	b.n	8000e92 <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <ILI9341_Fill+0x84>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d003      	beq.n	8000e84 <ILI9341_Fill+0x44>
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <ILI9341_Fill+0x84>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d116      	bne.n	8000eb2 <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000e84:	23ef      	movs	r3, #239	; 0xef
 8000e86:	f240 123f 	movw	r2, #319	; 0x13f
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff feab 	bl	8000be8 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 8000e92:	e00e      	b.n	8000eb2 <ILI9341_Fill+0x72>
			n--;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe6c 	bl	8000b80 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe67 	bl	8000b80 <ILI9341_SendData>
	while (n) {
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1ed      	bne.n	8000e94 <ILI9341_Fill+0x54>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	3301      	adds	r3, #1
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	1a8a      	subs	r2, r1, r2
 8000ee4:	3201      	adds	r2, #1
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000ef2:	d902      	bls.n	8000efa <ILI9341_Fill_Rect+0x32>
 8000ef4:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000ef8:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	b298      	uxth	r0, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	b299      	uxth	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f7ff fe6d 	bl	8000be8 <ILI9341_SetCursorPosition>
	while (n) {
 8000f0e:	e00e      	b.n	8000f2e <ILI9341_Fill_Rect+0x66>
			n--;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 8000f16:	8c3b      	ldrh	r3, [r7, #32]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fe2e 	bl	8000b80 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000f24:	8c3b      	ldrh	r3, [r7, #32]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe29 	bl	8000b80 <ILI9341_SendData>
	while (n) {
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ed      	bne.n	8000f10 <ILI9341_Fill_Rect+0x48>
	}
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8000f3e:	b590      	push	{r4, r7, lr}
 8000f40:	b087      	sub	sp, #28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4604      	mov	r4, r0
 8000f46:	4608      	mov	r0, r1
 8000f48:	4611      	mov	r1, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4623      	mov	r3, r4
 8000f4e:	80fb      	strh	r3, [r7, #6]
 8000f50:	4603      	mov	r3, r0
 8000f52:	80bb      	strh	r3, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	f1c3 0301 	rsb	r3, r3, #1
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	03d2      	lsls	r2, r2, #15
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8000f80:	e083      	b.n	800108a <fillCircleHelper+0x14c>
    if (f >= 0) {
 8000f82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0e      	blt.n	8000fa8 <fillCircleHelper+0x6a>
      y--;
 8000f8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	3b01      	subs	r3, #1
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000f96:	8a7b      	ldrh	r3, [r7, #18]
 8000f98:	3302      	adds	r3, #2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8000f9e:	8afa      	ldrh	r2, [r7, #22]
 8000fa0:	8a7b      	ldrh	r3, [r7, #18]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000fa8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000fb4:	8abb      	ldrh	r3, [r7, #20]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8000fbc:	8afa      	ldrh	r2, [r7, #22]
 8000fbe:	8abb      	ldrh	r3, [r7, #20]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8000fc6:	787b      	ldrb	r3, [r7, #1]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d02b      	beq.n	8001028 <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	8a3b      	ldrh	r3, [r7, #16]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b218      	sxth	r0, r3
 8000fda:	88ba      	ldrh	r2, [r7, #4]
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b219      	sxth	r1, r3
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fec:	4413      	add	r3, r2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ff8:	f000 f921 	bl	800123e <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8000ffc:	88fa      	ldrh	r2, [r7, #6]
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
 8001004:	b218      	sxth	r0, r3
 8001006:	88ba      	ldrh	r2, [r7, #4]
 8001008:	8a3b      	ldrh	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	b29b      	uxth	r3, r3
 800100e:	b219      	sxth	r1, r3
 8001010:	8a3b      	ldrh	r3, [r7, #16]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001018:	4413      	add	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001024:	f000 f90b 	bl	800123e <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d02b      	beq.n	800108a <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001032:	88fa      	ldrh	r2, [r7, #6]
 8001034:	8a3b      	ldrh	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	b218      	sxth	r0, r3
 800103c:	88ba      	ldrh	r2, [r7, #4]
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	b219      	sxth	r1, r3
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b29a      	uxth	r2, r3
 800104c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800104e:	4413      	add	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	3301      	adds	r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	b21a      	sxth	r2, r3
 8001058:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800105a:	f000 f8f0 	bl	800123e <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	89fb      	ldrh	r3, [r7, #14]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	b29b      	uxth	r3, r3
 8001066:	b218      	sxth	r0, r3
 8001068:	88ba      	ldrh	r2, [r7, #4]
 800106a:	8a3b      	ldrh	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b29b      	uxth	r3, r3
 8001070:	b219      	sxth	r1, r3
 8001072:	8a3b      	ldrh	r3, [r7, #16]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	3301      	adds	r3, #1
 8001080:	b29b      	uxth	r3, r3
 8001082:	b21a      	sxth	r2, r3
 8001084:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001086:	f000 f8da 	bl	800123e <ILI9341_drawFastVLine>
  while (x<y) {
 800108a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800108e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001092:	429a      	cmp	r2, r3
 8001094:	f6ff af75 	blt.w	8000f82 <fillCircleHelper+0x44>
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}

080010a2 <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80010a2:	b590      	push	{r4, r7, lr}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af02      	add	r7, sp, #8
 80010a8:	4604      	mov	r4, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4623      	mov	r3, r4
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	4603      	mov	r3, r0
 80010b6:	80bb      	strh	r3, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 80010c0:	88ba      	ldrh	r2, [r7, #4]
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b219      	sxth	r1, r3
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	883b      	ldrh	r3, [r7, #0]
 80010d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010dc:	f000 f8af 	bl	800123e <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 80010e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010e8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010ec:	883b      	ldrh	r3, [r7, #0]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	2300      	movs	r3, #0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2303      	movs	r3, #3
 80010f6:	f7ff ff22 	bl	8000f3e <fillCircleHelper>
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}

08001102 <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001102:	b590      	push	{r4, r7, lr}
 8001104:	b089      	sub	sp, #36	; 0x24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4604      	mov	r4, r0
 800110a:	4608      	mov	r0, r1
 800110c:	4611      	mov	r1, r2
 800110e:	461a      	mov	r2, r3
 8001110:	4623      	mov	r3, r4
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	4603      	mov	r3, r0
 8001116:	80bb      	strh	r3, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001120:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001124:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800112e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001132:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	bfb8      	it	lt
 8001140:	425b      	neglt	r3, r3
 8001142:	429a      	cmp	r2, r3
 8001144:	bfcc      	ite	gt
 8001146:	2301      	movgt	r3, #1
 8001148:	2300      	movle	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	837b      	strh	r3, [r7, #26]
  if (steep) {
 800114e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	833b      	strh	r3, [r7, #24]
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	8b3b      	ldrh	r3, [r7, #24]
 8001160:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	82fb      	strh	r3, [r7, #22]
 8001166:	883b      	ldrh	r3, [r7, #0]
 8001168:	807b      	strh	r3, [r7, #2]
 800116a:	8afb      	ldrh	r3, [r7, #22]
 800116c:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 800116e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001172:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001176:	429a      	cmp	r2, r3
 8001178:	dd0b      	ble.n	8001192 <ILI9341_drawLine+0x90>
    swap(x0, x1);
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	82bb      	strh	r3, [r7, #20]
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	80fb      	strh	r3, [r7, #6]
 8001182:	8abb      	ldrh	r3, [r7, #20]
 8001184:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	827b      	strh	r3, [r7, #18]
 800118a:	883b      	ldrh	r3, [r7, #0]
 800118c:	80bb      	strh	r3, [r7, #4]
 800118e:	8a7b      	ldrh	r3, [r7, #18]
 8001190:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800119c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80011a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bfb8      	it	lt
 80011aa:	425b      	neglt	r3, r3
 80011ac:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80011ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011b2:	0fda      	lsrs	r2, r3, #31
 80011b4:	4413      	add	r3, r2
 80011b6:	105b      	asrs	r3, r3, #1
 80011b8:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80011ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	da02      	bge.n	80011cc <ILI9341_drawLine+0xca>
    ystep = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	83bb      	strh	r3, [r7, #28]
 80011ca:	e02d      	b.n	8001228 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 80011cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d0:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 80011d2:	e029      	b.n	8001228 <ILI9341_drawLine+0x126>
    if (steep) {
 80011d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	88f9      	ldrh	r1, [r7, #6]
 80011e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe0c 	bl	8000e00 <ILI9341_DrawPixel>
 80011e8:	e005      	b.n	80011f6 <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	88b9      	ldrh	r1, [r7, #4]
 80011ee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe05 	bl	8000e00 <ILI9341_DrawPixel>
    }
    err -= dy;
 80011f6:	8bfa      	ldrh	r2, [r7, #30]
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8001200:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001204:	2b00      	cmp	r3, #0
 8001206:	da09      	bge.n	800121c <ILI9341_drawLine+0x11a>
      y0 += ystep;
 8001208:	88ba      	ldrh	r2, [r7, #4]
 800120a:	8bbb      	ldrh	r3, [r7, #28]
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8001212:	8bfa      	ldrh	r2, [r7, #30]
 8001214:	8a3b      	ldrh	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 800121c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001220:	b29b      	uxth	r3, r3
 8001222:	3301      	adds	r3, #1
 8001224:	b29b      	uxth	r3, r3
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800122c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001230:	429a      	cmp	r2, r3
 8001232:	ddcf      	ble.n	80011d4 <ILI9341_drawLine+0xd2>
    }
  }
}	
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}

0800123e <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b085      	sub	sp, #20
 8001242:	af02      	add	r7, sp, #8
 8001244:	4604      	mov	r4, r0
 8001246:	4608      	mov	r0, r1
 8001248:	4611      	mov	r1, r2
 800124a:	461a      	mov	r2, r3
 800124c:	4623      	mov	r3, r4
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4603      	mov	r3, r0
 8001252:	80bb      	strh	r3, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 800125c:	88ba      	ldrh	r2, [r7, #4]
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	4413      	add	r3, r2
 8001262:	b29b      	uxth	r3, r3
 8001264:	3b01      	subs	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	b21c      	sxth	r4, r3
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001272:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001276:	883b      	ldrh	r3, [r7, #0]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4623      	mov	r3, r4
 800127c:	f7ff ff41 	bl	8001102 <ILI9341_drawLine>
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}

08001288 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	4603      	mov	r3, r0
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	70fb      	strb	r3, [r7, #3]
 80012a2:	4613      	mov	r3, r2
 80012a4:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 80012a6:	4b98      	ldr	r3, [pc, #608]	; (8001508 <ILI9341_drawChar+0x280>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d003      	beq.n	80012b6 <ILI9341_drawChar+0x2e>
 80012ae:	4b96      	ldr	r3, [pc, #600]	; (8001508 <ILI9341_drawChar+0x280>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d11f      	bne.n	80012f6 <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	2bef      	cmp	r3, #239	; 0xef
 80012bc:	f300 811d 	bgt.w	80014fa <ILI9341_drawChar+0x272>
 80012c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012c8:	f280 8117 	bge.w	80014fa <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80012cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f340 810b 	ble.w	80014fa <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 80012e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dc21      	bgt.n	8001338 <ILI9341_drawChar+0xb0>
    return;
 80012f4:	e101      	b.n	80014fa <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 80012f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012fa:	2bef      	cmp	r3, #239	; 0xef
 80012fc:	f300 80ff 	bgt.w	80014fe <ILI9341_drawChar+0x276>
 8001300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001304:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001308:	f280 80f9 	bge.w	80014fe <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800130c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001310:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 800131e:	2b00      	cmp	r3, #0
 8001320:	f340 80ed 	ble.w	80014fe <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 8001324:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8001330:	2b00      	cmp	r3, #0
 8001332:	f340 80e4 	ble.w	80014fe <ILI9341_drawChar+0x276>
 8001336:	e000      	b.n	800133a <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8001338:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <ILI9341_drawChar+0x284>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f083 0301 	eor.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <ILI9341_drawChar+0xcc>
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2baf      	cmp	r3, #175	; 0xaf
 800134c:	d902      	bls.n	8001354 <ILI9341_drawChar+0xcc>
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	3301      	adds	r3, #1
 8001352:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e0c9      	b.n	80014ee <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d102      	bne.n	8001368 <ILI9341_drawChar+0xe0>
      line = 0x0;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
 8001366:	e00b      	b.n	8001380 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	461a      	mov	r2, r3
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4413      	add	r3, r2
 8001378:	4a65      	ldr	r2, [pc, #404]	; (8001510 <ILI9341_drawChar+0x288>)
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001380:	2300      	movs	r3, #0
 8001382:	737b      	strb	r3, [r7, #13]
 8001384:	e0a8      	b.n	80014d8 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d04b      	beq.n	8001428 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8001390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001394:	2b01      	cmp	r3, #1
 8001396:	d110      	bne.n	80013ba <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	b29a      	uxth	r2, r3
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	4413      	add	r3, r2
 80013a2:	b298      	uxth	r0, r3
 80013a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	883a      	ldrh	r2, [r7, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fd24 	bl	8000e00 <ILI9341_DrawPixel>
 80013b8:	e085      	b.n	80014c6 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80013ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013d6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	461c      	mov	r4, r3
 80013e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	441a      	add	r2, r3
 80013ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	461d      	mov	r5, r3
 80013fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001406:	441a      	add	r2, r3
 8001408:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800140c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	4413      	add	r3, r2
 8001416:	461a      	mov	r2, r3
 8001418:	883b      	ldrh	r3, [r7, #0]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	462a      	mov	r2, r5
 8001420:	4621      	mov	r1, r4
 8001422:	f7ff fd51 	bl	8000ec8 <ILI9341_Fill_Rect>
 8001426:	e04e      	b.n	80014c6 <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8001428:	8c3a      	ldrh	r2, [r7, #32]
 800142a:	883b      	ldrh	r3, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d04a      	beq.n	80014c6 <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8001430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001434:	2b01      	cmp	r3, #1
 8001436:	d110      	bne.n	800145a <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143c:	b29a      	uxth	r2, r3
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4413      	add	r3, r2
 8001442:	b298      	uxth	r0, r3
 8001444:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001448:	b29a      	uxth	r2, r3
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	b29b      	uxth	r3, r3
 8001450:	8c3a      	ldrh	r2, [r7, #32]
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fcd4 	bl	8000e00 <ILI9341_DrawPixel>
 8001458:	e035      	b.n	80014c6 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800145a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001466:	fb01 f303 	mul.w	r3, r1, r3
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001472:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001476:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	461c      	mov	r4, r3
 8001482:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	441a      	add	r2, r3
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001490:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	4413      	add	r3, r2
 800149a:	461d      	mov	r5, r3
 800149c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a6:	441a      	add	r2, r3
 80014a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014ac:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	8c3b      	ldrh	r3, [r7, #32]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	462a      	mov	r2, r5
 80014c0:	4621      	mov	r1, r4
 80014c2:	f7ff fd01 	bl	8000ec8 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80014cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	737b      	strb	r3, [r7, #13]
 80014d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014dc:	2b07      	cmp	r3, #7
 80014de:	f77f af52 	ble.w	8001386 <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	f77f af31 	ble.w	800135a <ILI9341_drawChar+0xd2>
 80014f8:	e002      	b.n	8001500 <ILI9341_drawChar+0x278>
    return;
 80014fa:	bf00      	nop
 80014fc:	e000      	b.n	8001500 <ILI9341_drawChar+0x278>
    return;
 80014fe:	bf00      	nop
    }
  }
}
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bdb0      	pop	{r4, r5, r7, pc}
 8001506:	bf00      	nop
 8001508:	20000000 	.word	0x20000000
 800150c:	2000002c 	.word	0x2000002c
 8001510:	080052a4 	.word	0x080052a4

08001514 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4603      	mov	r3, r0
 8001524:	817b      	strh	r3, [r7, #10]
 8001526:	460b      	mov	r3, r1
 8001528:	813b      	strh	r3, [r7, #8]
 800152a:	4613      	mov	r3, r2
 800152c:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 800152e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001532:	b29b      	uxth	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	0052      	lsls	r2, r2, #1
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	82fb      	strh	r3, [r7, #22]
 8001544:	e01a      	b.n	800157c <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001546:	8abb      	ldrh	r3, [r7, #20]
 8001548:	8afa      	ldrh	r2, [r7, #22]
 800154a:	fb12 f303 	smulbb	r3, r2, r3
 800154e:	b29a      	uxth	r2, r3
 8001550:	897b      	ldrh	r3, [r7, #10]
 8001552:	4413      	add	r3, r2
 8001554:	b29b      	uxth	r3, r3
 8001556:	b218      	sxth	r0, r3
 8001558:	8afb      	ldrh	r3, [r7, #22]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	88fc      	ldrh	r4, [r7, #6]
 8001562:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001566:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4623      	mov	r3, r4
 8001572:	f7ff fe89 	bl	8001288 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001576:	8afb      	ldrh	r3, [r7, #22]
 8001578:	3301      	adds	r3, #1
 800157a:	82fb      	strh	r3, [r7, #22]
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	2b27      	cmp	r3, #39	; 0x27
 8001580:	d805      	bhi.n	800158e <ILI9341_printText+0x7a>
 8001582:	8afb      	ldrh	r3, [r7, #22]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1db      	bne.n	8001546 <ILI9341_printText+0x32>
	}
}
 800158e:	bf00      	nop
 8001590:	371c      	adds	r7, #28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
	...

08001598 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d832      	bhi.n	8001610 <ILI9341_setRotation+0x78>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <ILI9341_setRotation+0x18>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015d5 	.word	0x080015d5
 80015b8:	080015e9 	.word	0x080015e9
 80015bc:	080015fd 	.word	0x080015fd
	{
		case 1:
			rotationNum = 1;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <ILI9341_setRotation+0x94>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80015c6:	2036      	movs	r0, #54	; 0x36
 80015c8:	f7ff faa6 	bl	8000b18 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80015cc:	2088      	movs	r0, #136	; 0x88
 80015ce:	f7ff fad7 	bl	8000b80 <ILI9341_SendData>
			break;
 80015d2:	e027      	b.n	8001624 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <ILI9341_setRotation+0x94>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80015da:	2036      	movs	r0, #54	; 0x36
 80015dc:	f7ff fa9c 	bl	8000b18 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80015e0:	2028      	movs	r0, #40	; 0x28
 80015e2:	f7ff facd 	bl	8000b80 <ILI9341_SendData>
			break;
 80015e6:	e01d      	b.n	8001624 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <ILI9341_setRotation+0x94>)
 80015ea:	2203      	movs	r2, #3
 80015ec:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80015ee:	2036      	movs	r0, #54	; 0x36
 80015f0:	f7ff fa92 	bl	8000b18 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 80015f4:	2048      	movs	r0, #72	; 0x48
 80015f6:	f7ff fac3 	bl	8000b80 <ILI9341_SendData>
			break;
 80015fa:	e013      	b.n	8001624 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <ILI9341_setRotation+0x94>)
 80015fe:	2204      	movs	r2, #4
 8001600:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001602:	2036      	movs	r0, #54	; 0x36
 8001604:	f7ff fa88 	bl	8000b18 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001608:	20e8      	movs	r0, #232	; 0xe8
 800160a:	f7ff fab9 	bl	8000b80 <ILI9341_SendData>
			break;
 800160e:	e009      	b.n	8001624 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <ILI9341_setRotation+0x94>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001616:	2036      	movs	r0, #54	; 0x36
 8001618:	f7ff fa7e 	bl	8000b18 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800161c:	2088      	movs	r0, #136	; 0x88
 800161e:	f7ff faaf 	bl	8000b80 <ILI9341_SendData>
			break;
 8001622:	bf00      	nop
	}
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000

08001630 <ILI9341_getRotation>:
//14. Get screen rotation
uint8_t ILI9341_getRotation(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	return rotationNum;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <ILI9341_getRotation+0x14>)
 8001636:	781b      	ldrb	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000000 	.word	0x20000000

08001648 <TSC2046_SendCommand>:
#define _TS_CS_DISABLE		HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_SET);

//Functions definitions
//1. Send TSC2046 Command and wait for a response
uint16_t TSC2046_SendCommand(uint8_t cmd)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3] = {0,0,0};
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <TSC2046_SendCommand+0x84>)
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4611      	mov	r1, r2
 800165c:	8019      	strh	r1, [r3, #0]
 800165e:	3302      	adds	r3, #2
 8001660:	0c12      	lsrs	r2, r2, #16
 8001662:	701a      	strb	r2, [r3, #0]
	uint16_t return16=0;
 8001664:	2300      	movs	r3, #0
 8001666:	81fb      	strh	r3, [r7, #14]
	
	_TS_CS_ENBALE;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <TSC2046_SendCommand+0x88>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <TSC2046_SendCommand+0x8c>)
 800166e:	8811      	ldrh	r1, [r2, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f002 f9ba 	bl	80039ec <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&tsSPIhandle, spiBuf, 1, 10);
 800167c:	f107 0108 	add.w	r1, r7, #8
 8001680:	230a      	movs	r3, #10
 8001682:	2201      	movs	r2, #1
 8001684:	4814      	ldr	r0, [pc, #80]	; (80016d8 <TSC2046_SendCommand+0x90>)
 8001686:	f003 f858 	bl	800473a <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	HAL_Delay(3);
 800168a:	2003      	movs	r0, #3
 800168c:	f001 fa76 	bl	8002b7c <HAL_Delay>
	if(HAL_SPI_Receive(&tsSPIhandle, &spiBuf[1], 2, 10) == HAL_OK) return16 = (spiBuf[1]<<4) + (spiBuf[2]>>4);
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	1c59      	adds	r1, r3, #1
 8001696:	230a      	movs	r3, #10
 8001698:	2202      	movs	r2, #2
 800169a:	480f      	ldr	r0, [pc, #60]	; (80016d8 <TSC2046_SendCommand+0x90>)
 800169c:	f003 f989 	bl	80049b2 <HAL_SPI_Receive>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10a      	bne.n	80016bc <TSC2046_SendCommand+0x74>
 80016a6:	7a7b      	ldrb	r3, [r7, #9]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	7abb      	ldrb	r3, [r7, #10]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	81fb      	strh	r3, [r7, #14]
 80016ba:	e001      	b.n	80016c0 <TSC2046_SendCommand+0x78>
	else return16 = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	81fb      	strh	r3, [r7, #14]
	
	
	return return16;
 80016c0:	89fb      	ldrh	r3, [r7, #14]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08005204 	.word	0x08005204
 80016d0:	200000f8 	.word	0x200000f8
 80016d4:	200000fc 	.word	0x200000fc
 80016d8:	200000a0 	.word	0x200000a0
 80016dc:	00000000 	.word	0x00000000

080016e0 <TSC2046_Calibrate>:
//2. Calibrate resistive touch panel
void TSC2046_Calibrate(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
	uint16_t watchVar1=0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	80bb      	strh	r3, [r7, #4]
	TS_TOUCH_RAW_Def myRawTouchDef;
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point();
 80016ea:	f000 f9f7 	bl	8001adc <TSC2046_TL_point>
	myTS_Calibrate.TL_X = 0;
 80016ee:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <TSC2046_Calibrate+0x240>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y = 0;
 80016f4:	4b8a      	ldr	r3, [pc, #552]	; (8001920 <TSC2046_Calibrate+0x240>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	805a      	strh	r2, [r3, #2]
	myTS_Calibrate.BR_X = 0;
 80016fa:	4b89      	ldr	r3, [pc, #548]	; (8001920 <TSC2046_Calibrate+0x240>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y = 0;
 8001700:	4b87      	ldr	r3, [pc, #540]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001702:	2200      	movs	r2, #0
 8001704:	80da      	strh	r2, [r3, #6]
	
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001706:	f000 f9d9 	bl	8001abc <TSC2046_getRaw_Z>
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 800170e:	88bb      	ldrh	r3, [r7, #4]
 8001710:	2b32      	cmp	r3, #50	; 0x32
 8001712:	d91b      	bls.n	800174c <TSC2046_Calibrate+0x6c>
		{
			for(uint8_t i=0; i<10; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	e014      	b.n	8001744 <TSC2046_Calibrate+0x64>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 800171a:	f000 f905 	bl	8001928 <TSC2046_GetRawTouch>
 800171e:	4603      	mov	r3, r0
 8001720:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.TL_X += myRawTouchDef.x_touch;
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001724:	881a      	ldrh	r2, [r3, #0]
 8001726:	883b      	ldrh	r3, [r7, #0]
 8001728:	4413      	add	r3, r2
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <TSC2046_Calibrate+0x240>)
 800172e:	801a      	strh	r2, [r3, #0]
				myTS_Calibrate.TL_Y += myRawTouchDef.y_touch;
 8001730:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001732:	885a      	ldrh	r2, [r3, #2]
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	4413      	add	r3, r2
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <TSC2046_Calibrate+0x240>)
 800173c:	805a      	strh	r2, [r3, #2]
			for(uint8_t i=0; i<10; i++)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	3301      	adds	r3, #1
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b09      	cmp	r3, #9
 8001748:	d9e7      	bls.n	800171a <TSC2046_Calibrate+0x3a>
			}
			
			break;
 800174a:	e003      	b.n	8001754 <TSC2046_Calibrate+0x74>
		}
		HAL_Delay(10);
 800174c:	200a      	movs	r0, #10
 800174e:	f001 fa15 	bl	8002b7c <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001752:	e7d8      	b.n	8001706 <TSC2046_Calibrate+0x26>
	}
	HAL_Delay(1000);
 8001754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001758:	f001 fa10 	bl	8002b7c <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point();
 800175c:	f000 f9da 	bl	8001b14 <TSC2046_BR_point>
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001760:	f000 f9ac 	bl	8001abc <TSC2046_getRaw_Z>
 8001764:	4603      	mov	r3, r0
 8001766:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	2b32      	cmp	r3, #50	; 0x32
 800176c:	d91b      	bls.n	80017a6 <TSC2046_Calibrate+0xc6>
		{
			for(uint8_t i=0; i<10; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	71bb      	strb	r3, [r7, #6]
 8001772:	e014      	b.n	800179e <TSC2046_Calibrate+0xbe>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001774:	f000 f8d8 	bl	8001928 <TSC2046_GetRawTouch>
 8001778:	4603      	mov	r3, r0
 800177a:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.BR_X += myRawTouchDef.x_touch;
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <TSC2046_Calibrate+0x240>)
 800177e:	889a      	ldrh	r2, [r3, #4]
 8001780:	883b      	ldrh	r3, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b66      	ldr	r3, [pc, #408]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001788:	809a      	strh	r2, [r3, #4]
				myTS_Calibrate.BR_Y += myRawTouchDef.y_touch;
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <TSC2046_Calibrate+0x240>)
 800178c:	88da      	ldrh	r2, [r3, #6]
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	4413      	add	r3, r2
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b62      	ldr	r3, [pc, #392]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001796:	80da      	strh	r2, [r3, #6]
			for(uint8_t i=0; i<10; i++)
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	3301      	adds	r3, #1
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d9e7      	bls.n	8001774 <TSC2046_Calibrate+0x94>
			}
			break;
 80017a4:	e003      	b.n	80017ae <TSC2046_Calibrate+0xce>
		}
		HAL_Delay(10);
 80017a6:	200a      	movs	r0, #10
 80017a8:	f001 f9e8 	bl	8002b7c <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 80017ac:	e7d8      	b.n	8001760 <TSC2046_Calibrate+0x80>
	}
	
	myTS_Calibrate.TL_X *=0.1;
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <TSC2046_Calibrate+0x240>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe ffa4 	bl	8000700 <__aeabi_i2d>
 80017b8:	a357      	add	r3, pc, #348	; (adr r3, 8001918 <TSC2046_Calibrate+0x238>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe fd23 	bl	8000208 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f803 	bl	80007d4 <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b53      	ldr	r3, [pc, #332]	; (8001920 <TSC2046_Calibrate+0x240>)
 80017d4:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y *=0.1;
 80017d6:	4b52      	ldr	r3, [pc, #328]	; (8001920 <TSC2046_Calibrate+0x240>)
 80017d8:	885b      	ldrh	r3, [r3, #2]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff90 	bl	8000700 <__aeabi_i2d>
 80017e0:	a34d      	add	r3, pc, #308	; (adr r3, 8001918 <TSC2046_Calibrate+0x238>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe fd0f 	bl	8000208 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7fe ffef 	bl	80007d4 <__aeabi_d2uiz>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <TSC2046_Calibrate+0x240>)
 80017fc:	805a      	strh	r2, [r3, #2]
	
	myTS_Calibrate.BR_X *=0.1;
 80017fe:	4b48      	ldr	r3, [pc, #288]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001800:	889b      	ldrh	r3, [r3, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe ff7c 	bl	8000700 <__aeabi_i2d>
 8001808:	a343      	add	r3, pc, #268	; (adr r3, 8001918 <TSC2046_Calibrate+0x238>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fcfb 	bl	8000208 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7fe ffdb 	bl	80007d4 <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001824:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y *=0.1;
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001828:	88db      	ldrh	r3, [r3, #6]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe ff68 	bl	8000700 <__aeabi_i2d>
 8001830:	a339      	add	r3, pc, #228	; (adr r3, 8001918 <TSC2046_Calibrate+0x238>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fce7 	bl	8000208 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7fe ffc7 	bl	80007d4 <__aeabi_d2uiz>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <TSC2046_Calibrate+0x240>)
 800184c:	80da      	strh	r2, [r3, #6]
	
	//1. Calculate X_Diff, Y_Diff
	myTS_Calibrate.Scale_X = (myTS_Calibrate.Width + 0.0f)/(myTS_Calibrate.BR_X - myTS_Calibrate.TL_X + 0.0f);
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001850:	8b1b      	ldrh	r3, [r3, #24]
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001924 <TSC2046_Calibrate+0x244>
 800185e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001864:	889b      	ldrh	r3, [r3, #4]
 8001866:	461a      	mov	r2, r3
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <TSC2046_Calibrate+0x240>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001924 <TSC2046_Calibrate+0x244>
 800187a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800187e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001884:	edc3 7a02 	vstr	s15, [r3, #8]
	myTS_Calibrate.Scale_Y = (myTS_Calibrate.Height + 0.0f)/(myTS_Calibrate.BR_Y - myTS_Calibrate.TL_Y + 0.0f);
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <TSC2046_Calibrate+0x240>)
 800188a:	8b5b      	ldrh	r3, [r3, #26]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001894:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001924 <TSC2046_Calibrate+0x244>
 8001898:	ee77 6a87 	vadd.f32	s13, s15, s14
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <TSC2046_Calibrate+0x240>)
 800189e:	88db      	ldrh	r3, [r3, #6]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <TSC2046_Calibrate+0x240>)
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001924 <TSC2046_Calibrate+0x244>
 80018b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <TSC2046_Calibrate+0x240>)
 80018be:	edc3 7a03 	vstr	s15, [r3, #12]
	//2. Calculate Scalling ()
	myTS_Calibrate.Bias_X = 10 - myTS_Calibrate.Scale_X*myTS_Calibrate.TL_X;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <TSC2046_Calibrate+0x240>)
 80018c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <TSC2046_Calibrate+0x240>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <TSC2046_Calibrate+0x240>)
 80018e2:	edc3 7a04 	vstr	s15, [r3, #16]
	myTS_Calibrate.Bias_Y = 10 - myTS_Calibrate.Scale_Y*myTS_Calibrate.TL_Y;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <TSC2046_Calibrate+0x240>)
 80018e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <TSC2046_Calibrate+0x240>)
 80018ee:	885b      	ldrh	r3, [r3, #2]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <TSC2046_Calibrate+0x240>)
 8001906:	edc3 7a05 	vstr	s15, [r3, #20]
	
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	9999999a 	.word	0x9999999a
 800191c:	3fb99999 	.word	0x3fb99999
 8001920:	20000100 	.word	0x20000100
 8001924:	00000000 	.word	0x00000000

08001928 <TSC2046_GetRawTouch>:
//3. Poll for touch status
TS_TOUCH_RAW_Def TSC2046_GetRawTouch(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	
	//Assign raw touch based on orientation
	switch (ScreenOrientation)
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <TSC2046_GetRawTouch+0xfc>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3b01      	subs	r3, #1
 8001934:	2b03      	cmp	r3, #3
 8001936:	d867      	bhi.n	8001a08 <TSC2046_GetRawTouch+0xe0>
 8001938:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <TSC2046_GetRawTouch+0x18>)
 800193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193e:	bf00      	nop
 8001940:	08001951 	.word	0x08001951
 8001944:	0800197f 	.word	0x0800197f
 8001948:	080019b3 	.word	0x080019b3
 800194c:	080019e1 	.word	0x080019e1
	{
		case 1:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8001950:	f000 f894 	bl	8001a7c <TSC2046_getRaw_X>
 8001954:	4603      	mov	r3, r0
 8001956:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800195a:	330f      	adds	r3, #15
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 8001960:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_Y();
 8001962:	f000 f89b 	bl	8001a9c <TSC2046_getRaw_Y>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 800196c:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 8001970:	22e6      	movs	r2, #230	; 0xe6
 8001972:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 8001976:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800197a:	835a      	strh	r2, [r3, #26]
			break;
 800197c:	e044      	b.n	8001a08 <TSC2046_GetRawTouch+0xe0>
		
		case 2:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 800197e:	f000 f88d 	bl	8001a9c <TSC2046_getRaw_Y>
 8001982:	4603      	mov	r3, r0
 8001984:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001988:	330f      	adds	r3, #15
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 800198e:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 8001990:	f000 f874 	bl	8001a7c <TSC2046_getRaw_X>
 8001994:	4603      	mov	r3, r0
 8001996:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800199a:	330f      	adds	r3, #15
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 80019a0:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 80019a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a8:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 80019ac:	22f0      	movs	r2, #240	; 0xf0
 80019ae:	835a      	strh	r2, [r3, #26]
			break;
 80019b0:	e02a      	b.n	8001a08 <TSC2046_GetRawTouch+0xe0>
		
		case 3:
			localRawTouch.x_touch = TSC2046_getRaw_X();
 80019b2:	f000 f863 	bl	8001a7c <TSC2046_getRaw_X>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 80019bc:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 80019be:	f000 f86d 	bl	8001a9c <TSC2046_getRaw_Y>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80019c8:	330f      	adds	r3, #15
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 80019ce:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 80019d2:	22e6      	movs	r2, #230	; 0xe6
 80019d4:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 80019d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019dc:	835a      	strh	r2, [r3, #26]
			break;
 80019de:	e013      	b.n	8001a08 <TSC2046_GetRawTouch+0xe0>
		
		case 4:
			localRawTouch.x_touch = TSC2046_getRaw_Y();
 80019e0:	f000 f85c 	bl	8001a9c <TSC2046_getRaw_Y>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 80019ea:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_X();
 80019ec:	f000 f846 	bl	8001a7c <TSC2046_getRaw_X>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 80019f6:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 80019fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019fe:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <TSC2046_GetRawTouch+0x104>)
 8001a02:	22f0      	movs	r2, #240	; 0xf0
 8001a04:	835a      	strh	r2, [r3, #26]
			break;
 8001a06:	bf00      	nop
	}
	
	return localRawTouch;
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <TSC2046_GetRawTouch+0x100>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	88ba      	ldrh	r2, [r7, #4]
 8001a12:	f362 030f 	bfi	r3, r2, #0, #16
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200000fe 	.word	0x200000fe
 8001a28:	2000011c 	.word	0x2000011c
 8001a2c:	20000100 	.word	0x20000100

08001a30 <TSC2046_Begin>:

//4. Begin function
bool  TSC2046_Begin(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	80fb      	strh	r3, [r7, #6]
	//Touch Screen SPI
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 8001a3e:	2258      	movs	r2, #88	; 0x58
 8001a40:	68f9      	ldr	r1, [r7, #12]
 8001a42:	480a      	ldr	r0, [pc, #40]	; (8001a6c <TSC2046_Begin+0x3c>)
 8001a44:	f003 fbbc 	bl	80051c0 <memcpy>
	//Chip-Select Port and Pin
	tsCS_GPIO = csPort;
 8001a48:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <TSC2046_Begin+0x40>)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <TSC2046_Begin+0x44>)
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	8013      	strh	r3, [r2, #0]
	//Get screen orientation
	ScreenOrientation = TSC2046_getOrientation();
 8001a54:	f000 f88c 	bl	8001b70 <TSC2046_getOrientation>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <TSC2046_Begin+0x48>)
 8001a5e:	701a      	strb	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200000a0 	.word	0x200000a0
 8001a70:	200000f8 	.word	0x200000f8
 8001a74:	200000fc 	.word	0x200000fc
 8001a78:	200000fe 	.word	0x200000fe

08001a7c <TSC2046_getRaw_X>:

//5. Get raw touch data
//i. get x-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_X(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_X_AXIS | CMD_Default);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <TSC2046_getRaw_X+0x1c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fddc 	bl	8001648 <TSC2046_SendCommand>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000001 	.word	0x20000001

08001a9c <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Y(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Y_AXIS | CMD_Default);
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <TSC2046_getRaw_Y+0x1c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fdcc 	bl	8001648 <TSC2046_SendCommand>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000001 	.word	0x20000001

08001abc <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Z(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Z_AXIS | CMD_Default);
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <TSC2046_getRaw_Z+0x1c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fdbc 	bl	8001648 <TSC2046_SendCommand>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000001 	.word	0x20000001

08001adc <TSC2046_TL_point>:

//6. Print calibration points
//i. Top-Left corner point
void TSC2046_TL_point(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(10, 10, 3, COLOR_RED);
 8001ae2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	210a      	movs	r1, #10
 8001aea:	200a      	movs	r0, #10
 8001aec:	f7ff fad9 	bl	80010a2 <ILI9341_fillCircle>
	ILI9341_printText("Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 8001af0:	2301      	movs	r3, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001afe:	221e      	movs	r2, #30
 8001b00:	2114      	movs	r1, #20
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <TSC2046_TL_point+0x34>)
 8001b04:	f7ff fd06 	bl	8001514 <ILI9341_printText>
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	08005208 	.word	0x08005208

08001b14 <TSC2046_BR_point>:
//ii. Bottom-Right corner point
void TSC2046_BR_point(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(myTS_Calibrate.Width-10, myTS_Calibrate.Height-10, 3, COLOR_RED);
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <TSC2046_BR_point+0x54>)
 8001b1c:	8b1b      	ldrh	r3, [r3, #24]
 8001b1e:	3b0a      	subs	r3, #10
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	b218      	sxth	r0, r3
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <TSC2046_BR_point+0x54>)
 8001b26:	8b5b      	ldrh	r3, [r3, #26]
 8001b28:	3b0a      	subs	r3, #10
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b219      	sxth	r1, r3
 8001b2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b32:	2203      	movs	r2, #3
 8001b34:	f7ff fab5 	bl	80010a2 <ILI9341_fillCircle>
	ILI9341_printText("Press here", myTS_Calibrate.Width-80, myTS_Calibrate.Height-40, COLOR_RED, COLOR_RED, 1);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <TSC2046_BR_point+0x54>)
 8001b3a:	8b1b      	ldrh	r3, [r3, #24]
 8001b3c:	3b50      	subs	r3, #80	; 0x50
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b219      	sxth	r1, r3
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <TSC2046_BR_point+0x54>)
 8001b44:	8b5b      	ldrh	r3, [r3, #26]
 8001b46:	3b28      	subs	r3, #40	; 0x28
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <TSC2046_BR_point+0x58>)
 8001b5c:	f7ff fcda 	bl	8001514 <ILI9341_printText>
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000100 	.word	0x20000100
 8001b6c:	08005208 	.word	0x08005208

08001b70 <TSC2046_getOrientation>:

//7. Get orientation (from LCD driver)
uint8_t TSC2046_getOrientation(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	return ILI9341_getRotation();
 8001b74:	f7ff fd5c 	bl	8001630 <ILI9341_getRotation>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <fclamp>:
static uint32_t ADC_ChannelX;
static uint32_t ADC_ChannelY;
static LCD_TouchState m_touch_state = LCD_TOUCH_IDLE;
static LCD_TouchPoint* m_last_point_ref = NULL;

static float fclamp(float x, float l, float u) {
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b88:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b8c:	ed87 1a01 	vstr	s2, [r7, #4]
	return x < l ? l : (x > u ? u : x);
 8001b90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d501      	bpl.n	8001ba6 <fclamp+0x28>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	e00b      	b.n	8001bbe <fclamp+0x40>
 8001ba6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd01      	ble.n	8001bbc <fclamp+0x3e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	e000      	b.n	8001bbe <fclamp+0x40>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	ee07 3a90 	vmov	s15, r3
}
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <adc_norm_x>:

static float adc_norm_x(uint32_t x) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	return (x - TOUCH_ADC_X_MIN) * ADC_UNIT_PX_X;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001bfc <adc_norm_x+0x2c>
 8001bea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001bee:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	39a9200b 	.word	0x39a9200b

08001c00 <adc_norm_y>:

static float adc_norm_y(uint32_t y) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	return (y - TOUCH_ADC_Y_MIN) * ADC_UNIT_PX_Y;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c16:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c2c <adc_norm_y+0x2c>
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	3996a850 	.word	0x3996a850

08001c30 <ADC_GetValue>:

static uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig;

	sConfig.Channel = channel;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f001 f99b 	bl	8002f88 <HAL_ADC_ConfigChannel>

	// start conversion
	HAL_ADC_Start(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fffa 	bl	8002c4c <HAL_ADC_Start>

	// wait until finish
	HAL_ADC_PollForConversion(hadc, 100);
 8001c58:	2164      	movs	r1, #100	; 0x64
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f001 f8fb 	bl	8002e56 <HAL_ADC_PollForConversion>

	uint32_t value = HAL_ADC_GetValue(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f001 f983 	bl	8002f6c <HAL_ADC_GetValue>
 8001c66:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f001 f8c1 	bl	8002df0 <HAL_ADC_Stop>

	return value;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <GPIO_SetPinMode>:

static void GPIO_SetPinMode(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		uint32_t GPIO_PinMode) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	460b      	mov	r3, r1
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_PinMode;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f001 fd11 	bl	80036c4 <HAL_GPIO_Init>
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <ADC_GPIOA_init>:

static void ADC_GPIOA_init(uint16_t GPIO_Pin) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <ADC_GPIOA_init+0x2c>)
 8001cca:	f001 fcfb 	bl	80036c4 <HAL_GPIO_Init>
}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40020000 	.word	0x40020000

08001cdc <touchX>:

static uint32_t touchX() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	GPIO_SetPinMode(GPIOA, GPIO_PIN_1, GPIO_MODE_OUTPUT_PP);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4813      	ldr	r0, [pc, #76]	; (8001d34 <touchX+0x58>)
 8001ce6:	f7ff ffc7 	bl	8001c78 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_OUTPUT_PP);
 8001cea:	2201      	movs	r2, #1
 8001cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf0:	4810      	ldr	r0, [pc, #64]	; (8001d34 <touchX+0x58>)
 8001cf2:	f7ff ffc1 	bl	8001c78 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_INPUT);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfc:	480e      	ldr	r0, [pc, #56]	; (8001d38 <touchX+0x5c>)
 8001cfe:	f7ff ffbb 	bl	8001c78 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_4);
 8001d02:	2010      	movs	r0, #16
 8001d04:	f7ff ffd2 	bl	8001cac <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <touchX+0x58>)
 8001d0e:	f001 fe6d 	bl	80039ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d18:	4806      	ldr	r0, [pc, #24]	; (8001d34 <touchX+0x58>)
 8001d1a:	f001 fe67 	bl	80039ec <HAL_GPIO_WritePin>

	return ADC_GetValue(hadcX, ADC_ChannelX);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <touchX+0x60>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <touchX+0x64>)
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff81 	bl	8001c30 <ADC_GetValue>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	20000120 	.word	0x20000120
 8001d40:	20000128 	.word	0x20000128

08001d44 <touchY>:

static uint32_t touchY() {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001d4a:	200a      	movs	r0, #10
 8001d4c:	f001 fc91 	bl	8003672 <HAL_NVIC_DisableIRQ>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_OUTPUT_PP);
 8001d50:	2201      	movs	r2, #1
 8001d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d56:	4819      	ldr	r0, [pc, #100]	; (8001dbc <touchY+0x78>)
 8001d58:	f7ff ff8e 	bl	8001c78 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_4, GPIO_MODE_OUTPUT_PP);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <touchY+0x7c>)
 8001d62:	f7ff ff89 	bl	8001c78 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_INPUT);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6c:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <touchY+0x7c>)
 8001d6e:	f7ff ff83 	bl	8001c78 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_1);
 8001d72:	2002      	movs	r0, #2
 8001d74:	f7ff ff9a 	bl	8001cac <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7e:	480f      	ldr	r0, [pc, #60]	; (8001dbc <touchY+0x78>)
 8001d80:	f001 fe34 	bl	80039ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	2110      	movs	r1, #16
 8001d88:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <touchY+0x7c>)
 8001d8a:	f001 fe2f 	bl	80039ec <HAL_GPIO_WritePin>

	uint32_t adc_y = ADC_GetValue(hadcY, ADC_ChannelY);
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <touchY+0x80>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <touchY+0x84>)
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff49 	bl	8001c30 <ADC_GetValue>
 8001d9e:	6078      	str	r0, [r7, #4]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <touchY+0x88>)
 8001da2:	2210      	movs	r2, #16
 8001da4:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8001da6:	200a      	movs	r0, #10
 8001da8:	f001 fc7d 	bl	80036a6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001dac:	200a      	movs	r0, #10
 8001dae:	f001 fc52 	bl	8003656 <HAL_NVIC_EnableIRQ>

	return adc_y;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	20000124 	.word	0x20000124
 8001dc8:	2000012c 	.word	0x2000012c
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <LCD_Touch_Init>:

/**
 * Saves ADC handles references to measure touch screen positions.
 */
void LCD_Touch_Init(ADC_HandleTypeDef* aHadcX, uint32_t aADC_ChannelX,
		ADC_HandleTypeDef* aHadcY, uint32_t aADC_ChannelY) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
	hadcX = aHadcX;
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <LCD_Touch_Init+0x34>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6013      	str	r3, [r2, #0]
	hadcY = aHadcY;
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <LCD_Touch_Init+0x38>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
	ADC_ChannelX = aADC_ChannelX;
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <LCD_Touch_Init+0x3c>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6013      	str	r3, [r2, #0]
	ADC_ChannelY = aADC_ChannelY;
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <LCD_Touch_Init+0x40>)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000120 	.word	0x20000120
 8001e08:	20000124 	.word	0x20000124
 8001e0c:	20000128 	.word	0x20000128
 8001e10:	2000012c 	.word	0x2000012c

08001e14 <GPIO_DrawMode>:

static void GPIO_DrawMode() {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE()
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <GPIO_DrawMode+0x7c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <GPIO_DrawMode+0x7c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <GPIO_DrawMode+0x7c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOB_CLK_ENABLE()
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <GPIO_DrawMode+0x7c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <GPIO_DrawMode+0x7c>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <GPIO_DrawMode+0x7c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
	;
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001e52:	200a      	movs	r0, #10
 8001e54:	f001 fc0d 	bl	8003672 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]

	/*Configure GPIO pins: PA1 PA4 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_8;
 8001e64:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001e68:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <GPIO_DrawMode+0x80>)
 8001e72:	f001 fc27 	bl	80036c4 <HAL_GPIO_Init>

	/*Configure GPIO data pin PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <GPIO_DrawMode+0x84>)
 8001e84:	f001 fc1e 	bl	80036c4 <HAL_GPIO_Init>
}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400

08001e9c <GPIO_InterruptMode>:


// TOUCH mode GPIO setup
static void GPIO_InterruptMode() {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE()
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <GPIO_InterruptMode+0xa8>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <GPIO_InterruptMode+0xa8>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <GPIO_InterruptMode+0xa8>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
	;

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]

	/* X- PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481d      	ldr	r0, [pc, #116]	; (8001f48 <GPIO_InterruptMode+0xac>)
 8001ed4:	f001 fbf6 	bl	80036c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2102      	movs	r1, #2
 8001edc:	481a      	ldr	r0, [pc, #104]	; (8001f48 <GPIO_InterruptMode+0xac>)
 8001ede:	f001 fd85 	bl	80039ec <HAL_GPIO_WritePin>

	/* X+ PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4814      	ldr	r0, [pc, #80]	; (8001f48 <GPIO_InterruptMode+0xac>)
 8001ef6:	f001 fbe5 	bl	80036c4 <HAL_GPIO_Init>

	/* Y- PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480f      	ldr	r0, [pc, #60]	; (8001f4c <GPIO_InterruptMode+0xb0>)
 8001f0e:	f001 fbd9 	bl	80036c4 <HAL_GPIO_Init>

	/* Y+ PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f12:	2310      	movs	r3, #16
 8001f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f16:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001f1a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4808      	ldr	r0, [pc, #32]	; (8001f48 <GPIO_InterruptMode+0xac>)
 8001f26:	f001 fbcd 	bl	80036c4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	200a      	movs	r0, #10
 8001f30:	f001 fb75 	bl	800361e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f34:	200a      	movs	r0, #10
 8001f36:	f001 fb8e 	bl	8003656 <HAL_NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400

08001f50 <LCD_SetMode>:
 * Set LCD's mode to either DRAW or TOUCH.
 *
 * Set LCD_Mode to DRAW to draw or print text on LCD,
 * then switch back to TOUCH, if you want to receive touches.
 */
HAL_StatusTypeDef LCD_SetMode(LCD_Mode mode) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <LCD_SetMode+0x1c>
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <LCD_SetMode+0x24>
	case LCD_MODE_TOUCH:
		GPIO_InterruptMode();
 8001f64:	f7ff ff9a 	bl	8001e9c <GPIO_InterruptMode>
		return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e004      	b.n	8001f76 <LCD_SetMode+0x26>

	case LCD_MODE_DRAW:
		GPIO_DrawMode();
 8001f6c:	f7ff ff52 	bl	8001e14 <GPIO_DrawMode>
		return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <LCD_SetMode+0x26>

	default:
		return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
	}
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <LCD_Touch_Read>:

/*
 * Reads raw touch x- and y-positions and, if successful,
 * stores them in the LCD_TouchPoint point.
 */
LCD_TouchReadState LCD_Touch_Read(LCD_TouchPoint* p) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	if (hadcX == NULL || hadcY == NULL) {
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <LCD_Touch_Read+0xe4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <LCD_Touch_Read+0x18>
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <LCD_Touch_Read+0xe8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <LCD_Touch_Read+0x1c>
		return LCD_TOUCH_READ_NOT_INITIALIZED;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e05e      	b.n	800205a <LCD_Touch_Read+0xda>
	}
	if (m_touch_state == LCD_TOUCH_IDLE) {
 8001f9c:	4b33      	ldr	r3, [pc, #204]	; (800206c <LCD_Touch_Read+0xec>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <LCD_Touch_Read+0x28>
		return LCD_TOUCH_READ_NO_TOUCH;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e058      	b.n	800205a <LCD_Touch_Read+0xda>
	}
	uint32_t x = touchX();
 8001fa8:	f7ff fe98 	bl	8001cdc <touchX>
 8001fac:	60f8      	str	r0, [r7, #12]

	if (x > ADC_NO_TOUCH_X_OUTSIDE) {
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f640 729b 	movw	r2, #3995	; 0xf9b
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <LCD_Touch_Read+0x3c>
		return LCD_TOUCH_READ_OUTSIDE;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e04e      	b.n	800205a <LCD_Touch_Read+0xda>
	}

	uint32_t y = touchY();
 8001fbc:	f7ff fec2 	bl	8001d44 <touchY>
 8001fc0:	60b8      	str	r0, [r7, #8]

	p->x = (int16_t) ((1 - fclamp(adc_norm_x(x), 0.0f, 1.0f)) * TFTWIDTH);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff fe04 	bl	8001bd0 <adc_norm_x>
 8001fc8:	eef0 7a40 	vmov.f32	s15, s0
 8001fcc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001fd0:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002070 <LCD_Touch_Read+0xf0>
 8001fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd8:	f7ff fdd1 	bl	8001b7e <fclamp>
 8001fdc:	eef0 7a40 	vmov.f32	s15, s0
 8001fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002074 <LCD_Touch_Read+0xf4>
 8001fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff4:	ee17 3a90 	vmov	r3, s15
 8001ff8:	b21a      	sxth	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	801a      	strh	r2, [r3, #0]
	p->y = (int16_t) ((1 - fclamp(adc_norm_y(y), 0.0f, 1.0f)) * TFTHEIGHT);
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	f7ff fdfe 	bl	8001c00 <adc_norm_y>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
 8002008:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800200c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8002070 <LCD_Touch_Read+0xf0>
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	f7ff fdb3 	bl	8001b7e <fclamp>
 8002018:	eef0 7a40 	vmov.f32	s15, s0
 800201c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002024:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002078 <LCD_Touch_Read+0xf8>
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002030:	ee17 3a90 	vmov	r3, s15
 8002034:	b21a      	sxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	805a      	strh	r2, [r3, #2]
	p->tick = HAL_GetTick();
 800203a:	f000 fd93 	bl	8002b64 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]
	p->state = m_touch_state;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <LCD_Touch_Read+0xec>)
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	721a      	strb	r2, [r3, #8]

	m_last_point_ref = p;
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LCD_Touch_Read+0xfc>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
	m_touch_state = LCD_TOUCH_MOVE;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <LCD_Touch_Read+0xec>)
 8002054:	2202      	movs	r2, #2
 8002056:	701a      	strb	r2, [r3, #0]

	return LCD_TOUCH_READ_SUCCESS;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000120 	.word	0x20000120
 8002068:	20000124 	.word	0x20000124
 800206c:	20000130 	.word	0x20000130
 8002070:	00000000 	.word	0x00000000
 8002074:	43700000 	.word	0x43700000
 8002078:	43a00000 	.word	0x43a00000
 800207c:	20000134 	.word	0x20000134

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int Testcolor=0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800208a:	f000 fd05 	bl	8002a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208e:	f000 f923 	bl	80022d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002092:	f000 faa3 	bl	80025dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002096:	f000 fa35 	bl	8002504 <MX_SPI1_Init>
  MX_SPI2_Init();
 800209a:	f000 fa69 	bl	8002570 <MX_SPI2_Init>
  MX_ADC1_Init();
 800209e:	f000 f98d 	bl	80023bc <MX_ADC1_Init>
  MX_ADC2_Init();
 80020a2:	f000 f9dd 	bl	8002460 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	4b7c      	ldr	r3, [pc, #496]	; (800229c <main+0x21c>)
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4b7a      	ldr	r3, [pc, #488]	; (80022a0 <main+0x220>)
 80020b6:	2240      	movs	r2, #64	; 0x40
 80020b8:	497a      	ldr	r1, [pc, #488]	; (80022a4 <main+0x224>)
 80020ba:	487b      	ldr	r0, [pc, #492]	; (80022a8 <main+0x228>)
 80020bc:	f7fe fde0 	bl	8000c80 <ILI9341_Init>
	ILI9341_setRotation(2);
 80020c0:	2002      	movs	r0, #2
 80020c2:	f7ff fa69 	bl	8001598 <ILI9341_setRotation>
	ILI9341_Fill(COLOR_NAVY);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f7fe feba 	bl	8000e40 <ILI9341_Fill>

	TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
 80020cc:	2220      	movs	r2, #32
 80020ce:	4975      	ldr	r1, [pc, #468]	; (80022a4 <main+0x224>)
 80020d0:	4876      	ldr	r0, [pc, #472]	; (80022ac <main+0x22c>)
 80020d2:	f7ff fcad 	bl	8001a30 <TSC2046_Begin>
	TSC2046_Calibrate();
 80020d6:	f7ff fb03 	bl	80016e0 <TSC2046_Calibrate>
	ILI9341_Fill(COLOR_WHITE);
 80020da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020de:	f7fe feaf 	bl	8000e40 <ILI9341_Fill>

		ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 80020e2:	231f      	movs	r3, #31
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	23b4      	movs	r3, #180	; 0xb4
 80020e8:	228c      	movs	r2, #140	; 0x8c
 80020ea:	218c      	movs	r1, #140	; 0x8c
 80020ec:	2014      	movs	r0, #20
 80020ee:	f7fe feeb 	bl	8000ec8 <ILI9341_Fill_Rect>
		ILI9341_printText("LED ON", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 80020f2:	2301      	movs	r3, #1
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	231f      	movs	r3, #31
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020fe:	229b      	movs	r2, #155	; 0x9b
 8002100:	2137      	movs	r1, #55	; 0x37
 8002102:	486b      	ldr	r0, [pc, #428]	; (80022b0 <main+0x230>)
 8002104:	f7ff fa06 	bl	8001514 <ILI9341_printText>
		ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8002108:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	23b4      	movs	r3, #180	; 0xb4
 8002110:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002114:	218c      	movs	r1, #140	; 0x8c
 8002116:	20b4      	movs	r0, #180	; 0xb4
 8002118:	f7fe fed6 	bl	8000ec8 <ILI9341_Fill_Rect>
		ILI9341_printText("LED OFF", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 800211c:	2301      	movs	r3, #1
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212a:	229b      	movs	r2, #155	; 0x9b
 800212c:	21d7      	movs	r1, #215	; 0xd7
 800212e:	4861      	ldr	r0, [pc, #388]	; (80022b4 <main+0x234>)
 8002130:	f7ff f9f0 	bl	8001514 <ILI9341_printText>

	ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 8002134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	235a      	movs	r3, #90	; 0x5a
 800213c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002140:	211e      	movs	r1, #30
 8002142:	203c      	movs	r0, #60	; 0x3c
 8002144:	f7fe fec0 	bl	8000ec8 <ILI9341_Fill_Rect>


	ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 8002148:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	23eb      	movs	r3, #235	; 0xeb
 8002150:	f240 123b 	movw	r2, #315	; 0x13b
 8002154:	21d7      	movs	r1, #215	; 0xd7
 8002156:	2005      	movs	r0, #5
 8002158:	f7fe feb6 	bl	8000ec8 <ILI9341_Fill_Rect>
	ILI9341_printText("Touch Display stm32 Arduino", 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 800215c:	2301      	movs	r3, #1
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800216a:	22dd      	movs	r2, #221	; 0xdd
 800216c:	2146      	movs	r1, #70	; 0x46
 800216e:	4852      	ldr	r0, [pc, #328]	; (80022b8 <main+0x238>)
 8002170:	f7ff f9d0 	bl	8001514 <ILI9341_printText>
	ILI9341_Fill_Rect(5, 215, 5, 25, COLOR_GREEN);
 8002174:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2319      	movs	r3, #25
 800217c:	2205      	movs	r2, #5
 800217e:	21d7      	movs	r1, #215	; 0xd7
 8002180:	2005      	movs	r0, #5
 8002182:	f7fe fea1 	bl	8000ec8 <ILI9341_Fill_Rect>
	ILI9341_printText("Max, Leo, Margot, time to leave ", 60 ,5, COLOR_WHITE, COLOR_BLACK, 1);
 8002186:	2301      	movs	r3, #1
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2300      	movs	r3, #0
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002192:	2205      	movs	r2, #5
 8002194:	213c      	movs	r1, #60	; 0x3c
 8002196:	4849      	ldr	r0, [pc, #292]	; (80022bc <main+0x23c>)
 8002198:	f7ff f9bc 	bl	8001514 <ILI9341_printText>
	LCD_Touch_Init(&hadc2, ADC_CHANNEL_4, &hadc1, ADC_CHANNEL_1);
 800219c:	2301      	movs	r3, #1
 800219e:	4a48      	ldr	r2, [pc, #288]	; (80022c0 <main+0x240>)
 80021a0:	2104      	movs	r1, #4
 80021a2:	4848      	ldr	r0, [pc, #288]	; (80022c4 <main+0x244>)
 80021a4:	f7ff fe14 	bl	8001dd0 <LCD_Touch_Init>
		LCD_SetMode(LCD_MODE_TOUCH);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff fed1 	bl	8001f50 <LCD_SetMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (LCD_Touch_Read(&p) == LCD_TOUCH_READ_SUCCESS)
 80021ae:	463b      	mov	r3, r7
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fee5 	bl	8001f80 <LCD_Touch_Read>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f8      	bne.n	80021ae <main+0x12e>
	  {
		  if(Testcolor==0)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d135      	bne.n	800222e <main+0x1ae>
		  {
			  	  	ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 80021c2:	231f      	movs	r3, #31
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	23b4      	movs	r3, #180	; 0xb4
 80021c8:	228c      	movs	r2, #140	; 0x8c
 80021ca:	218c      	movs	r1, #140	; 0x8c
 80021cc:	2014      	movs	r0, #20
 80021ce:	f7fe fe7b 	bl	8000ec8 <ILI9341_Fill_Rect>
			  		ILI9341_printText("LED ON TOUCH 0", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 80021d2:	2301      	movs	r3, #1
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	231f      	movs	r3, #31
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021de:	229b      	movs	r2, #155	; 0x9b
 80021e0:	2137      	movs	r1, #55	; 0x37
 80021e2:	4839      	ldr	r0, [pc, #228]	; (80022c8 <main+0x248>)
 80021e4:	f7ff f996 	bl	8001514 <ILI9341_printText>
			  		ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 80021e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	23b4      	movs	r3, #180	; 0xb4
 80021f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021f4:	218c      	movs	r1, #140	; 0x8c
 80021f6:	20b4      	movs	r0, #180	; 0xb4
 80021f8:	f7fe fe66 	bl	8000ec8 <ILI9341_Fill_Rect>
			  		ILI9341_printText("LED OFF TOUCH 0", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 80021fc:	2301      	movs	r3, #1
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220a:	229b      	movs	r2, #155	; 0x9b
 800220c:	21d7      	movs	r1, #215	; 0xd7
 800220e:	482f      	ldr	r0, [pc, #188]	; (80022cc <main+0x24c>)
 8002210:	f7ff f980 	bl	8001514 <ILI9341_printText>
			  		ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 8002214:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	235a      	movs	r3, #90	; 0x5a
 800221c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002220:	211e      	movs	r1, #30
 8002222:	203c      	movs	r0, #60	; 0x3c
 8002224:	f7fe fe50 	bl	8000ec8 <ILI9341_Fill_Rect>


			  Testcolor=1;
 8002228:	2301      	movs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e7bf      	b.n	80021ae <main+0x12e>
		  }
		  else
		  {
								ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_RED);
 800222e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	23b4      	movs	r3, #180	; 0xb4
 8002236:	228c      	movs	r2, #140	; 0x8c
 8002238:	218c      	movs	r1, #140	; 0x8c
 800223a:	2014      	movs	r0, #20
 800223c:	f7fe fe44 	bl	8000ec8 <ILI9341_Fill_Rect>
						  		ILI9341_printText("LED ON TOUCH 1", 55,  155, COLOR_WHITE, COLOR_RED, 1);
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224e:	229b      	movs	r2, #155	; 0x9b
 8002250:	2137      	movs	r1, #55	; 0x37
 8002252:	481f      	ldr	r0, [pc, #124]	; (80022d0 <main+0x250>)
 8002254:	f7ff f95e 	bl	8001514 <ILI9341_printText>
						  		ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8002258:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	23b4      	movs	r3, #180	; 0xb4
 8002260:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002264:	218c      	movs	r1, #140	; 0x8c
 8002266:	20b4      	movs	r0, #180	; 0xb4
 8002268:	f7fe fe2e 	bl	8000ec8 <ILI9341_Fill_Rect>
						  		ILI9341_printText("LED OFF TOUCH 1", 215,  155, COLOR_WHITE, COLOR_BLUE, 1);
 800226c:	2301      	movs	r3, #1
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	231f      	movs	r3, #31
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002278:	229b      	movs	r2, #155	; 0x9b
 800227a:	21d7      	movs	r1, #215	; 0xd7
 800227c:	4815      	ldr	r0, [pc, #84]	; (80022d4 <main+0x254>)
 800227e:	f7ff f949 	bl	8001514 <ILI9341_printText>
						  		ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_BLUE);
 8002282:	231f      	movs	r3, #31
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	235a      	movs	r3, #90	; 0x5a
 8002288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800228c:	211e      	movs	r1, #30
 800228e:	203c      	movs	r0, #60	; 0x3c
 8002290:	f7fe fe1a 	bl	8000ec8 <ILI9341_Fill_Rect>
			  Testcolor=0;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
	  if (LCD_Touch_Read(&p) == LCD_TOUCH_READ_SUCCESS)
 8002298:	e789      	b.n	80021ae <main+0x12e>
 800229a:	bf00      	nop
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	200001c8 	.word	0x200001c8
 80022ac:	20000220 	.word	0x20000220
 80022b0:	08005214 	.word	0x08005214
 80022b4:	0800521c 	.word	0x0800521c
 80022b8:	08005224 	.word	0x08005224
 80022bc:	08005240 	.word	0x08005240
 80022c0:	20000138 	.word	0x20000138
 80022c4:	20000180 	.word	0x20000180
 80022c8:	08005264 	.word	0x08005264
 80022cc:	08005274 	.word	0x08005274
 80022d0:	08005284 	.word	0x08005284
 80022d4:	08005294 	.word	0x08005294

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b094      	sub	sp, #80	; 0x50
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	2234      	movs	r2, #52	; 0x34
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 ff78 	bl	80051dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <SystemClock_Config+0xdc>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4a2b      	ldr	r2, [pc, #172]	; (80023b4 <SystemClock_Config+0xdc>)
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <SystemClock_Config+0xdc>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002318:	2300      	movs	r3, #0
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <SystemClock_Config+0xe0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <SystemClock_Config+0xe0>)
 8002322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <SystemClock_Config+0xe0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002334:	2301      	movs	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233e:	2302      	movs	r3, #2
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002348:	2304      	movs	r3, #4
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800234c:	23b4      	movs	r3, #180	; 0xb4
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002350:	2302      	movs	r3, #2
 8002352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002354:	2302      	movs	r3, #2
 8002356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002358:	2302      	movs	r3, #2
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4618      	mov	r0, r3
 8002362:	f001 fec3 	bl	80040ec <HAL_RCC_OscConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800236c:	f000 f9c0 	bl	80026f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002370:	f001 fb56 	bl	8003a20 <HAL_PWREx_EnableOverDrive>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800237a:	f000 f9b9 	bl	80026f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237e:	230f      	movs	r3, #15
 8002380:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002382:	2302      	movs	r3, #2
 8002384:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800238a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800238e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002394:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	2105      	movs	r1, #5
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fb8f 	bl	8003ac0 <HAL_RCC_ClockConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80023a8:	f000 f9a2 	bl	80026f0 <Error_Handler>
  }
}
 80023ac:	bf00      	nop
 80023ae:	3750      	adds	r7, #80	; 0x50
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000

080023bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_ADC1_Init+0x98>)
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <MX_ADC1_Init+0x9c>)
 80023d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_ADC1_Init+0x98>)
 80023d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_ADC1_Init+0x98>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_ADC1_Init+0x98>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_ADC1_Init+0x98>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_ADC1_Init+0x98>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_ADC1_Init+0x98>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_ADC1_Init+0x98>)
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <MX_ADC1_Init+0xa0>)
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_ADC1_Init+0x98>)
 8002404:	2200      	movs	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_ADC1_Init+0x98>)
 800240a:	2201      	movs	r2, #1
 800240c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_ADC1_Init+0x98>)
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_ADC1_Init+0x98>)
 8002418:	2201      	movs	r2, #1
 800241a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_ADC1_Init+0x98>)
 800241e:	f000 fbd1 	bl	8002bc4 <HAL_ADC_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002428:	f000 f962 	bl	80026f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800242c:	2301      	movs	r3, #1
 800242e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_ADC1_Init+0x98>)
 800243e:	f000 fda3 	bl	8002f88 <HAL_ADC_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002448:	f000 f952 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000138 	.word	0x20000138
 8002458:	40012000 	.word	0x40012000
 800245c:	0f000001 	.word	0x0f000001

08002460 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002466:	463b      	mov	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <MX_ADC2_Init+0x98>)
 8002474:	4a21      	ldr	r2, [pc, #132]	; (80024fc <MX_ADC2_Init+0x9c>)
 8002476:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <MX_ADC2_Init+0x98>)
 800247a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800247e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_ADC2_Init+0x98>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <MX_ADC2_Init+0x98>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <MX_ADC2_Init+0x98>)
 800248e:	2200      	movs	r2, #0
 8002490:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_ADC2_Init+0x98>)
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <MX_ADC2_Init+0x98>)
 800249c:	2200      	movs	r2, #0
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_ADC2_Init+0x98>)
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <MX_ADC2_Init+0xa0>)
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_ADC2_Init+0x98>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_ADC2_Init+0x98>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_ADC2_Init+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_ADC2_Init+0x98>)
 80024bc:	2201      	movs	r2, #1
 80024be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <MX_ADC2_Init+0x98>)
 80024c2:	f000 fb7f 	bl	8002bc4 <HAL_ADC_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80024cc:	f000 f910 	bl	80026f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024d0:	2304      	movs	r3, #4
 80024d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_ADC2_Init+0x98>)
 80024e2:	f000 fd51 	bl	8002f88 <HAL_ADC_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80024ec:	f000 f900 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000180 	.word	0x20000180
 80024fc:	40012100 	.word	0x40012100
 8002500:	0f000001 	.word	0x0f000001

08002504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_SPI1_Init+0x64>)
 800250a:	4a18      	ldr	r2, [pc, #96]	; (800256c <MX_SPI1_Init+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_SPI1_Init+0x64>)
 8002510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_SPI1_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_SPI1_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_SPI1_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_SPI1_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_SPI1_Init+0x64>)
 8002530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002534:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_SPI1_Init+0x64>)
 8002538:	2200      	movs	r2, #0
 800253a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <MX_SPI1_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_SPI1_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <MX_SPI1_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_SPI1_Init+0x64>)
 8002550:	220a      	movs	r2, #10
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_SPI1_Init+0x64>)
 8002556:	f002 f867 	bl	8004628 <HAL_SPI_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002560:	f000 f8c6 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200001c8 	.word	0x200001c8
 800256c:	40013000 	.word	0x40013000

08002570 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <MX_SPI2_Init+0x64>)
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <MX_SPI2_Init+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <MX_SPI2_Init+0x64>)
 800257c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002580:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <MX_SPI2_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <MX_SPI2_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <MX_SPI2_Init+0x64>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <MX_SPI2_Init+0x64>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <MX_SPI2_Init+0x64>)
 800259c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <MX_SPI2_Init+0x64>)
 80025a4:	2210      	movs	r2, #16
 80025a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <MX_SPI2_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <MX_SPI2_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <MX_SPI2_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <MX_SPI2_Init+0x64>)
 80025bc:	220a      	movs	r2, #10
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025c0:	4804      	ldr	r0, [pc, #16]	; (80025d4 <MX_SPI2_Init+0x64>)
 80025c2:	f002 f831 	bl	8004628 <HAL_SPI_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025cc:	f000 f890 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000220 	.word	0x20000220
 80025d8:	40003800 	.word	0x40003800

080025dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <MX_GPIO_Init+0x104>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <MX_GPIO_Init+0x104>)
 80025fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <MX_GPIO_Init+0x104>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <MX_GPIO_Init+0x104>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <MX_GPIO_Init+0x104>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002662:	2200      	movs	r2, #0
 8002664:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002668:	481e      	ldr	r0, [pc, #120]	; (80026e4 <MX_GPIO_Init+0x108>)
 800266a:	f001 f9bf 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	481d      	ldr	r0, [pc, #116]	; (80026e8 <MX_GPIO_Init+0x10c>)
 8002674:	f001 f9ba 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	2160      	movs	r1, #96	; 0x60
 800267c:	481b      	ldr	r0, [pc, #108]	; (80026ec <MX_GPIO_Init+0x110>)
 800267e:	f001 f9b5 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 8002682:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	2301      	movs	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4812      	ldr	r0, [pc, #72]	; (80026e4 <MX_GPIO_Init+0x108>)
 800269c:	f001 f812 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <MX_GPIO_Init+0x10c>)
 80026b8:	f001 f804 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 80026bc:	2360      	movs	r3, #96	; 0x60
 80026be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c0:	2301      	movs	r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <MX_GPIO_Init+0x110>)
 80026d4:	f000 fff6 	bl	80036c4 <HAL_GPIO_Init>

}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020400 	.word	0x40020400

080026f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <Error_Handler+0x8>
	...

080026fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_MspInit+0x4c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a0f      	ldr	r2, [pc, #60]	; (8002748 <HAL_MspInit+0x4c>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_MspInit+0x4c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_MspInit+0x4c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_MspInit+0x4c>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_MspInit+0x4c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800273a:	2007      	movs	r0, #7
 800273c:	f000 ff64 	bl	8003608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800

0800274c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	; 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2e      	ldr	r2, [pc, #184]	; (8002824 <HAL_ADC_MspInit+0xd8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d128      	bne.n	80027c0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a2c      	ldr	r2, [pc, #176]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	481c      	ldr	r0, [pc, #112]	; (800282c <HAL_ADC_MspInit+0xe0>)
 80027ba:	f000 ff83 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80027be:	e02c      	b.n	800281a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_ADC_MspInit+0xe4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d127      	bne.n	800281a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b16      	ldr	r3, [pc, #88]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 80027d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <HAL_ADC_MspInit+0xdc>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002802:	2310      	movs	r3, #16
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <HAL_ADC_MspInit+0xe0>)
 8002816:	f000 ff55 	bl	80036c4 <HAL_GPIO_Init>
}
 800281a:	bf00      	nop
 800281c:	3730      	adds	r7, #48	; 0x30
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40012000 	.word	0x40012000
 8002828:	40023800 	.word	0x40023800
 800282c:	40020000 	.word	0x40020000
 8002830:	40012100 	.word	0x40012100

08002834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08e      	sub	sp, #56	; 0x38
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_SPI_MspInit+0x180>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d14a      	bne.n	80028ec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
 800285a:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	623b      	str	r3, [r7, #32]
 8002870:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a4f      	ldr	r2, [pc, #316]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a48      	ldr	r2, [pc, #288]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ba:	2305      	movs	r3, #5
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	483d      	ldr	r0, [pc, #244]	; (80029bc <HAL_SPI_MspInit+0x188>)
 80028c6:	f000 fefd 	bl	80036c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028ca:	2308      	movs	r3, #8
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028da:	2305      	movs	r3, #5
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	4836      	ldr	r0, [pc, #216]	; (80029c0 <HAL_SPI_MspInit+0x18c>)
 80028e6:	f000 feed 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028ea:	e05f      	b.n	80029ac <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <HAL_SPI_MspInit+0x190>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d15a      	bne.n	80029ac <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a2e      	ldr	r2, [pc, #184]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_SPI_MspInit+0x184>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_DO_Pin;
 800294a:	2302      	movs	r3, #2
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800295a:	2307      	movs	r3, #7
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TS_DO_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	4818      	ldr	r0, [pc, #96]	; (80029c8 <HAL_SPI_MspInit+0x194>)
 8002966:	f000 fead 	bl	80036c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = T_DIN_Pin;
 800296a:	2304      	movs	r3, #4
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800297a:	2305      	movs	r3, #5
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(T_DIN_GPIO_Port, &GPIO_InitStruct);
 800297e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002982:	4619      	mov	r1, r3
 8002984:	4810      	ldr	r0, [pc, #64]	; (80029c8 <HAL_SPI_MspInit+0x194>)
 8002986:	f000 fe9d 	bl	80036c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800298a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800299c:	2305      	movs	r3, #5
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	4619      	mov	r1, r3
 80029a6:	4806      	ldr	r0, [pc, #24]	; (80029c0 <HAL_SPI_MspInit+0x18c>)
 80029a8:	f000 fe8c 	bl	80036c4 <HAL_GPIO_Init>
}
 80029ac:	bf00      	nop
 80029ae:	3738      	adds	r7, #56	; 0x38
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40013000 	.word	0x40013000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40003800 	.word	0x40003800
 80029c8:	40020800 	.word	0x40020800

080029cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <NMI_Handler+0x4>

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <MemManage_Handler+0x4>

080029de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <BusFault_Handler+0x4>

080029e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <UsageFault_Handler+0x4>

080029ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a18:	f000 f890 	bl	8002b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <SystemInit+0x20>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <SystemInit+0x20>)
 8002a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a4a:	490e      	ldr	r1, [pc, #56]	; (8002a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a60:	4c0b      	ldr	r4, [pc, #44]	; (8002a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6e:	f7ff ffd7 	bl	8002a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a72:	f002 fb81 	bl	8005178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a76:	f7ff fb03 	bl	8002080 <main>
  bx  lr    
 8002a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002a88:	080057c4 	.word	0x080057c4
  ldr r2, =_sbss
 8002a8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a90:	2000027c 	.word	0x2000027c

08002a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC_IRQHandler>
	...

08002a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_Init+0x40>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <HAL_Init+0x40>)
 8002aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_Init+0x40>)
 8002aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_Init+0x40>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	f000 fda1 	bl	8003608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f000 f808 	bl	8002adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002acc:	f7ff fe16 	bl	80026fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00

08002adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_InitTick+0x54>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_InitTick+0x58>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fdc7 	bl	800368e <HAL_SYSTICK_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00e      	b.n	8002b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d80a      	bhi.n	8002b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b10:	2200      	movs	r2, #0
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b18:	f000 fd81 	bl	800361e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b1c:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <HAL_InitTick+0x5c>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e000      	b.n	8002b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000004 	.word	0x20000004
 8002b34:	2000000c 	.word	0x2000000c
 8002b38:	20000008 	.word	0x20000008

08002b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_IncTick+0x20>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_IncTick+0x24>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <HAL_IncTick+0x24>)
 8002b4e:	6013      	str	r3, [r2, #0]
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c
 8002b60:	20000278 	.word	0x20000278

08002b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return uwTick;
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_GetTick+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000278 	.word	0x20000278

08002b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b84:	f7ff ffee 	bl	8002b64 <HAL_GetTick>
 8002b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b94:	d005      	beq.n	8002ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_Delay+0x44>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ba2:	bf00      	nop
 8002ba4:	f7ff ffde 	bl	8002b64 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d8f7      	bhi.n	8002ba4 <HAL_Delay+0x28>
  {
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000000c 	.word	0x2000000c

08002bc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e033      	b.n	8002c42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fdb2 	bl	800274c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c0a:	f023 0302 	bic.w	r3, r3, #2
 8002c0e:	f043 0202 	orr.w	r2, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fae8 	bl	80031ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
 8002c32:	e001      	b.n	8002c38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Start+0x1a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0b2      	b.n	8002dcc <HAL_ADC_Start+0x180>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d018      	beq.n	8002cae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c8c:	4b52      	ldr	r3, [pc, #328]	; (8002dd8 <HAL_ADC_Start+0x18c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_ADC_Start+0x190>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9a      	lsrs	r2, r3, #18
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ca0:	e002      	b.n	8002ca8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f9      	bne.n	8002ca2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d17a      	bne.n	8002db2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfa:	d106      	bne.n	8002d0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f023 0206 	bic.w	r2, r3, #6
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44
 8002d08:	e002      	b.n	8002d10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_ADC_Start+0x194>)
 8002d1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d12a      	bne.n	8002d88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2b      	ldr	r2, [pc, #172]	; (8002de4 <HAL_ADC_Start+0x198>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d015      	beq.n	8002d68 <HAL_ADC_Start+0x11c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <HAL_ADC_Start+0x19c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d105      	bne.n	8002d52 <HAL_ADC_Start+0x106>
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_ADC_Start+0x194>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <HAL_ADC_Start+0x1a0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d136      	bne.n	8002dca <HAL_ADC_Start+0x17e>
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_ADC_Start+0x194>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d130      	bne.n	8002dca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d129      	bne.n	8002dca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	e020      	b.n	8002dca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_ADC_Start+0x198>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d11b      	bne.n	8002dca <HAL_ADC_Start+0x17e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d114      	bne.n	8002dca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e00b      	b.n	8002dca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	431bde83 	.word	0x431bde83
 8002de0:	40012300 	.word	0x40012300
 8002de4:	40012000 	.word	0x40012000
 8002de8:	40012100 	.word	0x40012100
 8002dec:	40012200 	.word	0x40012200

08002df0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Stop+0x16>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e021      	b.n	8002e4a <HAL_ADC_Stop+0x5a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d113      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e82:	d10b      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e063      	b.n	8002f64 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e9c:	f7ff fe62 	bl	8002b64 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ea2:	e021      	b.n	8002ee8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eaa:	d01d      	beq.n	8002ee8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_ADC_PollForConversion+0x6c>
 8002eb2:	f7ff fe57 	bl	8002b64 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d212      	bcs.n	8002ee8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d00b      	beq.n	8002ee8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e03d      	b.n	8002f64 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d1d6      	bne.n	8002ea4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0212 	mvn.w	r2, #18
 8002efe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d123      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11f      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d111      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x1c>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e113      	b.n	80031cc <HAL_ADC_ConfigChannel+0x244>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	d925      	bls.n	8003000 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68d9      	ldr	r1, [r3, #12]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3b1e      	subs	r3, #30
 8002fca:	2207      	movs	r2, #7
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68d9      	ldr	r1, [r3, #12]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	4603      	mov	r3, r0
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4403      	add	r3, r0
 8002ff2:	3b1e      	subs	r3, #30
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	e022      	b.n	8003046 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6919      	ldr	r1, [r3, #16]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	2207      	movs	r2, #7
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	400a      	ands	r2, r1
 8003022:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6919      	ldr	r1, [r3, #16]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	4603      	mov	r3, r0
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4403      	add	r3, r0
 800303c:	409a      	lsls	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b06      	cmp	r3, #6
 800304c:	d824      	bhi.n	8003098 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	3b05      	subs	r3, #5
 8003060:	221f      	movs	r2, #31
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43da      	mvns	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	400a      	ands	r2, r1
 800306e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4618      	mov	r0, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	3b05      	subs	r3, #5
 800308a:	fa00 f203 	lsl.w	r2, r0, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	635a      	str	r2, [r3, #52]	; 0x34
 8003096:	e04c      	b.n	8003132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d824      	bhi.n	80030ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	3b23      	subs	r3, #35	; 0x23
 80030b2:	221f      	movs	r2, #31
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43da      	mvns	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	400a      	ands	r2, r1
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	3b23      	subs	r3, #35	; 0x23
 80030dc:	fa00 f203 	lsl.w	r2, r0, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
 80030e8:	e023      	b.n	8003132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b41      	subs	r3, #65	; 0x41
 80030fc:	221f      	movs	r2, #31
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	400a      	ands	r2, r1
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	3b41      	subs	r3, #65	; 0x41
 8003126:	fa00 f203 	lsl.w	r2, r0, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_ADC_ConfigChannel+0x250>)
 8003134:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a28      	ldr	r2, [pc, #160]	; (80031dc <HAL_ADC_ConfigChannel+0x254>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10f      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1d8>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b12      	cmp	r3, #18
 8003146:	d10b      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <HAL_ADC_ConfigChannel+0x254>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d12b      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x23a>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_ADC_ConfigChannel+0x258>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <HAL_ADC_ConfigChannel+0x1f4>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b11      	cmp	r3, #17
 800317a:	d122      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <HAL_ADC_ConfigChannel+0x258>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d111      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_ADC_ConfigChannel+0x25c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_ADC_ConfigChannel+0x260>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	0c9a      	lsrs	r2, r3, #18
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031b4:	e002      	b.n	80031bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f9      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40012300 	.word	0x40012300
 80031dc:	40012000 	.word	0x40012000
 80031e0:	10000012 	.word	0x10000012
 80031e4:	20000004 	.word	0x20000004
 80031e8:	431bde83 	.word	0x431bde83

080031ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031f4:	4b79      	ldr	r3, [pc, #484]	; (80033dc <ADC_Init+0x1f0>)
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	021a      	lsls	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <ADC_Init+0x1f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003292:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6899      	ldr	r1, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	e00f      	b.n	80032ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0202 	bic.w	r2, r2, #2
 80032f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6899      	ldr	r1, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7e1b      	ldrb	r3, [r3, #24]
 8003304:	005a      	lsls	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01b      	beq.n	8003350 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003326:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003336:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	3b01      	subs	r3, #1
 8003344:	035a      	lsls	r2, r3, #13
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	e007      	b.n	8003360 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	3b01      	subs	r3, #1
 800337c:	051a      	lsls	r2, r3, #20
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033a2:	025a      	lsls	r2, r3, #9
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6899      	ldr	r1, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	029a      	lsls	r2, r3, #10
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40012300 	.word	0x40012300
 80033e0:	0f000001 	.word	0x0f000001

080033e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800340c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <__NVIC_GetPriorityGrouping+0x18>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 0307 	and.w	r3, r3, #7
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	2b00      	cmp	r3, #0
 8003458:	db0b      	blt.n	8003472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <__NVIC_EnableIRQ+0x38>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2001      	movs	r0, #1
 800346a:	fa00 f202 	lsl.w	r2, r0, r2
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000e100 	.word	0xe000e100

08003484 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db12      	blt.n	80034bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	490a      	ldr	r1, [pc, #40]	; (80034c8 <__NVIC_DisableIRQ+0x44>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	3320      	adds	r3, #32
 80034ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034b0:	f3bf 8f4f 	dsb	sy
}
 80034b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034b6:	f3bf 8f6f 	isb	sy
}
 80034ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100

080034cc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	db0c      	blt.n	80034f8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <__NVIC_ClearPendingIRQ+0x38>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2001      	movs	r0, #1
 80034ee:	fa00 f202 	lsl.w	r2, r0, r2
 80034f2:	3360      	adds	r3, #96	; 0x60
 80034f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100

08003508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0a      	blt.n	8003532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	490c      	ldr	r1, [pc, #48]	; (8003554 <__NVIC_SetPriority+0x4c>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	440b      	add	r3, r1
 800352c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003530:	e00a      	b.n	8003548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <__NVIC_SetPriority+0x50>)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3b04      	subs	r3, #4
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	440b      	add	r3, r1
 8003546:	761a      	strb	r2, [r3, #24]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	; 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f1c3 0307 	rsb	r3, r3, #7
 8003576:	2b04      	cmp	r3, #4
 8003578:	bf28      	it	cs
 800357a:	2304      	movcs	r3, #4
 800357c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3304      	adds	r3, #4
 8003582:	2b06      	cmp	r3, #6
 8003584:	d902      	bls.n	800358c <NVIC_EncodePriority+0x30>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3b03      	subs	r3, #3
 800358a:	e000      	b.n	800358e <NVIC_EncodePriority+0x32>
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	401a      	ands	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43d9      	mvns	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	4313      	orrs	r3, r2
         );
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d4:	d301      	bcc.n	80035da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d6:	2301      	movs	r3, #1
 80035d8:	e00f      	b.n	80035fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <SysTick_Config+0x40>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3b01      	subs	r3, #1
 80035e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e2:	210f      	movs	r1, #15
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e8:	f7ff ff8e 	bl	8003508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <SysTick_Config+0x40>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <SysTick_Config+0x40>)
 80035f4:	2207      	movs	r2, #7
 80035f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	e000e010 	.word	0xe000e010

08003608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fee7 	bl	80033e4 <__NVIC_SetPriorityGrouping>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	4603      	mov	r3, r0
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003630:	f7ff fefc 	bl	800342c <__NVIC_GetPriorityGrouping>
 8003634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	6978      	ldr	r0, [r7, #20]
 800363c:	f7ff ff8e 	bl	800355c <NVIC_EncodePriority>
 8003640:	4602      	mov	r2, r0
 8003642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff5d 	bl	8003508 <__NVIC_SetPriority>
}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	4603      	mov	r3, r0
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff feef 	bl	8003448 <__NVIC_EnableIRQ>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff feff 	bl	8003484 <__NVIC_DisableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff94 	bl	80035c4 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff09 	bl	80034cc <__NVIC_ClearPendingIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e165      	b.n	80039ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f040 8154 	bne.w	80039a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d005      	beq.n	8003716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003712:	2b02      	cmp	r3, #2
 8003714:	d130      	bne.n	8003778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 0201 	and.w	r2, r3, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b03      	cmp	r3, #3
 8003782:	d017      	beq.n	80037b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d123      	bne.n	8003808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80ae 	beq.w	80039a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <HAL_GPIO_Init+0x300>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_GPIO_Init+0x300>)
 8003854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003858:	6453      	str	r3, [r2, #68]	; 0x44
 800385a:	4b5a      	ldr	r3, [pc, #360]	; (80039c4 <HAL_GPIO_Init+0x300>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003866:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_GPIO_Init+0x304>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	220f      	movs	r2, #15
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4f      	ldr	r2, [pc, #316]	; (80039cc <HAL_GPIO_Init+0x308>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d025      	beq.n	80038de <HAL_GPIO_Init+0x21a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4e      	ldr	r2, [pc, #312]	; (80039d0 <HAL_GPIO_Init+0x30c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01f      	beq.n	80038da <HAL_GPIO_Init+0x216>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4d      	ldr	r2, [pc, #308]	; (80039d4 <HAL_GPIO_Init+0x310>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d019      	beq.n	80038d6 <HAL_GPIO_Init+0x212>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <HAL_GPIO_Init+0x314>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_GPIO_Init+0x20e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	; (80039dc <HAL_GPIO_Init+0x318>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00d      	beq.n	80038ce <HAL_GPIO_Init+0x20a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <HAL_GPIO_Init+0x31c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <HAL_GPIO_Init+0x206>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a49      	ldr	r2, [pc, #292]	; (80039e4 <HAL_GPIO_Init+0x320>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_GPIO_Init+0x202>
 80038c2:	2306      	movs	r3, #6
 80038c4:	e00c      	b.n	80038e0 <HAL_GPIO_Init+0x21c>
 80038c6:	2307      	movs	r3, #7
 80038c8:	e00a      	b.n	80038e0 <HAL_GPIO_Init+0x21c>
 80038ca:	2305      	movs	r3, #5
 80038cc:	e008      	b.n	80038e0 <HAL_GPIO_Init+0x21c>
 80038ce:	2304      	movs	r3, #4
 80038d0:	e006      	b.n	80038e0 <HAL_GPIO_Init+0x21c>
 80038d2:	2303      	movs	r3, #3
 80038d4:	e004      	b.n	80038e0 <HAL_GPIO_Init+0x21c>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_Init+0x21c>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_GPIO_Init+0x21c>
 80038de:	2300      	movs	r3, #0
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f002 0203 	and.w	r2, r2, #3
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	4093      	lsls	r3, r2
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f0:	4935      	ldr	r1, [pc, #212]	; (80039c8 <HAL_GPIO_Init+0x304>)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038fe:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003922:	4a31      	ldr	r2, [pc, #196]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003928:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_GPIO_Init+0x324>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_GPIO_Init+0x324>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003952:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_GPIO_Init+0x324>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_GPIO_Init+0x324>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	f67f ae96 	bls.w	80036e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40013800 	.word	0x40013800
 80039cc:	40020000 	.word	0x40020000
 80039d0:	40020400 	.word	0x40020400
 80039d4:	40020800 	.word	0x40020800
 80039d8:	40020c00 	.word	0x40020c00
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40021400 	.word	0x40021400
 80039e4:	40021800 	.word	0x40021800
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a4c:	f7ff f88a 	bl	8002b64 <HAL_GetTick>
 8003a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a52:	e009      	b.n	8003a68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a54:	f7ff f886 	bl	8002b64 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d901      	bls.n	8003a68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e01f      	b.n	8003aa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d1ee      	bne.n	8003a54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7c:	f7ff f872 	bl	8002b64 <HAL_GetTick>
 8003a80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a82:	e009      	b.n	8003a98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a84:	f7ff f86e 	bl	8002b64 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a92:	d901      	bls.n	8003a98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e007      	b.n	8003aa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa4:	d1ee      	bne.n	8003a84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	420e0040 	.word	0x420e0040
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	420e0044 	.word	0x420e0044

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0cc      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d90c      	bls.n	8003afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d044      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d119      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e067      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4934      	ldr	r1, [pc, #208]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe ffd8 	bl	8002b64 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe ffd4 	bl	8002b64 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20c      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e032      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c46:	f000 f821 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	490a      	ldr	r1, [pc, #40]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	5ccb      	ldrb	r3, [r1, r3]
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe ff38 	bl	8002adc <HAL_InitTick>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	080057a4 	.word	0x080057a4
 8003c84:	20000004 	.word	0x20000004
 8003c88:	20000008 	.word	0x20000008

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b0ae      	sub	sp, #184	; 0xb8
 8003c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb2:	4bcb      	ldr	r3, [pc, #812]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	f200 8206 	bhi.w	80040cc <HAL_RCC_GetSysClockFreq+0x440>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	080040cd 	.word	0x080040cd
 8003cd0:	080040cd 	.word	0x080040cd
 8003cd4:	080040cd 	.word	0x080040cd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	080040cd 	.word	0x080040cd
 8003ce0:	080040cd 	.word	0x080040cd
 8003ce4:	080040cd 	.word	0x080040cd
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	080040cd 	.word	0x080040cd
 8003cf0:	080040cd 	.word	0x080040cd
 8003cf4:	080040cd 	.word	0x080040cd
 8003cf8:	08003efd 	.word	0x08003efd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4bb9      	ldr	r3, [pc, #740]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d02:	e1e7      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d04:	4bb8      	ldr	r3, [pc, #736]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d0a:	e1e3      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d0c:	4bb4      	ldr	r3, [pc, #720]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d18:	4bb1      	ldr	r3, [pc, #708]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d071      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d24:	4bae      	ldr	r3, [pc, #696]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4621      	mov	r1, r4
 8003d64:	1a51      	subs	r1, r2, r1
 8003d66:	6439      	str	r1, [r7, #64]	; 0x40
 8003d68:	4629      	mov	r1, r5
 8003d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	018b      	lsls	r3, r1, #6
 8003d80:	4641      	mov	r1, r8
 8003d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d86:	4641      	mov	r1, r8
 8003d88:	018a      	lsls	r2, r1, #6
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	1a51      	subs	r1, r2, r1
 8003d8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d90:	4649      	mov	r1, r9
 8003d92:	eb63 0301 	sbc.w	r3, r3, r1
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003da4:	4649      	mov	r1, r9
 8003da6:	00cb      	lsls	r3, r1, #3
 8003da8:	4641      	mov	r1, r8
 8003daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dae:	4641      	mov	r1, r8
 8003db0:	00ca      	lsls	r2, r1, #3
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	4622      	mov	r2, r4
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	460a      	mov	r2, r1
 8003dc2:	eb42 0303 	adc.w	r3, r2, r3
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	024b      	lsls	r3, r1, #9
 8003dd8:	4621      	mov	r1, r4
 8003dda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dde:	4621      	mov	r1, r4
 8003de0:	024a      	lsls	r2, r1, #9
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003df0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003df4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003df8:	f7fc fd0c 	bl	8000814 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e06:	e067      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e08:	4b75      	ldr	r3, [pc, #468]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e22:	2300      	movs	r3, #0
 8003e24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3c:	0150      	lsls	r0, r2, #5
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4621      	mov	r1, r4
 8003e44:	1a51      	subs	r1, r2, r1
 8003e46:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e48:	4629      	mov	r1, r5
 8003e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	018b      	lsls	r3, r1, #6
 8003e60:	4641      	mov	r1, r8
 8003e62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e66:	4641      	mov	r1, r8
 8003e68:	018a      	lsls	r2, r1, #6
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e70:	4649      	mov	r1, r9
 8003e72:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8a:	4692      	mov	sl, r2
 8003e8c:	469b      	mov	fp, r3
 8003e8e:	4623      	mov	r3, r4
 8003e90:	eb1a 0303 	adds.w	r3, sl, r3
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	462b      	mov	r3, r5
 8003e98:	eb4b 0303 	adc.w	r3, fp, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003eaa:	4629      	mov	r1, r5
 8003eac:	028b      	lsls	r3, r1, #10
 8003eae:	4621      	mov	r1, r4
 8003eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	028a      	lsls	r2, r1, #10
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ec4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ec6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003eca:	f7fc fca3 	bl	8000814 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ed8:	4b41      	ldr	r3, [pc, #260]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003efa:	e0eb      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efc:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f08:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d06b      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f14:	4b32      	ldr	r3, [pc, #200]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f26:	663b      	str	r3, [r7, #96]	; 0x60
 8003f28:	2300      	movs	r3, #0
 8003f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f30:	4622      	mov	r2, r4
 8003f32:	462b      	mov	r3, r5
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	0159      	lsls	r1, r3, #5
 8003f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f42:	0150      	lsls	r0, r2, #5
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4621      	mov	r1, r4
 8003f4a:	1a51      	subs	r1, r2, r1
 8003f4c:	61b9      	str	r1, [r7, #24]
 8003f4e:	4629      	mov	r1, r5
 8003f50:	eb63 0301 	sbc.w	r3, r3, r1
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f62:	4659      	mov	r1, fp
 8003f64:	018b      	lsls	r3, r1, #6
 8003f66:	4651      	mov	r1, sl
 8003f68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	018a      	lsls	r2, r1, #6
 8003f70:	4651      	mov	r1, sl
 8003f72:	ebb2 0801 	subs.w	r8, r2, r1
 8003f76:	4659      	mov	r1, fp
 8003f78:	eb63 0901 	sbc.w	r9, r3, r1
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f90:	4690      	mov	r8, r2
 8003f92:	4699      	mov	r9, r3
 8003f94:	4623      	mov	r3, r4
 8003f96:	eb18 0303 	adds.w	r3, r8, r3
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	eb49 0303 	adc.w	r3, r9, r3
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	024b      	lsls	r3, r1, #9
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fba:	4621      	mov	r1, r4
 8003fbc:	024a      	lsls	r2, r1, #9
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003fcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fd0:	f7fc fc20 	bl	8000814 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fde:	e065      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x420>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	00f42400 	.word	0x00f42400
 8003fe8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fec:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8003ffe:	2300      	movs	r3, #0
 8004000:	657b      	str	r3, [r7, #84]	; 0x54
 8004002:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004006:	4642      	mov	r2, r8
 8004008:	464b      	mov	r3, r9
 800400a:	f04f 0000 	mov.w	r0, #0
 800400e:	f04f 0100 	mov.w	r1, #0
 8004012:	0159      	lsls	r1, r3, #5
 8004014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004018:	0150      	lsls	r0, r2, #5
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4641      	mov	r1, r8
 8004020:	1a51      	subs	r1, r2, r1
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	4649      	mov	r1, r9
 8004026:	eb63 0301 	sbc.w	r3, r3, r1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004038:	4659      	mov	r1, fp
 800403a:	018b      	lsls	r3, r1, #6
 800403c:	4651      	mov	r1, sl
 800403e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004042:	4651      	mov	r1, sl
 8004044:	018a      	lsls	r2, r1, #6
 8004046:	4651      	mov	r1, sl
 8004048:	1a54      	subs	r4, r2, r1
 800404a:	4659      	mov	r1, fp
 800404c:	eb63 0501 	sbc.w	r5, r3, r1
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	00eb      	lsls	r3, r5, #3
 800405a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405e:	00e2      	lsls	r2, r4, #3
 8004060:	4614      	mov	r4, r2
 8004062:	461d      	mov	r5, r3
 8004064:	4643      	mov	r3, r8
 8004066:	18e3      	adds	r3, r4, r3
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	464b      	mov	r3, r9
 800406c:	eb45 0303 	adc.w	r3, r5, r3
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800407e:	4629      	mov	r1, r5
 8004080:	028b      	lsls	r3, r1, #10
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004088:	4621      	mov	r1, r4
 800408a:	028a      	lsls	r2, r1, #10
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004094:	2200      	movs	r2, #0
 8004096:	64bb      	str	r3, [r7, #72]	; 0x48
 8004098:	64fa      	str	r2, [r7, #76]	; 0x4c
 800409a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800409e:	f7fc fbb9 	bl	8000814 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4613      	mov	r3, r2
 80040a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	0f1b      	lsrs	r3, r3, #28
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80040ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040ca:	e003      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	37b8      	adds	r7, #184	; 0xb8
 80040dc:	46bd      	mov	sp, r7
 80040de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00f42400 	.word	0x00f42400

080040ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e28d      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8083 	beq.w	8004212 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800410c:	4b94      	ldr	r3, [pc, #592]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b04      	cmp	r3, #4
 8004116:	d019      	beq.n	800414c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004118:	4b91      	ldr	r3, [pc, #580]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004120:	2b08      	cmp	r3, #8
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004124:	4b8e      	ldr	r3, [pc, #568]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004130:	d00c      	beq.n	800414c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004132:	4b8b      	ldr	r3, [pc, #556]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d112      	bne.n	8004164 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800414a:	d10b      	bne.n	8004164 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	4b84      	ldr	r3, [pc, #528]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05b      	beq.n	8004210 <HAL_RCC_OscConfig+0x124>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d157      	bne.n	8004210 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e25a      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416c:	d106      	bne.n	800417c <HAL_RCC_OscConfig+0x90>
 800416e:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a7b      	ldr	r2, [pc, #492]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e01d      	b.n	80041b8 <HAL_RCC_OscConfig+0xcc>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0xb4>
 8004186:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a75      	ldr	r2, [pc, #468]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 800418c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b73      	ldr	r3, [pc, #460]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a72      	ldr	r2, [pc, #456]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0xcc>
 80041a0:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a6e      	ldr	r2, [pc, #440]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b6c      	ldr	r3, [pc, #432]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a6b      	ldr	r2, [pc, #428]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fe fcd0 	bl	8002b64 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fe fccc 	bl	8002b64 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e21f      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b61      	ldr	r3, [pc, #388]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0xdc>
 80041e6:	e014      	b.n	8004212 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fe fcbc 	bl	8002b64 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fe fcb8 	bl	8002b64 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e20b      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	4b57      	ldr	r3, [pc, #348]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x104>
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d06f      	beq.n	80042fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800421e:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b00      	cmp	r3, #0
 8004228:	d017      	beq.n	800425a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800422a:	4b4d      	ldr	r3, [pc, #308]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004232:	2b08      	cmp	r3, #8
 8004234:	d105      	bne.n	8004242 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004236:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d11c      	bne.n	8004288 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x186>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e1d3      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4937      	ldr	r1, [pc, #220]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004286:	e03a      	b.n	80042fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004290:	4b34      	ldr	r3, [pc, #208]	; (8004364 <HAL_RCC_OscConfig+0x278>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fe fc65 	bl	8002b64 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429e:	f7fe fc61 	bl	8002b64 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e1b4      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042bc:	4b28      	ldr	r3, [pc, #160]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4925      	ldr	r1, [pc, #148]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x278>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe fc44 	bl	8002b64 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fe fc40 	bl	8002b64 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e193      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d036      	beq.n	8004378 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fe fc24 	bl	8002b64 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004320:	f7fe fc20 	bl	8002b64 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e173      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x234>
 800433e:	e01b      	b.n	8004378 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004346:	f7fe fc0d 	bl	8002b64 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	e00e      	b.n	800436c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434e:	f7fe fc09 	bl	8002b64 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d907      	bls.n	800436c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e15c      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b8a      	ldr	r3, [pc, #552]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ea      	bne.n	800434e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8097 	beq.w	80044b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b83      	ldr	r3, [pc, #524]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b7f      	ldr	r3, [pc, #508]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a7e      	ldr	r2, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b7c      	ldr	r3, [pc, #496]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b79      	ldr	r3, [pc, #484]	; (800459c <HAL_RCC_OscConfig+0x4b0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b76      	ldr	r3, [pc, #472]	; (800459c <HAL_RCC_OscConfig+0x4b0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a75      	ldr	r2, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x4b0>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fe fbc9 	bl	8002b64 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fe fbc5 	bl	8002b64 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e118      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b6c      	ldr	r3, [pc, #432]	; (800459c <HAL_RCC_OscConfig+0x4b0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x31e>
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	e01c      	b.n	8004444 <HAL_RCC_OscConfig+0x358>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b05      	cmp	r3, #5
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x340>
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a60      	ldr	r2, [pc, #384]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	6713      	str	r3, [r2, #112]	; 0x70
 800441e:	4b5e      	ldr	r3, [pc, #376]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	4a5d      	ldr	r2, [pc, #372]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	; 0x70
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0x358>
 800442c:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a59      	ldr	r2, [pc, #356]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
 8004438:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a56      	ldr	r2, [pc, #344]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fe fb8a 	bl	8002b64 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fe fb86 	bl	8002b64 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0d7      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCC_OscConfig+0x368>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fe fb74 	bl	8002b64 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fe fb70 	bl	8002b64 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0c1      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004496:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ee      	bne.n	8004480 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4a3a      	ldr	r2, [pc, #232]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80ad 	beq.w	8004618 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044be:	4b36      	ldr	r3, [pc, #216]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d060      	beq.n	800458c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d145      	bne.n	800455e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <HAL_RCC_OscConfig+0x4b4>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fb44 	bl	8002b64 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe fb40 	bl	8002b64 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e093      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	019b      	lsls	r3, r3, #6
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	491b      	ldr	r1, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004530:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCC_OscConfig+0x4b4>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fe fb15 	bl	8002b64 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453e:	f7fe fb11 	bl	8002b64 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e064      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x452>
 800455c:	e05c      	b.n	8004618 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <HAL_RCC_OscConfig+0x4b4>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fe fafe 	bl	8002b64 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456c:	f7fe fafa 	bl	8002b64 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e04d      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_OscConfig+0x4ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x480>
 800458a:	e045      	b.n	8004618 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e040      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
 8004598:	40023800 	.word	0x40023800
 800459c:	40007000 	.word	0x40007000
 80045a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045a4:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <HAL_RCC_OscConfig+0x538>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d030      	beq.n	8004614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d129      	bne.n	8004614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d122      	bne.n	8004614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045dc:	4293      	cmp	r3, r2
 80045de:	d119      	bne.n	8004614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	3b01      	subs	r3, #1
 80045ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d10f      	bne.n	8004614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d107      	bne.n	8004614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07b      	b.n	8004732 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d009      	beq.n	8004660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
 8004652:	e005      	b.n	8004660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fe f8da 	bl	8002834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f003 0104 	and.w	r1, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0210 	and.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b088      	sub	sp, #32
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_SPI_Transmit+0x22>
 8004758:	2302      	movs	r3, #2
 800475a:	e126      	b.n	80049aa <HAL_SPI_Transmit+0x270>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004764:	f7fe f9fe 	bl	8002b64 <HAL_GetTick>
 8004768:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800477a:	2302      	movs	r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800477e:	e10b      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SPI_Transmit+0x52>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004790:	e102      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2203      	movs	r2, #3
 8004796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d8:	d10f      	bne.n	80047fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d007      	beq.n	8004818 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	d14b      	bne.n	80048ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_SPI_Transmit+0xf6>
 800482a:	8afb      	ldrh	r3, [r7, #22]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d13e      	bne.n	80048ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	881a      	ldrh	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	1c9a      	adds	r2, r3, #2
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004854:	e02b      	b.n	80048ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d112      	bne.n	800488a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	86da      	strh	r2, [r3, #54]	; 0x36
 8004888:	e011      	b.n	80048ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488a:	f7fe f96b 	bl	8002b64 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d803      	bhi.n	80048a2 <HAL_SPI_Transmit+0x168>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a0:	d102      	bne.n	80048a8 <HAL_SPI_Transmit+0x16e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ac:	e074      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ce      	bne.n	8004856 <HAL_SPI_Transmit+0x11c>
 80048b8:	e04c      	b.n	8004954 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_SPI_Transmit+0x18e>
 80048c2:	8afb      	ldrh	r3, [r7, #22]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d140      	bne.n	800494a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048ee:	e02c      	b.n	800494a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d113      	bne.n	8004926 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	86da      	strh	r2, [r3, #54]	; 0x36
 8004924:	e011      	b.n	800494a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004926:	f7fe f91d 	bl	8002b64 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d803      	bhi.n	800493e <HAL_SPI_Transmit+0x204>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493c:	d102      	bne.n	8004944 <HAL_SPI_Transmit+0x20a>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004948:	e026      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1cd      	bne.n	80048f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fbcb 	bl	80050f4 <SPI_EndRxTxTransaction>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e000      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004996:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af02      	add	r7, sp, #8
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ce:	d112      	bne.n	80049f6 <HAL_SPI_Receive+0x44>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10e      	bne.n	80049f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2204      	movs	r2, #4
 80049dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f8f1 	bl	8004bd4 <HAL_SPI_TransmitReceive>
 80049f2:	4603      	mov	r3, r0
 80049f4:	e0ea      	b.n	8004bcc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_SPI_Receive+0x52>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e0e3      	b.n	8004bcc <HAL_SPI_Receive+0x21a>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a0c:	f7fe f8aa 	bl	8002b64 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d002      	beq.n	8004a24 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a22:	e0ca      	b.n	8004bba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Receive+0x7e>
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a34:	e0c1      	b.n	8004bba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2204      	movs	r2, #4
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	88fa      	ldrh	r2, [r7, #6]
 8004a4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	d10f      	bne.n	8004a9e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d007      	beq.n	8004abc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d162      	bne.n	8004b8a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ac4:	e02e      	b.n	8004b24 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d115      	bne.n	8004b00 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f103 020c 	add.w	r2, r3, #12
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004afe:	e011      	b.n	8004b24 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b00:	f7fe f830 	bl	8002b64 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d803      	bhi.n	8004b18 <HAL_SPI_Receive+0x166>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b16:	d102      	bne.n	8004b1e <HAL_SPI_Receive+0x16c>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b22:	e04a      	b.n	8004bba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1cb      	bne.n	8004ac6 <HAL_SPI_Receive+0x114>
 8004b2e:	e031      	b.n	8004b94 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d113      	bne.n	8004b66 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	1c9a      	adds	r2, r3, #2
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b64:	e011      	b.n	8004b8a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b66:	f7fd fffd 	bl	8002b64 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d803      	bhi.n	8004b7e <HAL_SPI_Receive+0x1cc>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b7c:	d102      	bne.n	8004b84 <HAL_SPI_Receive+0x1d2>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b88:	e017      	b.n	8004bba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1cd      	bne.n	8004b30 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fa45 	bl	8005028 <SPI_EndRxTransaction>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
 8004bb6:	e000      	b.n	8004bba <HAL_SPI_Receive+0x208>
  }

error :
 8004bb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004be2:	2301      	movs	r3, #1
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_SPI_TransmitReceive+0x26>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e18a      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x33c>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c02:	f7fd ffaf 	bl	8002b64 <HAL_GetTick>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c18:	887b      	ldrh	r3, [r7, #2]
 8004c1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d00f      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x70>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2a:	d107      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x68>
 8004c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d003      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c42:	e15b      	b.n	8004efc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x82>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x82>
 8004c50:	887b      	ldrh	r3, [r7, #2]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c5c:	e14e      	b.n	8004efc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d003      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	887a      	ldrh	r2, [r7, #2]
 8004c82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	887a      	ldrh	r2, [r7, #2]
 8004c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	887a      	ldrh	r2, [r7, #2]
 8004c9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d007      	beq.n	8004cc6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cce:	d178      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x10a>
 8004cd8:	8b7b      	ldrh	r3, [r7, #26]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d166      	bne.n	8004dac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	1c9a      	adds	r2, r3, #2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d02:	e053      	b.n	8004dac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d11b      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x176>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d016      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x176>
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d113      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	881a      	ldrh	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	1c9a      	adds	r2, r3, #2
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d119      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x1b8>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d014      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	1c9a      	adds	r2, r3, #2
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d8c:	f7fd feea 	bl	8002b64 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d807      	bhi.n	8004dac <HAL_SPI_TransmitReceive+0x1d8>
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da2:	d003      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004daa:	e0a7      	b.n	8004efc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1a6      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x130>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1a1      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x130>
 8004dc0:	e07c      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_TransmitReceive+0x1fc>
 8004dca:	8b7b      	ldrh	r3, [r7, #26]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d16b      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df6:	e057      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d11c      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x26c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d017      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x26c>
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d114      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d119      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x2ae>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d014      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e82:	f7fd fe6f 	bl	8002b64 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d803      	bhi.n	8004e9a <HAL_SPI_TransmitReceive+0x2c6>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e98:	d102      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x2cc>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ea6:	e029      	b.n	8004efc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1a2      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x224>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d19d      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f917 	bl	80050f4 <SPI_EndRxTxTransaction>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d006      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ed8:	e010      	b.n	8004efc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	e000      	b.n	8004efc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	; 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f28:	f7fd fe1c 	bl	8002b64 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f38:	f7fd fe14 	bl	8002b64 <HAL_GetTick>
 8004f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f3e:	4b39      	ldr	r3, [pc, #228]	; (8005024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	015b      	lsls	r3, r3, #5
 8004f44:	0d1b      	lsrs	r3, r3, #20
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	fb02 f303 	mul.w	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4e:	e054      	b.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f56:	d050      	beq.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f58:	f7fd fe04 	bl	8002b64 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d902      	bls.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d13d      	bne.n	8004fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f86:	d111      	bne.n	8004fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f90:	d004      	beq.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	d107      	bne.n	8004fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb4:	d10f      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e017      	b.n	800501a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	429a      	cmp	r2, r3
 8005016:	d19b      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000004 	.word	0x20000004

08005028 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503c:	d111      	bne.n	8005062 <SPI_EndRxTransaction+0x3a>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005046:	d004      	beq.n	8005052 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005050:	d107      	bne.n	8005062 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506a:	d12a      	bne.n	80050c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005074:	d012      	beq.n	800509c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2200      	movs	r2, #0
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff ff49 	bl	8004f18 <SPI_WaitFlagStateUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d02d      	beq.n	80050e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e026      	b.n	80050ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2101      	movs	r1, #1
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff ff36 	bl	8004f18 <SPI_WaitFlagStateUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01a      	beq.n	80050e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e013      	b.n	80050ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2101      	movs	r1, #1
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff ff23 	bl	8004f18 <SPI_WaitFlagStateUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e000      	b.n	80050ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <SPI_EndRxTxTransaction+0x7c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <SPI_EndRxTxTransaction+0x80>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	0d5b      	lsrs	r3, r3, #21
 800510c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005110:	fb02 f303 	mul.w	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511e:	d112      	bne.n	8005146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fef4 	bl	8004f18 <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e00f      	b.n	8005166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3b01      	subs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515c:	2b80      	cmp	r3, #128	; 0x80
 800515e:	d0f2      	beq.n	8005146 <SPI_EndRxTxTransaction+0x52>
 8005160:	e000      	b.n	8005164 <SPI_EndRxTxTransaction+0x70>
        break;
 8005162:	bf00      	nop
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000004 	.word	0x20000004
 8005174:	165e9f81 	.word	0x165e9f81

08005178 <__libc_init_array>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	4d0d      	ldr	r5, [pc, #52]	; (80051b0 <__libc_init_array+0x38>)
 800517c:	4c0d      	ldr	r4, [pc, #52]	; (80051b4 <__libc_init_array+0x3c>)
 800517e:	1b64      	subs	r4, r4, r5
 8005180:	10a4      	asrs	r4, r4, #2
 8005182:	2600      	movs	r6, #0
 8005184:	42a6      	cmp	r6, r4
 8005186:	d109      	bne.n	800519c <__libc_init_array+0x24>
 8005188:	4d0b      	ldr	r5, [pc, #44]	; (80051b8 <__libc_init_array+0x40>)
 800518a:	4c0c      	ldr	r4, [pc, #48]	; (80051bc <__libc_init_array+0x44>)
 800518c:	f000 f82e 	bl	80051ec <_init>
 8005190:	1b64      	subs	r4, r4, r5
 8005192:	10a4      	asrs	r4, r4, #2
 8005194:	2600      	movs	r6, #0
 8005196:	42a6      	cmp	r6, r4
 8005198:	d105      	bne.n	80051a6 <__libc_init_array+0x2e>
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a0:	4798      	blx	r3
 80051a2:	3601      	adds	r6, #1
 80051a4:	e7ee      	b.n	8005184 <__libc_init_array+0xc>
 80051a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051aa:	4798      	blx	r3
 80051ac:	3601      	adds	r6, #1
 80051ae:	e7f2      	b.n	8005196 <__libc_init_array+0x1e>
 80051b0:	080057bc 	.word	0x080057bc
 80051b4:	080057bc 	.word	0x080057bc
 80051b8:	080057bc 	.word	0x080057bc
 80051bc:	080057c0 	.word	0x080057c0

080051c0 <memcpy>:
 80051c0:	440a      	add	r2, r1
 80051c2:	4291      	cmp	r1, r2
 80051c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051c8:	d100      	bne.n	80051cc <memcpy+0xc>
 80051ca:	4770      	bx	lr
 80051cc:	b510      	push	{r4, lr}
 80051ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051d6:	4291      	cmp	r1, r2
 80051d8:	d1f9      	bne.n	80051ce <memcpy+0xe>
 80051da:	bd10      	pop	{r4, pc}

080051dc <memset>:
 80051dc:	4402      	add	r2, r0
 80051de:	4603      	mov	r3, r0
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <_init>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr

080051f8 <_fini>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr
