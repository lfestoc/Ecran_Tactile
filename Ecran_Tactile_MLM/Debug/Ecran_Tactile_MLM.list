
Ecran_Tactile_MLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800433c  0800433c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004344  08004344  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800434c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  0800435c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  0800435c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad40  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e34  00000000  00000000  0002ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002304e  00000000  00000000  0002dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba7e  00000000  00000000  00050d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5020  00000000  00000000  0005c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013180c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002468  00000000  00000000  0013185c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d9c 	.word	0x08003d9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003d9c 	.word	0x08003d9c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <ILI9341_SendCommand+0x54>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <ILI9341_SendCommand+0x58>)
 800051c:	8811      	ldrh	r1, [r2, #0]
 800051e:	2200      	movs	r2, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f002 fb2f 	bl	8002b84 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <ILI9341_SendCommand+0x5c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <ILI9341_SendCommand+0x60>)
 800052c:	8811      	ldrh	r1, [r2, #0]
 800052e:	2200      	movs	r2, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f002 fb27 	bl	8002b84 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000536:	f107 010f 	add.w	r1, r7, #15
 800053a:	2305      	movs	r3, #5
 800053c:	2201      	movs	r2, #1
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <ILI9341_SendCommand+0x64>)
 8000540:	f003 f9eb 	bl	800391a <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <ILI9341_SendCommand+0x5c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <ILI9341_SendCommand+0x60>)
 800054a:	8811      	ldrh	r1, [r2, #0]
 800054c:	2201      	movs	r2, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fb18 	bl	8002b84 <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000090 	.word	0x20000090
 8000560:	20000094 	.word	0x20000094
 8000564:	20000088 	.word	0x20000088
 8000568:	2000008c 	.word	0x2000008c
 800056c:	20000030 	.word	0x20000030

08000570 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <ILI9341_SendData+0x54>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <ILI9341_SendData+0x58>)
 8000584:	8811      	ldrh	r1, [r2, #0]
 8000586:	2201      	movs	r2, #1
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fafb 	bl	8002b84 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <ILI9341_SendData+0x5c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <ILI9341_SendData+0x60>)
 8000594:	8811      	ldrh	r1, [r2, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f002 faf3 	bl	8002b84 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800059e:	f107 010f 	add.w	r1, r7, #15
 80005a2:	2305      	movs	r3, #5
 80005a4:	2201      	movs	r2, #1
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <ILI9341_SendData+0x64>)
 80005a8:	f003 f9b7 	bl	800391a <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <ILI9341_SendData+0x5c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <ILI9341_SendData+0x60>)
 80005b2:	8811      	ldrh	r1, [r2, #0]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fae4 	bl	8002b84 <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000090 	.word	0x20000090
 80005c8:	20000094 	.word	0x20000094
 80005cc:	20000088 	.word	0x20000088
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	20000030 	.word	0x20000030

080005d8 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4604      	mov	r4, r0
 80005e0:	4608      	mov	r0, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	461a      	mov	r2, r3
 80005e6:	4623      	mov	r3, r4
 80005e8:	80fb      	strh	r3, [r7, #6]
 80005ea:	4603      	mov	r3, r0
 80005ec:	80bb      	strh	r3, [r7, #4]
 80005ee:	460b      	mov	r3, r1
 80005f0:	807b      	strh	r3, [r7, #2]
 80005f2:	4613      	mov	r3, r2
 80005f4:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80005f6:	202a      	movs	r0, #42	; 0x2a
 80005f8:	f7ff ff86 	bl	8000508 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	b29b      	uxth	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffb3 	bl	8000570 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffae 	bl	8000570 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 8000614:	887b      	ldrh	r3, [r7, #2]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b29b      	uxth	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffa7 	bl	8000570 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 8000622:	887b      	ldrh	r3, [r7, #2]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffa2 	bl	8000570 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 800062c:	202b      	movs	r0, #43	; 0x2b
 800062e:	f7ff ff6b 	bl	8000508 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000632:	88bb      	ldrh	r3, [r7, #4]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	b29b      	uxth	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff98 	bl	8000570 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff93 	bl	8000570 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 800064a:	883b      	ldrh	r3, [r7, #0]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29b      	uxth	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff8c 	bl	8000570 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff87 	bl	8000570 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000662:	202c      	movs	r0, #44	; 0x2c
 8000664:	f7ff ff50 	bl	8000508 <ILI9341_SendCommand>
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}

08000670 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4613      	mov	r3, r2
 800067e:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000680:	2258      	movs	r2, #88	; 0x58
 8000682:	68f9      	ldr	r1, [r7, #12]
 8000684:	4853      	ldr	r0, [pc, #332]	; (80007d4 <ILI9341_Init+0x164>)
 8000686:	f003 fb73 	bl	8003d70 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 800068a:	4a53      	ldr	r2, [pc, #332]	; (80007d8 <ILI9341_Init+0x168>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000690:	4a52      	ldr	r2, [pc, #328]	; (80007dc <ILI9341_Init+0x16c>)
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000696:	4a52      	ldr	r2, [pc, #328]	; (80007e0 <ILI9341_Init+0x170>)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 800069c:	4a51      	ldr	r2, [pc, #324]	; (80007e4 <ILI9341_Init+0x174>)
 800069e:	8b3b      	ldrh	r3, [r7, #24]
 80006a0:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80006a2:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <ILI9341_Init+0x168>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a4d      	ldr	r2, [pc, #308]	; (80007dc <ILI9341_Init+0x16c>)
 80006a8:	8811      	ldrh	r1, [r2, #0]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fa69 	bl	8002b84 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 80006b2:	4a4d      	ldr	r2, [pc, #308]	; (80007e8 <ILI9341_Init+0x178>)
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 80006b8:	4a4c      	ldr	r2, [pc, #304]	; (80007ec <ILI9341_Init+0x17c>)
 80006ba:	8c3b      	ldrh	r3, [r7, #32]
 80006bc:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 80006be:	8c3b      	ldrh	r3, [r7, #32]
 80006c0:	2201      	movs	r2, #1
 80006c2:	4619      	mov	r1, r3
 80006c4:	69f8      	ldr	r0, [r7, #28]
 80006c6:	f002 fa5d 	bl	8002b84 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ff1c 	bl	8000508 <ILI9341_SendCommand>
   HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f001 fb07 	bl	8001ce4 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80006d6:	2028      	movs	r0, #40	; 0x28
 80006d8:	f7ff ff16 	bl	8000508 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80006dc:	20c0      	movs	r0, #192	; 0xc0
 80006de:	f7ff ff13 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80006e2:	2026      	movs	r0, #38	; 0x26
 80006e4:	f7ff ff44 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80006e8:	20c1      	movs	r0, #193	; 0xc1
 80006ea:	f7ff ff0d 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80006ee:	2011      	movs	r0, #17
 80006f0:	f7ff ff3e 	bl	8000570 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80006f4:	20c5      	movs	r0, #197	; 0xc5
 80006f6:	f7ff ff07 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80006fa:	2035      	movs	r0, #53	; 0x35
 80006fc:	f7ff ff38 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8000700:	203e      	movs	r0, #62	; 0x3e
 8000702:	f7ff ff35 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 8000706:	20c7      	movs	r0, #199	; 0xc7
 8000708:	f7ff fefe 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 800070c:	20be      	movs	r0, #190	; 0xbe
 800070e:	f7ff ff2f 	bl	8000570 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 8000712:	2036      	movs	r0, #54	; 0x36
 8000714:	f7ff fef8 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8000718:	2048      	movs	r0, #72	; 0x48
 800071a:	f7ff ff29 	bl	8000570 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 800071e:	203a      	movs	r0, #58	; 0x3a
 8000720:	f7ff fef2 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 8000724:	2055      	movs	r0, #85	; 0x55
 8000726:	f7ff ff23 	bl	8000570 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 800072a:	20b1      	movs	r0, #177	; 0xb1
 800072c:	f7ff feec 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff1d 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 8000736:	201f      	movs	r0, #31
 8000738:	f7ff ff1a 	bl	8000570 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 800073c:	202a      	movs	r0, #42	; 0x2a
 800073e:	f7ff fee3 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff ff14 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff ff11 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff ff0e 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000754:	20ef      	movs	r0, #239	; 0xef
 8000756:	f7ff ff0b 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 800075a:	202b      	movs	r0, #43	; 0x2b
 800075c:	f7ff fed4 	bl	8000508 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff05 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff02 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff feff 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000772:	203f      	movs	r0, #63	; 0x3f
 8000774:	f7ff fefc 	bl	8000570 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000778:	2034      	movs	r0, #52	; 0x34
 800077a:	f7ff fec5 	bl	8000508 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 800077e:	20b7      	movs	r0, #183	; 0xb7
 8000780:	f7ff fec2 	bl	8000508 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000784:	2007      	movs	r0, #7
 8000786:	f7ff fef3 	bl	8000570 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 800078a:	20b6      	movs	r0, #182	; 0xb6
 800078c:	f7ff febc 	bl	8000508 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000790:	200a      	movs	r0, #10
 8000792:	f7ff feed 	bl	8000570 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000796:	2082      	movs	r0, #130	; 0x82
 8000798:	f7ff feea 	bl	8000570 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 800079c:	2027      	movs	r0, #39	; 0x27
 800079e:	f7ff fee7 	bl	8000570 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fee4 	bl	8000570 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 80007a8:	2011      	movs	r0, #17
 80007aa:	f7ff fead 	bl	8000508 <ILI9341_SendCommand>
   HAL_Delay(100);
 80007ae:	2064      	movs	r0, #100	; 0x64
 80007b0:	f001 fa98 	bl	8001ce4 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 80007b4:	2029      	movs	r0, #41	; 0x29
 80007b6:	f7ff fea7 	bl	8000508 <ILI9341_SendCommand>
   HAL_Delay(100);
 80007ba:	2064      	movs	r0, #100	; 0x64
 80007bc:	f001 fa92 	bl	8001ce4 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 80007c0:	202c      	movs	r0, #44	; 0x2c
 80007c2:	f7ff fea1 	bl	8000508 <ILI9341_SendCommand>
   HAL_Delay(5);
 80007c6:	2005      	movs	r0, #5
 80007c8:	f001 fa8c 	bl	8001ce4 <HAL_Delay>
 }
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000030 	.word	0x20000030
 80007d8:	20000088 	.word	0x20000088
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	20000090 	.word	0x20000090
 80007e4:	20000094 	.word	0x20000094
 80007e8:	20000098 	.word	0x20000098
 80007ec:	2000009c 	.word	0x2000009c

080007f0 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
 80007fa:	460b      	mov	r3, r1
 80007fc:	80bb      	strh	r3, [r7, #4]
 80007fe:	4613      	mov	r3, r2
 8000800:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 8000802:	88bb      	ldrh	r3, [r7, #4]
 8000804:	88fa      	ldrh	r2, [r7, #6]
 8000806:	88b9      	ldrh	r1, [r7, #4]
 8000808:	88f8      	ldrh	r0, [r7, #6]
 800080a:	f7ff fee5 	bl	80005d8 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff feaa 	bl	8000570 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fea5 	bl	8000570 <ILI9341_SendData>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 800083a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800083e:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000840:	23ff      	movs	r3, #255	; 0xff
 8000842:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <ILI9341_Fill+0x84>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d003      	beq.n	8000854 <ILI9341_Fill+0x24>
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <ILI9341_Fill+0x84>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d107      	bne.n	8000864 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000854:	f240 133f 	movw	r3, #319	; 0x13f
 8000858:	22ef      	movs	r2, #239	; 0xef
 800085a:	2100      	movs	r1, #0
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff febb 	bl	80005d8 <ILI9341_SetCursorPosition>
 8000862:	e00e      	b.n	8000882 <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <ILI9341_Fill+0x84>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d003      	beq.n	8000874 <ILI9341_Fill+0x44>
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <ILI9341_Fill+0x84>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b04      	cmp	r3, #4
 8000872:	d116      	bne.n	80008a2 <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000874:	23ef      	movs	r3, #239	; 0xef
 8000876:	f240 123f 	movw	r2, #319	; 0x13f
 800087a:	2100      	movs	r1, #0
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff feab 	bl	80005d8 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 8000882:	e00e      	b.n	80008a2 <ILI9341_Fill+0x72>
			n--;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3b01      	subs	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe6c 	bl	8000570 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe67 	bl	8000570 <ILI9341_SendData>
	while (n) {
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1ed      	bne.n	8000884 <ILI9341_Fill+0x54>
	}
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000000 	.word	0x20000000

080008b8 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	3301      	adds	r3, #1
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	1a8a      	subs	r2, r1, r2
 80008d4:	3201      	adds	r2, #1
 80008d6:	fb02 f303 	mul.w	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80008e2:	d902      	bls.n	80008ea <ILI9341_Fill_Rect+0x32>
 80008e4:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80008e8:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	b298      	uxth	r0, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	b299      	uxth	r1, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f7ff fe6d 	bl	80005d8 <ILI9341_SetCursorPosition>
	while (n) {
 80008fe:	e00e      	b.n	800091e <ILI9341_Fill_Rect+0x66>
			n--;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3b01      	subs	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 8000906:	8c3b      	ldrh	r3, [r7, #32]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe2e 	bl	8000570 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000914:	8c3b      	ldrh	r3, [r7, #32]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe29 	bl	8000570 <ILI9341_SendData>
	while (n) {
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1ed      	bne.n	8000900 <ILI9341_Fill_Rect+0x48>
	}
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af02      	add	r7, sp, #8
 8000936:	4604      	mov	r4, r0
 8000938:	4608      	mov	r0, r1
 800093a:	4611      	mov	r1, r2
 800093c:	461a      	mov	r2, r3
 800093e:	4623      	mov	r3, r4
 8000940:	80fb      	strh	r3, [r7, #6]
 8000942:	4603      	mov	r3, r0
 8000944:	80bb      	strh	r3, [r7, #4]
 8000946:	460b      	mov	r3, r1
 8000948:	70fb      	strb	r3, [r7, #3]
 800094a:	4613      	mov	r3, r2
 800094c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800094e:	4b98      	ldr	r3, [pc, #608]	; (8000bb0 <ILI9341_drawChar+0x280>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d003      	beq.n	800095e <ILI9341_drawChar+0x2e>
 8000956:	4b96      	ldr	r3, [pc, #600]	; (8000bb0 <ILI9341_drawChar+0x280>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d11f      	bne.n	800099e <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 800095e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000962:	2bef      	cmp	r3, #239	; 0xef
 8000964:	f300 811d 	bgt.w	8000ba2 <ILI9341_drawChar+0x272>
 8000968:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800096c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000970:	f280 8117 	bge.w	8000ba2 <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000974:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000978:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8000986:	2b00      	cmp	r3, #0
 8000988:	f340 810b 	ble.w	8000ba2 <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 800098c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000990:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000998:	2b00      	cmp	r3, #0
 800099a:	dc21      	bgt.n	80009e0 <ILI9341_drawChar+0xb0>
    return;
 800099c:	e101      	b.n	8000ba2 <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 800099e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a2:	2bef      	cmp	r3, #239	; 0xef
 80009a4:	f300 80ff 	bgt.w	8000ba6 <ILI9341_drawChar+0x276>
 80009a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80009b0:	f280 80f9 	bge.w	8000ba6 <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 80009b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f340 80ed 	ble.w	8000ba6 <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 80009cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f340 80e4 	ble.w	8000ba6 <ILI9341_drawChar+0x276>
 80009de:	e000      	b.n	80009e2 <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 80009e0:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80009e2:	4b74      	ldr	r3, [pc, #464]	; (8000bb4 <ILI9341_drawChar+0x284>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f083 0301 	eor.w	r3, r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <ILI9341_drawChar+0xcc>
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2baf      	cmp	r3, #175	; 0xaf
 80009f4:	d902      	bls.n	80009fc <ILI9341_drawChar+0xcc>
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	3301      	adds	r3, #1
 80009fa:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	e0c9      	b.n	8000b96 <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	2b05      	cmp	r3, #5
 8000a08:	d102      	bne.n	8000a10 <ILI9341_drawChar+0xe0>
      line = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	e00b      	b.n	8000a28 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8000a10:	78fa      	ldrb	r2, [r7, #3]
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a65      	ldr	r2, [pc, #404]	; (8000bb8 <ILI9341_drawChar+0x288>)
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	737b      	strb	r3, [r7, #13]
 8000a2c:	e0a8      	b.n	8000b80 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d04b      	beq.n	8000ad0 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8000a38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d110      	bne.n	8000a62 <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8000a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	4413      	add	r3, r2
 8000a4a:	b298      	uxth	r0, r3
 8000a4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	883a      	ldrh	r2, [r7, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f7ff fec8 	bl	80007f0 <ILI9341_DrawPixel>
 8000a60:	e085      	b.n	8000b6e <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000a62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a6e:	fb01 f303 	mul.w	r3, r1, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a7e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a82:	fb01 f303 	mul.w	r3, r1, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	461c      	mov	r4, r3
 8000a8a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	441a      	add	r2, r3
 8000a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a98:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	461d      	mov	r5, r3
 8000aa4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aae:	441a      	add	r2, r3
 8000ab0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ab4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ab8:	fb01 f303 	mul.w	r3, r1, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	883b      	ldrh	r3, [r7, #0]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	462a      	mov	r2, r5
 8000ac8:	4621      	mov	r1, r4
 8000aca:	f7ff fef5 	bl	80008b8 <ILI9341_Fill_Rect>
 8000ace:	e04e      	b.n	8000b6e <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8000ad0:	8c3a      	ldrh	r2, [r7, #32]
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d04a      	beq.n	8000b6e <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8000ad8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d110      	bne.n	8000b02 <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b298      	uxth	r0, r3
 8000aec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	8c3a      	ldrh	r2, [r7, #32]
 8000afa:	4619      	mov	r1, r3
 8000afc:	f7ff fe78 	bl	80007f0 <ILI9341_DrawPixel>
 8000b00:	e035      	b.n	8000b6e <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b1e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b22:	fb01 f303 	mul.w	r3, r1, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	461c      	mov	r4, r3
 8000b2a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b32:	441a      	add	r2, r3
 8000b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b38:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b3c:	fb01 f303 	mul.w	r3, r1, r3
 8000b40:	4413      	add	r3, r2
 8000b42:	461d      	mov	r5, r3
 8000b44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b4e:	441a      	add	r2, r3
 8000b50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b54:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	461a      	mov	r2, r3
 8000b60:	8c3b      	ldrh	r3, [r7, #32]
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	4613      	mov	r3, r2
 8000b66:	462a      	mov	r2, r5
 8000b68:	4621      	mov	r1, r4
 8000b6a:	f7ff fea5 	bl	80008b8 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000b74:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	737b      	strb	r3, [r7, #13]
 8000b80:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	f77f af52 	ble.w	8000a2e <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	3301      	adds	r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	f77f af31 	ble.w	8000a02 <ILI9341_drawChar+0xd2>
 8000ba0:	e002      	b.n	8000ba8 <ILI9341_drawChar+0x278>
    return;
 8000ba2:	bf00      	nop
 8000ba4:	e000      	b.n	8000ba8 <ILI9341_drawChar+0x278>
    return;
 8000ba6:	bf00      	nop
    }
  }
}
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	2000002c 	.word	0x2000002c
 8000bb8:	08003e2c 	.word	0x08003e2c

08000bbc <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	817b      	strh	r3, [r7, #10]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	813b      	strh	r3, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000bd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	82fb      	strh	r3, [r7, #22]
 8000bec:	e01a      	b.n	8000c24 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000bee:	8abb      	ldrh	r3, [r7, #20]
 8000bf0:	8afa      	ldrh	r2, [r7, #22]
 8000bf2:	fb12 f303 	smulbb	r3, r2, r3
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	897b      	ldrh	r3, [r7, #10]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b218      	sxth	r0, r3
 8000c00:	8afb      	ldrh	r3, [r7, #22]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	88fc      	ldrh	r4, [r7, #6]
 8000c0a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	4623      	mov	r3, r4
 8000c1a:	f7ff fe89 	bl	8000930 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	3301      	adds	r3, #1
 8000c22:	82fb      	strh	r3, [r7, #22]
 8000c24:	8afb      	ldrh	r3, [r7, #22]
 8000c26:	2b27      	cmp	r3, #39	; 0x27
 8000c28:	d805      	bhi.n	8000c36 <ILI9341_printText+0x7a>
 8000c2a:	8afb      	ldrh	r3, [r7, #22]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1db      	bne.n	8000bee <ILI9341_printText+0x32>
	}
}
 8000c36:	bf00      	nop
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}
	...

08000c40 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d832      	bhi.n	8000cb8 <ILI9341_setRotation+0x78>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <ILI9341_setRotation+0x18>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c69 	.word	0x08000c69
 8000c5c:	08000c7d 	.word	0x08000c7d
 8000c60:	08000c91 	.word	0x08000c91
 8000c64:	08000ca5 	.word	0x08000ca5
	{
		case 1:
			rotationNum = 1;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <ILI9341_setRotation+0x94>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c6e:	2036      	movs	r0, #54	; 0x36
 8000c70:	f7ff fc4a 	bl	8000508 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000c74:	2088      	movs	r0, #136	; 0x88
 8000c76:	f7ff fc7b 	bl	8000570 <ILI9341_SendData>
			break;
 8000c7a:	e027      	b.n	8000ccc <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <ILI9341_setRotation+0x94>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c82:	2036      	movs	r0, #54	; 0x36
 8000c84:	f7ff fc40 	bl	8000508 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c88:	2028      	movs	r0, #40	; 0x28
 8000c8a:	f7ff fc71 	bl	8000570 <ILI9341_SendData>
			break;
 8000c8e:	e01d      	b.n	8000ccc <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <ILI9341_setRotation+0x94>)
 8000c92:	2203      	movs	r2, #3
 8000c94:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c96:	2036      	movs	r0, #54	; 0x36
 8000c98:	f7ff fc36 	bl	8000508 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000c9c:	2048      	movs	r0, #72	; 0x48
 8000c9e:	f7ff fc67 	bl	8000570 <ILI9341_SendData>
			break;
 8000ca2:	e013      	b.n	8000ccc <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <ILI9341_setRotation+0x94>)
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000caa:	2036      	movs	r0, #54	; 0x36
 8000cac:	f7ff fc2c 	bl	8000508 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000cb0:	20e8      	movs	r0, #232	; 0xe8
 8000cb2:	f7ff fc5d 	bl	8000570 <ILI9341_SendData>
			break;
 8000cb6:	e009      	b.n	8000ccc <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <ILI9341_setRotation+0x94>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f7ff fc22 	bl	8000508 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000cc4:	2088      	movs	r0, #136	; 0x88
 8000cc6:	f7ff fc53 	bl	8000570 <ILI9341_SendData>
			break;
 8000cca:	bf00      	nop
	}
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <fclamp>:
static uint32_t ADC_ChannelX;
static uint32_t ADC_ChannelY;
static LCD_TouchState m_touch_state = LCD_TOUCH_IDLE;
static LCD_TouchPoint* m_last_point_ref = NULL;

static float fclamp(float x, float l, float u) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ce2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ce6:	ed87 1a01 	vstr	s2, [r7, #4]
	return x < l ? l : (x > u ? u : x);
 8000cea:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfa:	d501      	bpl.n	8000d00 <fclamp+0x28>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	e00b      	b.n	8000d18 <fclamp+0x40>
 8000d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d10:	dd01      	ble.n	8000d16 <fclamp+0x3e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	e000      	b.n	8000d18 <fclamp+0x40>
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	ee07 3a90 	vmov	s15, r3
}
 8000d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <adc_norm_x>:

static float adc_norm_x(uint32_t x) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	return (x - TOUCH_ADC_X_MIN) * ADC_UNIT_PX_X;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d42:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000d58 <adc_norm_x+0x2c>
 8000d46:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	39a9200b 	.word	0x39a9200b

08000d5c <adc_norm_y>:

static float adc_norm_y(uint32_t y) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	return (y - TOUCH_ADC_Y_MIN) * ADC_UNIT_PX_Y;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d72:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000d88 <adc_norm_y+0x2c>
 8000d76:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	3996a850 	.word	0x3996a850

08000d8c <ADC_GetValue>:

static uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig;

	sConfig.Channel = channel;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 f9a1 	bl	80020f0 <HAL_ADC_ConfigChannel>

	// start conversion
	HAL_ADC_Start(hadc);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f001 f800 	bl	8001db4 <HAL_ADC_Start>

	// wait until finish
	HAL_ADC_PollForConversion(hadc, 100);
 8000db4:	2164      	movs	r1, #100	; 0x64
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f001 f901 	bl	8001fbe <HAL_ADC_PollForConversion>

	uint32_t value = HAL_ADC_GetValue(hadc);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f001 f989 	bl	80020d4 <HAL_ADC_GetValue>
 8000dc2:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f001 f8c7 	bl	8001f58 <HAL_ADC_Stop>

	return value;
 8000dca:	69fb      	ldr	r3, [r7, #28]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <GPIO_SetPinMode>:

static void GPIO_SetPinMode(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		uint32_t GPIO_PinMode) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000de2:	897b      	ldrh	r3, [r7, #10]
 8000de4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_PinMode;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f001 fd17 	bl	800282c <HAL_GPIO_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <ADC_GPIOA_init>:

static void ADC_GPIOA_init(uint16_t GPIO_Pin) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	2303      	movs	r3, #3
 8000e18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <ADC_GPIOA_init+0x2c>)
 8000e26:	f001 fd01 	bl	800282c <HAL_GPIO_Init>
}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40020000 	.word	0x40020000

08000e38 <touchX>:

static uint32_t touchX() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	GPIO_SetPinMode(GPIOA, GPIO_PIN_1, GPIO_MODE_OUTPUT_PP);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <touchX+0x58>)
 8000e42:	f7ff ffc7 	bl	8000dd4 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_OUTPUT_PP);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <touchX+0x58>)
 8000e4e:	f7ff ffc1 	bl	8000dd4 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_INPUT);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e58:	480e      	ldr	r0, [pc, #56]	; (8000e94 <touchX+0x5c>)
 8000e5a:	f7ff ffbb 	bl	8000dd4 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_4);
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f7ff ffd2 	bl	8000e08 <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <touchX+0x58>)
 8000e6a:	f001 fe8b 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <touchX+0x58>)
 8000e76:	f001 fe85 	bl	8002b84 <HAL_GPIO_WritePin>

	return ADC_GetValue(hadcX, ADC_ChannelX);
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <touchX+0x60>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <touchX+0x64>)
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff81 	bl	8000d8c <ADC_GetValue>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200000a0 	.word	0x200000a0
 8000e9c:	200000a8 	.word	0x200000a8

08000ea0 <touchY>:

static uint32_t touchY() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f001 fc97 	bl	80027da <HAL_NVIC_DisableIRQ>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_OUTPUT_PP);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb2:	4819      	ldr	r0, [pc, #100]	; (8000f18 <touchY+0x78>)
 8000eb4:	f7ff ff8e 	bl	8000dd4 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_4, GPIO_MODE_OUTPUT_PP);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4817      	ldr	r0, [pc, #92]	; (8000f1c <touchY+0x7c>)
 8000ebe:	f7ff ff89 	bl	8000dd4 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_INPUT);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <touchY+0x7c>)
 8000eca:	f7ff ff83 	bl	8000dd4 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_1);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff ff9a 	bl	8000e08 <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <touchY+0x78>)
 8000edc:	f001 fe52 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <touchY+0x7c>)
 8000ee6:	f001 fe4d 	bl	8002b84 <HAL_GPIO_WritePin>

	uint32_t adc_y = ADC_GetValue(hadcY, ADC_ChannelY);
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <touchY+0x80>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <touchY+0x84>)
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff49 	bl	8000d8c <ADC_GetValue>
 8000efa:	6078      	str	r0, [r7, #4]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <touchY+0x88>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f001 fc83 	bl	800280e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f001 fc58 	bl	80027be <HAL_NVIC_EnableIRQ>

	return adc_y;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	200000a4 	.word	0x200000a4
 8000f24:	200000ac 	.word	0x200000ac
 8000f28:	40013c00 	.word	0x40013c00

08000f2c <LCD_Touch_Init>:

/**
 * Saves ADC handles references to measure touch screen positions.
 */
void LCD_Touch_Init(ADC_HandleTypeDef* aHadcX, uint32_t aADC_ChannelX,
		ADC_HandleTypeDef* aHadcY, uint32_t aADC_ChannelY) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
	hadcX = aHadcX;
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <LCD_Touch_Init+0x34>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
	hadcY = aHadcY;
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <LCD_Touch_Init+0x38>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	ADC_ChannelX = aADC_ChannelX;
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <LCD_Touch_Init+0x3c>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	6013      	str	r3, [r2, #0]
	ADC_ChannelY = aADC_ChannelY;
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <LCD_Touch_Init+0x40>)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	6013      	str	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200000a0 	.word	0x200000a0
 8000f64:	200000a4 	.word	0x200000a4
 8000f68:	200000a8 	.word	0x200000a8
 8000f6c:	200000ac 	.word	0x200000ac

08000f70 <GPIO_DrawMode>:

static void GPIO_DrawMode() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE()
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <GPIO_DrawMode+0x7c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <GPIO_DrawMode+0x7c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <GPIO_DrawMode+0x7c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOB_CLK_ENABLE()
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <GPIO_DrawMode+0x7c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <GPIO_DrawMode+0x7c>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <GPIO_DrawMode+0x7c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
	;
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f001 fc13 	bl	80027da <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]

	/*Configure GPIO pins: PA1 PA4 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_8;
 8000fc0:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000fc4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <GPIO_DrawMode+0x80>)
 8000fce:	f001 fc2d 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO data pin PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <GPIO_DrawMode+0x84>)
 8000fe0:	f001 fc24 	bl	800282c <HAL_GPIO_Init>
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <GPIO_InterruptMode>:


// TOUCH mode GPIO setup
static void GPIO_InterruptMode() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE()
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <GPIO_InterruptMode+0xa8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <GPIO_InterruptMode+0xa8>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <GPIO_InterruptMode+0xa8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
	;

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]

	/* X- PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	481d      	ldr	r0, [pc, #116]	; (80010a4 <GPIO_InterruptMode+0xac>)
 8001030:	f001 fbfc 	bl	800282c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2102      	movs	r1, #2
 8001038:	481a      	ldr	r0, [pc, #104]	; (80010a4 <GPIO_InterruptMode+0xac>)
 800103a:	f001 fda3 	bl	8002b84 <HAL_GPIO_WritePin>

	/* X+ PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800103e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001042:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <GPIO_InterruptMode+0xac>)
 8001052:	f001 fbeb 	bl	800282c <HAL_GPIO_Init>

	/* Y- PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <GPIO_InterruptMode+0xb0>)
 800106a:	f001 fbdf 	bl	800282c <HAL_GPIO_Init>

	/* Y+ PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800106e:	2310      	movs	r3, #16
 8001070:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001072:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001076:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4808      	ldr	r0, [pc, #32]	; (80010a4 <GPIO_InterruptMode+0xac>)
 8001082:	f001 fbd3 	bl	800282c <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200a      	movs	r0, #10
 800108c:	f001 fb7b 	bl	8002786 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001090:	200a      	movs	r0, #10
 8001092:	f001 fb94 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <LCD_SetMode>:
 * Set LCD's mode to either DRAW or TOUCH.
 *
 * Set LCD_Mode to DRAW to draw or print text on LCD,
 * then switch back to TOUCH, if you want to receive touches.
 */
HAL_StatusTypeDef LCD_SetMode(LCD_Mode mode) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <LCD_SetMode+0x1c>
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d107      	bne.n	80010d0 <LCD_SetMode+0x24>
	case LCD_MODE_TOUCH:
		GPIO_InterruptMode();
 80010c0:	f7ff ff9a 	bl	8000ff8 <GPIO_InterruptMode>
		return HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e004      	b.n	80010d2 <LCD_SetMode+0x26>

	case LCD_MODE_DRAW:
		GPIO_DrawMode();
 80010c8:	f7ff ff52 	bl	8000f70 <GPIO_DrawMode>
		return HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e000      	b.n	80010d2 <LCD_SetMode+0x26>

	default:
		return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
	}
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <LCD_Touch_Read>:

/*
 * Reads raw touch x- and y-positions and, if successful,
 * stores them in the LCD_TouchPoint point.
 */
LCD_TouchReadState LCD_Touch_Read(LCD_TouchPoint* p) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	if (hadcX == NULL || hadcY == NULL) {
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <LCD_Touch_Read+0xe4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <LCD_Touch_Read+0x18>
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <LCD_Touch_Read+0xe8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <LCD_Touch_Read+0x1c>
		return LCD_TOUCH_READ_NOT_INITIALIZED;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e05e      	b.n	80011b6 <LCD_Touch_Read+0xda>
	}
	if (m_touch_state == LCD_TOUCH_IDLE) {
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <LCD_Touch_Read+0xec>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <LCD_Touch_Read+0x28>
		return LCD_TOUCH_READ_NO_TOUCH;
 8001100:	2302      	movs	r3, #2
 8001102:	e058      	b.n	80011b6 <LCD_Touch_Read+0xda>
	}
	uint32_t x = touchX();
 8001104:	f7ff fe98 	bl	8000e38 <touchX>
 8001108:	60f8      	str	r0, [r7, #12]

	if (x > ADC_NO_TOUCH_X_OUTSIDE) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f640 729b 	movw	r2, #3995	; 0xf9b
 8001110:	4293      	cmp	r3, r2
 8001112:	d901      	bls.n	8001118 <LCD_Touch_Read+0x3c>
		return LCD_TOUCH_READ_OUTSIDE;
 8001114:	2303      	movs	r3, #3
 8001116:	e04e      	b.n	80011b6 <LCD_Touch_Read+0xda>
	}

	uint32_t y = touchY();
 8001118:	f7ff fec2 	bl	8000ea0 <touchY>
 800111c:	60b8      	str	r0, [r7, #8]

	p->x = (int16_t) ((1 - fclamp(adc_norm_x(x), 0.0f, 1.0f)) * TFTWIDTH);
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fe04 	bl	8000d2c <adc_norm_x>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800112c:	eddf 0a27 	vldr	s1, [pc, #156]	; 80011cc <LCD_Touch_Read+0xf0>
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	f7ff fdd0 	bl	8000cd8 <fclamp>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80011d0 <LCD_Touch_Read+0xf4>
 8001148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	b21a      	sxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	801a      	strh	r2, [r3, #0]
	p->y = (int16_t) ((1 - fclamp(adc_norm_y(y), 0.0f, 1.0f)) * TFTHEIGHT);
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f7ff fdfe 	bl	8000d5c <adc_norm_y>
 8001160:	eef0 7a40 	vmov.f32	s15, s0
 8001164:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001168:	eddf 0a18 	vldr	s1, [pc, #96]	; 80011cc <LCD_Touch_Read+0xf0>
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	f7ff fdb2 	bl	8000cd8 <fclamp>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800117c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001180:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80011d4 <LCD_Touch_Read+0xf8>
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118c:	ee17 3a90 	vmov	r3, s15
 8001190:	b21a      	sxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	805a      	strh	r2, [r3, #2]
	p->tick = HAL_GetTick();
 8001196:	f000 fd99 	bl	8001ccc <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	605a      	str	r2, [r3, #4]
	p->state = m_touch_state;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <LCD_Touch_Read+0xec>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	721a      	strb	r2, [r3, #8]

	m_last_point_ref = p;
 80011a8:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <LCD_Touch_Read+0xfc>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
	m_touch_state = LCD_TOUCH_MOVE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <LCD_Touch_Read+0xec>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	701a      	strb	r2, [r3, #0]

	return LCD_TOUCH_READ_SUCCESS;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000a0 	.word	0x200000a0
 80011c4:	200000a4 	.word	0x200000a4
 80011c8:	200000b0 	.word	0x200000b0
 80011cc:	00000000 	.word	0x00000000
 80011d0:	43700000 	.word	0x43700000
 80011d4:	43a00000 	.word	0x43a00000
 80011d8:	200000b4 	.word	0x200000b4

080011dc <LCD_Touch_OnDown>:

/*
 * Indicates the start of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnDown() {
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	if (m_touch_state == LCD_TOUCH_IDLE) {
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <LCD_Touch_OnDown+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <LCD_Touch_OnDown+0x12>
		m_touch_state = LCD_TOUCH_DOWN;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <LCD_Touch_OnDown+0x1c>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
	}
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	200000b0 	.word	0x200000b0

080011fc <LCD_Touch_OnUp>:

/*
 * Indicates the finish of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnUp() {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	m_touch_state = LCD_TOUCH_IDLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <LCD_Touch_OnUp+0x24>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

	if (m_last_point_ref != NULL) {
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <LCD_Touch_OnUp+0x28>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <LCD_Touch_OnUp+0x1a>
		// Mark the last read touch point as TOUCH_UP.
		// Note that it changes the point state that the user specified
		// as an argument to LCD_Touch_Read function.
		m_last_point_ref->state = LCD_TOUCH_UP;
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <LCD_Touch_OnUp+0x28>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2203      	movs	r2, #3
 8001214:	721a      	strb	r2, [r3, #8]
	}
	//LCD_Touch_Draw_OnUp();
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	200000b0 	.word	0x200000b0
 8001224:	200000b4 	.word	0x200000b4

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int Testcolor=0;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f000 fce5 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f8ed 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f000 fa6d 	bl	8001718 <MX_GPIO_Init>
  MX_SPI1_Init();
 800123e:	f000 f9ff 	bl	8001640 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001242:	f000 fa33 	bl	80016ac <MX_SPI2_Init>
  MX_ADC1_Init();
 8001246:	f000 f957 	bl	80014f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800124a:	f000 f9a7 	bl	800159c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	4b63      	ldr	r3, [pc, #396]	; (80013e0 <main+0x1b8>)
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <main+0x1bc>)
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	4961      	ldr	r1, [pc, #388]	; (80013e8 <main+0x1c0>)
 8001262:	4862      	ldr	r0, [pc, #392]	; (80013ec <main+0x1c4>)
 8001264:	f7ff fa04 	bl	8000670 <ILI9341_Init>
	ILI9341_setRotation(2);
 8001268:	2002      	movs	r0, #2
 800126a:	f7ff fce9 	bl	8000c40 <ILI9341_setRotation>
	ILI9341_Fill(COLOR_NAVY);
 800126e:	200f      	movs	r0, #15
 8001270:	f7ff fade 	bl	8000830 <ILI9341_Fill>

	//TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
	//TSC2046_Calibrate();
	ILI9341_Fill(COLOR_WHITE);
 8001274:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001278:	f7ff fada 	bl	8000830 <ILI9341_Fill>

		ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 800127c:	231f      	movs	r3, #31
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	23b4      	movs	r3, #180	; 0xb4
 8001282:	228c      	movs	r2, #140	; 0x8c
 8001284:	218c      	movs	r1, #140	; 0x8c
 8001286:	2014      	movs	r0, #20
 8001288:	f7ff fb16 	bl	80008b8 <ILI9341_Fill_Rect>
		ILI9341_printText("LED ON", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	231f      	movs	r3, #31
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001298:	229b      	movs	r2, #155	; 0x9b
 800129a:	2137      	movs	r1, #55	; 0x37
 800129c:	4854      	ldr	r0, [pc, #336]	; (80013f0 <main+0x1c8>)
 800129e:	f7ff fc8d 	bl	8000bbc <ILI9341_printText>
		ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 80012a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	23b4      	movs	r3, #180	; 0xb4
 80012aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012ae:	218c      	movs	r1, #140	; 0x8c
 80012b0:	20b4      	movs	r0, #180	; 0xb4
 80012b2:	f7ff fb01 	bl	80008b8 <ILI9341_Fill_Rect>
		ILI9341_printText("LED OFF", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c4:	229b      	movs	r2, #155	; 0x9b
 80012c6:	21d7      	movs	r1, #215	; 0xd7
 80012c8:	484a      	ldr	r0, [pc, #296]	; (80013f4 <main+0x1cc>)
 80012ca:	f7ff fc77 	bl	8000bbc <ILI9341_printText>

	ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 80012ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	235a      	movs	r3, #90	; 0x5a
 80012d6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012da:	211e      	movs	r1, #30
 80012dc:	203c      	movs	r0, #60	; 0x3c
 80012de:	f7ff faeb 	bl	80008b8 <ILI9341_Fill_Rect>


	ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 80012e2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	23eb      	movs	r3, #235	; 0xeb
 80012ea:	f240 123b 	movw	r2, #315	; 0x13b
 80012ee:	21d7      	movs	r1, #215	; 0xd7
 80012f0:	2005      	movs	r0, #5
 80012f2:	f7ff fae1 	bl	80008b8 <ILI9341_Fill_Rect>
	ILI9341_printText("Touch Display stm32 Arduino", 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 80012f6:	2301      	movs	r3, #1
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001304:	22dd      	movs	r2, #221	; 0xdd
 8001306:	2146      	movs	r1, #70	; 0x46
 8001308:	483b      	ldr	r0, [pc, #236]	; (80013f8 <main+0x1d0>)
 800130a:	f7ff fc57 	bl	8000bbc <ILI9341_printText>
	ILI9341_Fill_Rect(5, 215, 5, 25, COLOR_GREEN);
 800130e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2319      	movs	r3, #25
 8001316:	2205      	movs	r2, #5
 8001318:	21d7      	movs	r1, #215	; 0xd7
 800131a:	2005      	movs	r0, #5
 800131c:	f7ff facc 	bl	80008b8 <ILI9341_Fill_Rect>
	ILI9341_printText("Max, Leo, Margot, time to leave ", 60 ,5, COLOR_WHITE, COLOR_BLACK, 1);
 8001320:	2301      	movs	r3, #1
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132c:	2205      	movs	r2, #5
 800132e:	213c      	movs	r1, #60	; 0x3c
 8001330:	4832      	ldr	r0, [pc, #200]	; (80013fc <main+0x1d4>)
 8001332:	f7ff fc43 	bl	8000bbc <ILI9341_printText>
	LCD_Touch_Init(&hadc2, ADC_CHANNEL_4, &hadc1, ADC_CHANNEL_1);
 8001336:	2301      	movs	r3, #1
 8001338:	4a31      	ldr	r2, [pc, #196]	; (8001400 <main+0x1d8>)
 800133a:	2104      	movs	r1, #4
 800133c:	4831      	ldr	r0, [pc, #196]	; (8001404 <main+0x1dc>)
 800133e:	f7ff fdf5 	bl	8000f2c <LCD_Touch_Init>
		LCD_SetMode(LCD_MODE_TOUCH);
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff feb2 	bl	80010ac <LCD_SetMode>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  if(LCD_Touch_Read(&p) != LCD_TOUCH_IDLE)
 8001348:	463b      	mov	r3, r7
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fec6 	bl	80010dc <LCD_Touch_Read>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00c      	beq.n	8001370 <main+0x148>
	 	  {
		  ILI9341_printText("Pas touche ", 60 ,60, COLOR_WHITE, COLOR_RED, 1);
 8001356:	2301      	movs	r3, #1
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001364:	223c      	movs	r2, #60	; 0x3c
 8001366:	213c      	movs	r1, #60	; 0x3c
 8001368:	4827      	ldr	r0, [pc, #156]	; (8001408 <main+0x1e0>)
 800136a:	f7ff fc27 	bl	8000bbc <ILI9341_printText>
 800136e:	e7eb      	b.n	8001348 <main+0x120>
	 	  }
	  else{

		  if (LCD_Touch_Read(&p) == LCD_TOUCH_READ_SUCCESS) {
 8001370:	463b      	mov	r3, r7
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff feb2 	bl	80010dc <LCD_Touch_Read>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d119      	bne.n	80013b2 <main+0x18a>
		 	 		  ILI9341_printText("touche ", 60 ,60, COLOR_WHITE, COLOR_GREEN, 1);
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138c:	223c      	movs	r2, #60	; 0x3c
 800138e:	213c      	movs	r1, #60	; 0x3c
 8001390:	481e      	ldr	r0, [pc, #120]	; (800140c <main+0x1e4>)
 8001392:	f7ff fc13 	bl	8000bbc <ILI9341_printText>
		 	 		  HAL_Delay(100);
 8001396:	2064      	movs	r0, #100	; 0x64
 8001398:	f000 fca4 	bl	8001ce4 <HAL_Delay>
		 	 		  ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 800139c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	235a      	movs	r3, #90	; 0x5a
 80013a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a8:	211e      	movs	r1, #30
 80013aa:	203c      	movs	r0, #60	; 0x3c
 80013ac:	f7ff fa84 	bl	80008b8 <ILI9341_Fill_Rect>
 80013b0:	e7ca      	b.n	8001348 <main+0x120>
		 	 	  	  }
		 	 	  else
		 	 	  	  {
		 	 	  		  ILI9341_printText("Ne touche plus  ", 60 ,60, COLOR_WHITE, COLOR_RED, 1);
 80013b2:	2301      	movs	r3, #1
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c0:	223c      	movs	r2, #60	; 0x3c
 80013c2:	213c      	movs	r1, #60	; 0x3c
 80013c4:	4812      	ldr	r0, [pc, #72]	; (8001410 <main+0x1e8>)
 80013c6:	f7ff fbf9 	bl	8000bbc <ILI9341_printText>
		 	 	  		ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 80013ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	235a      	movs	r3, #90	; 0x5a
 80013d2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d6:	211e      	movs	r1, #30
 80013d8:	203c      	movs	r0, #60	; 0x3c
 80013da:	f7ff fa6d 	bl	80008b8 <ILI9341_Fill_Rect>
	  if(LCD_Touch_Read(&p) != LCD_TOUCH_IDLE)
 80013de:	e7b3      	b.n	8001348 <main+0x120>
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	20000148 	.word	0x20000148
 80013f0:	08003db4 	.word	0x08003db4
 80013f4:	08003dbc 	.word	0x08003dbc
 80013f8:	08003dc4 	.word	0x08003dc4
 80013fc:	08003de0 	.word	0x08003de0
 8001400:	200000b8 	.word	0x200000b8
 8001404:	20000100 	.word	0x20000100
 8001408:	08003e04 	.word	0x08003e04
 800140c:	08003e10 	.word	0x08003e10
 8001410:	08003e18 	.word	0x08003e18

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	; 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	2234      	movs	r2, #52	; 0x34
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fcb2 	bl	8003d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <SystemClock_Config+0xdc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <SystemClock_Config+0xdc>)
 8001442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <SystemClock_Config+0xdc>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <SystemClock_Config+0xe0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <SystemClock_Config+0xe0>)
 800145e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <SystemClock_Config+0xe0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001478:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001484:	2304      	movs	r3, #4
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001488:	23b4      	movs	r3, #180	; 0xb4
 800148a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001490:	2302      	movs	r3, #2
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001494:	2302      	movs	r3, #2
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4618      	mov	r0, r3
 800149e:	f001 ff15 	bl	80032cc <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014a8:	f000 f9c0 	bl	800182c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014ac:	f001 fba8 	bl	8002c00 <HAL_PWREx_EnableOverDrive>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014b6:	f000 f9b9 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2302      	movs	r3, #2
 80014c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2105      	movs	r1, #5
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fbe1 	bl	8002ca0 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014e4:	f000 f9a2 	bl	800182c <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3750      	adds	r7, #80	; 0x50
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	463b      	mov	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_ADC1_Init+0x98>)
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <MX_ADC1_Init+0x9c>)
 800150e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_ADC1_Init+0x98>)
 8001512:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001516:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_ADC1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC1_Init+0x98>)
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <MX_ADC1_Init+0xa0>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_ADC1_Init+0x98>)
 8001546:	2201      	movs	r2, #1
 8001548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_ADC1_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_ADC1_Init+0x98>)
 8001554:	2201      	movs	r2, #1
 8001556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_ADC1_Init+0x98>)
 800155a:	f000 fbe7 	bl	8001d2c <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001564:	f000 f962 	bl	800182c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001568:	2301      	movs	r3, #1
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_ADC1_Init+0x98>)
 800157a:	f000 fdb9 	bl	80020f0 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001584:	f000 f952 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000b8 	.word	0x200000b8
 8001594:	40012000 	.word	0x40012000
 8001598:	0f000001 	.word	0x0f000001

0800159c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_ADC2_Init+0x98>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <MX_ADC2_Init+0x9c>)
 80015b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_ADC2_Init+0x98>)
 80015b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_ADC2_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_ADC2_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_ADC2_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_ADC2_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_ADC2_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_ADC2_Init+0x98>)
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <MX_ADC2_Init+0xa0>)
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_ADC2_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_ADC2_Init+0x98>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_ADC2_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_ADC2_Init+0x98>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_ADC2_Init+0x98>)
 80015fe:	f000 fb95 	bl	8001d2c <HAL_ADC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001608:	f000 f910 	bl	800182c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800160c:	2304      	movs	r3, #4
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_ADC2_Init+0x98>)
 800161e:	f000 fd67 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001628:	f000 f900 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000100 	.word	0x20000100
 8001638:	40012100 	.word	0x40012100
 800163c:	0f000001 	.word	0x0f000001

08001640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <MX_SPI1_Init+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_SPI1_Init+0x64>)
 800164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_SPI1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_SPI1_Init+0x64>)
 800166c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI1_Init+0x64>)
 800168c:	220a      	movs	r2, #10
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001692:	f002 f8b9 	bl	8003808 <HAL_SPI_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800169c:	f000 f8c6 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000148 	.word	0x20000148
 80016a8:	40013000 	.word	0x40013000

080016ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_SPI2_Init+0x64>)
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <MX_SPI2_Init+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_SPI2_Init+0x64>)
 80016b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_SPI2_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_SPI2_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_SPI2_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_SPI2_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_SPI2_Init+0x64>)
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_SPI2_Init+0x64>)
 80016e0:	2210      	movs	r2, #16
 80016e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_SPI2_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SPI2_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_SPI2_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_SPI2_Init+0x64>)
 80016f8:	220a      	movs	r2, #10
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_SPI2_Init+0x64>)
 80016fe:	f002 f883 	bl	8003808 <HAL_SPI_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001708:	f000 f890 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200001a0 	.word	0x200001a0
 8001714:	40003800 	.word	0x40003800

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <MX_GPIO_Init+0x104>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a39      	ldr	r2, [pc, #228]	; (800181c <MX_GPIO_Init+0x104>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <MX_GPIO_Init+0x104>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <MX_GPIO_Init+0x104>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a32      	ldr	r2, [pc, #200]	; (800181c <MX_GPIO_Init+0x104>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <MX_GPIO_Init+0x104>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <MX_GPIO_Init+0x104>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a2b      	ldr	r2, [pc, #172]	; (800181c <MX_GPIO_Init+0x104>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <MX_GPIO_Init+0x104>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <MX_GPIO_Init+0x104>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <MX_GPIO_Init+0x104>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <MX_GPIO_Init+0x104>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80017a4:	481e      	ldr	r0, [pc, #120]	; (8001820 <MX_GPIO_Init+0x108>)
 80017a6:	f001 f9ed 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	481d      	ldr	r0, [pc, #116]	; (8001824 <MX_GPIO_Init+0x10c>)
 80017b0:	f001 f9e8 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2160      	movs	r1, #96	; 0x60
 80017b8:	481b      	ldr	r0, [pc, #108]	; (8001828 <MX_GPIO_Init+0x110>)
 80017ba:	f001 f9e3 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 80017be:	f44f 7308 	mov.w	r3, #544	; 0x220
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4812      	ldr	r0, [pc, #72]	; (8001820 <MX_GPIO_Init+0x108>)
 80017d8:	f001 f828 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_GPIO_Init+0x10c>)
 80017f4:	f001 f81a 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 80017f8:	2360      	movs	r3, #96	; 0x60
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_GPIO_Init+0x110>)
 8001810:	f001 f80c 	bl	800282c <HAL_GPIO_Init>

}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020800 	.word	0x40020800
 8001828:	40020400 	.word	0x40020400

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <HAL_MspInit+0x4c>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_MspInit+0x4c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001876:	2007      	movs	r0, #7
 8001878:	f000 ff7a 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <HAL_ADC_MspInit+0xd8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d128      	bne.n	80018fc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	481c      	ldr	r0, [pc, #112]	; (8001968 <HAL_ADC_MspInit+0xe0>)
 80018f6:	f000 ff99 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018fa:	e02c      	b.n	8001956 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1a      	ldr	r2, [pc, #104]	; (800196c <HAL_ADC_MspInit+0xe4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d127      	bne.n	8001956 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800193e:	2310      	movs	r3, #16
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_ADC_MspInit+0xe0>)
 8001952:	f000 ff6b 	bl	800282c <HAL_GPIO_Init>
}
 8001956:	bf00      	nop
 8001958:	3730      	adds	r7, #48	; 0x30
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40012000 	.word	0x40012000
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000
 800196c:	40012100 	.word	0x40012100

08001970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_SPI_MspInit+0x180>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d14a      	bne.n	8001a28 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019aa:	623b      	str	r3, [r7, #32]
 80019ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e6:	23c0      	movs	r3, #192	; 0xc0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f6:	2305      	movs	r3, #5
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	483d      	ldr	r0, [pc, #244]	; (8001af8 <HAL_SPI_MspInit+0x188>)
 8001a02:	f000 ff13 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a06:	2308      	movs	r3, #8
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a16:	2305      	movs	r3, #5
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4836      	ldr	r0, [pc, #216]	; (8001afc <HAL_SPI_MspInit+0x18c>)
 8001a22:	f000 ff03 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a26:	e05f      	b.n	8001ae8 <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <HAL_SPI_MspInit+0x190>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d15a      	bne.n	8001ae8 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_SPI_MspInit+0x184>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_DO_Pin;
 8001a86:	2302      	movs	r3, #2
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001a96:	2307      	movs	r3, #7
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TS_DO_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <HAL_SPI_MspInit+0x194>)
 8001aa2:	f000 fec3 	bl	800282c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = T_DIN_Pin;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(T_DIN_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <HAL_SPI_MspInit+0x194>)
 8001ac2:	f000 feb3 	bl	800282c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ad8:	2305      	movs	r3, #5
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <HAL_SPI_MspInit+0x18c>)
 8001ae4:	f000 fea2 	bl	800282c <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	3738      	adds	r7, #56	; 0x38
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40013000 	.word	0x40013000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40003800 	.word	0x40003800
 8001b04:	40020800 	.word	0x40020800

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b54:	f000 f8a6 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <EXTI4_IRQHandler>:
 *   LCD_TOUCH_DOWN,
 *   LCD_TOUCH_MOVE,
 *   LCD_TOUCH_UP
 * events, if LCD_MODE_TOUCH is selected.
 */
void EXTI4_IRQHandler(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8001b60:	2110      	movs	r1, #16
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <EXTI4_IRQHandler+0x28>)
 8001b64:	f000 fff6 	bl	8002b54 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <EXTI4_IRQHandler+0x18>
		LCD_Touch_OnDown();
 8001b6e:	f7ff fb35 	bl	80011dc <LCD_Touch_OnDown>
 8001b72:	e001      	b.n	8001b78 <EXTI4_IRQHandler+0x1c>
	} else {
		LCD_Touch_OnUp();
 8001b74:	f7ff fb42 	bl	80011fc <LCD_Touch_OnUp>
	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b78:	2010      	movs	r0, #16
 8001b7a:	f001 f81d 	bl	8002bb8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40020000 	.word	0x40020000

08001b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <SystemInit+0x20>)
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <SystemInit+0x20>)
 8001b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc8:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff ffd7 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f002 f8a5 	bl	8003d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7ff fb23 	bl	8001228 <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001bf0:	0800434c 	.word	0x0800434c
  ldr r2, =_sbss
 8001bf4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bf8:	200001fc 	.word	0x200001fc

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_Init+0x40>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_Init+0x40>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x40>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 fda1 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fe00 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fdc7 	bl	80027f6 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c80:	f000 fd81 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	200001f8 	.word	0x200001f8

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200001f8 	.word	0x200001f8

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000000c 	.word	0x2000000c

08001d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e033      	b.n	8001daa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fd9c 	bl	8001888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d118      	bne.n	8001d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d72:	f023 0302 	bic.w	r3, r3, #2
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fae8 	bl	8002354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f023 0303 	bic.w	r3, r3, #3
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
 8001d9a:	e001      	b.n	8001da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Start+0x1a>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e0b2      	b.n	8001f34 <HAL_ADC_Start+0x180>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d018      	beq.n	8001e16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001df4:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_ADC_Start+0x18c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_ADC_Start+0x190>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9a      	lsrs	r2, r3, #18
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d17a      	bne.n	8001f1a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e62:	d106      	bne.n	8001e72 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f023 0206 	bic.w	r2, r3, #6
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_ADC_Start+0x194>)
 8001e82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d12a      	bne.n	8001ef0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_ADC_Start+0x198>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d015      	beq.n	8001ed0 <HAL_ADC_Start+0x11c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <HAL_ADC_Start+0x19c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_Start+0x106>
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_ADC_Start+0x194>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <HAL_ADC_Start+0x1a0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d136      	bne.n	8001f32 <HAL_ADC_Start+0x17e>
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_ADC_Start+0x194>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d130      	bne.n	8001f32 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d129      	bne.n	8001f32 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	e020      	b.n	8001f32 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <HAL_ADC_Start+0x198>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d11b      	bne.n	8001f32 <HAL_ADC_Start+0x17e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d114      	bne.n	8001f32 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	e00b      	b.n	8001f32 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000004 	.word	0x20000004
 8001f44:	431bde83 	.word	0x431bde83
 8001f48:	40012300 	.word	0x40012300
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	40012100 	.word	0x40012100
 8001f54:	40012200 	.word	0x40012200

08001f58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Stop+0x16>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e021      	b.n	8001fb2 <HAL_ADC_Stop+0x5a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fda:	d113      	bne.n	8002004 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e063      	b.n	80020cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002004:	f7ff fe62 	bl	8001ccc <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800200a:	e021      	b.n	8002050 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002012:	d01d      	beq.n	8002050 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_ADC_PollForConversion+0x6c>
 800201a:	f7ff fe57 	bl	8001ccc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d212      	bcs.n	8002050 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d00b      	beq.n	8002050 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e03d      	b.n	80020cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d1d6      	bne.n	800200c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0212 	mvn.w	r2, #18
 8002066:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d123      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d11f      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d111      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1c>
 8002108:	2302      	movs	r3, #2
 800210a:	e113      	b.n	8002334 <HAL_ADC_ConfigChannel+0x244>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d925      	bls.n	8002168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	3b1e      	subs	r3, #30
 8002132:	2207      	movs	r2, #7
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	4603      	mov	r3, r0
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4403      	add	r3, r0
 800215a:	3b1e      	subs	r3, #30
 800215c:	409a      	lsls	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	e022      	b.n	80021ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	2207      	movs	r2, #7
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4403      	add	r3, r0
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d824      	bhi.n	8002200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b05      	subs	r3, #5
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b05      	subs	r3, #5
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34
 80021fe:	e04c      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d824      	bhi.n	8002252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b23      	subs	r3, #35	; 0x23
 800221a:	221f      	movs	r2, #31
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b23      	subs	r3, #35	; 0x23
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
 8002250:	e023      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b41      	subs	r3, #65	; 0x41
 8002264:	221f      	movs	r2, #31
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b41      	subs	r3, #65	; 0x41
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_ADC_ConfigChannel+0x250>)
 800229c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_ADC_ConfigChannel+0x254>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10f      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b12      	cmp	r3, #18
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_ADC_ConfigChannel+0x254>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_ADC_ConfigChannel+0x258>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x1f4>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b11      	cmp	r3, #17
 80022e2:	d122      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_ADC_ConfigChannel+0x258>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d111      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_ADC_ConfigChannel+0x25c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_ADC_ConfigChannel+0x260>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	40012000 	.word	0x40012000
 8002348:	10000012 	.word	0x10000012
 800234c:	20000004 	.word	0x20000004
 8002350:	431bde83 	.word	0x431bde83

08002354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800235c:	4b79      	ldr	r3, [pc, #484]	; (8002544 <ADC_Init+0x1f0>)
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	4a58      	ldr	r2, [pc, #352]	; (8002548 <ADC_Init+0x1f4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800241c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	e00f      	b.n	8002452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002450:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0202 	bic.w	r2, r2, #2
 8002460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e1b      	ldrb	r3, [r3, #24]
 800246c:	005a      	lsls	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800249e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	3b01      	subs	r3, #1
 80024ac:	035a      	lsls	r2, r3, #13
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e007      	b.n	80024c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	051a      	lsls	r2, r3, #20
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800250a:	025a      	lsls	r2, r3, #9
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	029a      	lsls	r2, r3, #10
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012300 	.word	0x40012300
 8002548:	0f000001 	.word	0x0f000001

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db12      	blt.n	8002624 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	490a      	ldr	r1, [pc, #40]	; (8002630 <__NVIC_DisableIRQ+0x44>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	3320      	adds	r3, #32
 8002614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002618:	f3bf 8f4f 	dsb	sy
}
 800261c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800261e:	f3bf 8f6f 	isb	sy
}
 8002622:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0c      	blt.n	8002660 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <__NVIC_ClearPendingIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	3360      	adds	r3, #96	; 0x60
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fee7 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff fefc 	bl	8002594 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff feef 	bl	80025b0 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff feff 	bl	80025ec <__NVIC_DisableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff94 	bl	800272c <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff09 	bl	8002634 <__NVIC_ClearPendingIRQ>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e165      	b.n	8002b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8154 	bne.w	8002b0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80ae 	beq.w	8002b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_GPIO_Init+0x304>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x308>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d025      	beq.n	8002a46 <HAL_GPIO_Init+0x21a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_GPIO_Init+0x30c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01f      	beq.n	8002a42 <HAL_GPIO_Init+0x216>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4d      	ldr	r2, [pc, #308]	; (8002b3c <HAL_GPIO_Init+0x310>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d019      	beq.n	8002a3e <HAL_GPIO_Init+0x212>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4c      	ldr	r2, [pc, #304]	; (8002b40 <HAL_GPIO_Init+0x314>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x20e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_GPIO_Init+0x318>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_Init+0x20a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_GPIO_Init+0x31c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x206>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a49      	ldr	r2, [pc, #292]	; (8002b4c <HAL_GPIO_Init+0x320>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_Init+0x202>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a66:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8a:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f ae96 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40021400 	.word	0x40021400
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e001      	b.n	8002b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f806 	bl	8002be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40013c00 	.word	0x40013c00

08002be8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c2c:	f7ff f84e 	bl	8001ccc <HAL_GetTick>
 8002c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c32:	e009      	b.n	8002c48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c34:	f7ff f84a 	bl	8001ccc <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c42:	d901      	bls.n	8002c48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e01f      	b.n	8002c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d1ee      	bne.n	8002c34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c5c:	f7ff f836 	bl	8001ccc <HAL_GetTick>
 8002c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c62:	e009      	b.n	8002c78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c64:	f7ff f832 	bl	8001ccc <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c72:	d901      	bls.n	8002c78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e007      	b.n	8002c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c84:	d1ee      	bne.n	8002c64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	420e0040 	.word	0x420e0040
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	420e0044 	.word	0x420e0044

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0cc      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d90c      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	494d      	ldr	r1, [pc, #308]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d044      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d119      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e067      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4934      	ldr	r1, [pc, #208]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d90:	f7fe ff9c 	bl	8001ccc <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7fe ff98 	bl	8001ccc <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e04f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 020c 	and.w	r2, r3, #12
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d1eb      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d20c      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4916      	ldr	r1, [pc, #88]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e26:	f000 f821 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	490a      	ldr	r1, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	5ccb      	ldrb	r3, [r1, r3]
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fefc 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023c00 	.word	0x40023c00
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	0800432c 	.word	0x0800432c
 8002e64:	20000004 	.word	0x20000004
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e70:	b0ae      	sub	sp, #184	; 0xb8
 8002e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e92:	4bcb      	ldr	r3, [pc, #812]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	f200 8206 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x440>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002edd 	.word	0x08002edd
 8002eac:	080032ad 	.word	0x080032ad
 8002eb0:	080032ad 	.word	0x080032ad
 8002eb4:	080032ad 	.word	0x080032ad
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	080032ad 	.word	0x080032ad
 8002ec0:	080032ad 	.word	0x080032ad
 8002ec4:	080032ad 	.word	0x080032ad
 8002ec8:	08002eed 	.word	0x08002eed
 8002ecc:	080032ad 	.word	0x080032ad
 8002ed0:	080032ad 	.word	0x080032ad
 8002ed4:	080032ad 	.word	0x080032ad
 8002ed8:	080030dd 	.word	0x080030dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4bb9      	ldr	r3, [pc, #740]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ee2:	e1e7      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee4:	4bb8      	ldr	r3, [pc, #736]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eea:	e1e3      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4bb4      	ldr	r3, [pc, #720]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef8:	4bb1      	ldr	r3, [pc, #708]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d071      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4bae      	ldr	r3, [pc, #696]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	0159      	lsls	r1, r3, #5
 8002f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3c:	0150      	lsls	r0, r2, #5
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4621      	mov	r1, r4
 8002f44:	1a51      	subs	r1, r2, r1
 8002f46:	6439      	str	r1, [r7, #64]	; 0x40
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	4641      	mov	r1, r8
 8002f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f66:	4641      	mov	r1, r8
 8002f68:	018a      	lsls	r2, r1, #6
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	1a51      	subs	r1, r2, r1
 8002f6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f70:	4649      	mov	r1, r9
 8002f72:	eb63 0301 	sbc.w	r3, r3, r1
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f84:	4649      	mov	r1, r9
 8002f86:	00cb      	lsls	r3, r1, #3
 8002f88:	4641      	mov	r1, r8
 8002f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8e:	4641      	mov	r1, r8
 8002f90:	00ca      	lsls	r2, r1, #3
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	4622      	mov	r2, r4
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	460a      	mov	r2, r1
 8002fa2:	eb42 0303 	adc.w	r3, r2, r3
 8002fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	024b      	lsls	r3, r1, #9
 8002fb8:	4621      	mov	r1, r4
 8002fba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	024a      	lsls	r2, r1, #9
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fd8:	f7fd f914 	bl	8000204 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe6:	e067      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe8:	4b75      	ldr	r3, [pc, #468]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	67bb      	str	r3, [r7, #120]	; 0x78
 8003002:	2300      	movs	r3, #0
 8003004:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003006:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800300a:	4622      	mov	r2, r4
 800300c:	462b      	mov	r3, r5
 800300e:	f04f 0000 	mov.w	r0, #0
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	0159      	lsls	r1, r3, #5
 8003018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301c:	0150      	lsls	r0, r2, #5
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4621      	mov	r1, r4
 8003024:	1a51      	subs	r1, r2, r1
 8003026:	62b9      	str	r1, [r7, #40]	; 0x28
 8003028:	4629      	mov	r1, r5
 800302a:	eb63 0301 	sbc.w	r3, r3, r1
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800303c:	4649      	mov	r1, r9
 800303e:	018b      	lsls	r3, r1, #6
 8003040:	4641      	mov	r1, r8
 8003042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003046:	4641      	mov	r1, r8
 8003048:	018a      	lsls	r2, r1, #6
 800304a:	4641      	mov	r1, r8
 800304c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003050:	4649      	mov	r1, r9
 8003052:	eb63 0b01 	sbc.w	fp, r3, r1
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003062:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306a:	4692      	mov	sl, r2
 800306c:	469b      	mov	fp, r3
 800306e:	4623      	mov	r3, r4
 8003070:	eb1a 0303 	adds.w	r3, sl, r3
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	462b      	mov	r3, r5
 8003078:	eb4b 0303 	adc.w	r3, fp, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800308a:	4629      	mov	r1, r5
 800308c:	028b      	lsls	r3, r1, #10
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003094:	4621      	mov	r1, r4
 8003096:	028a      	lsls	r2, r1, #10
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030a0:	2200      	movs	r2, #0
 80030a2:	673b      	str	r3, [r7, #112]	; 0x70
 80030a4:	677a      	str	r2, [r7, #116]	; 0x74
 80030a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80030aa:	f7fd f8ab 	bl	8000204 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4613      	mov	r3, r2
 80030b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030da:	e0eb      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030dc:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d06b      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f4:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	2200      	movs	r2, #0
 80030fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80030fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	663b      	str	r3, [r7, #96]	; 0x60
 8003108:	2300      	movs	r3, #0
 800310a:	667b      	str	r3, [r7, #100]	; 0x64
 800310c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003110:	4622      	mov	r2, r4
 8003112:	462b      	mov	r3, r5
 8003114:	f04f 0000 	mov.w	r0, #0
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	0159      	lsls	r1, r3, #5
 800311e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003122:	0150      	lsls	r0, r2, #5
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4621      	mov	r1, r4
 800312a:	1a51      	subs	r1, r2, r1
 800312c:	61b9      	str	r1, [r7, #24]
 800312e:	4629      	mov	r1, r5
 8003130:	eb63 0301 	sbc.w	r3, r3, r1
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003142:	4659      	mov	r1, fp
 8003144:	018b      	lsls	r3, r1, #6
 8003146:	4651      	mov	r1, sl
 8003148:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800314c:	4651      	mov	r1, sl
 800314e:	018a      	lsls	r2, r1, #6
 8003150:	4651      	mov	r1, sl
 8003152:	ebb2 0801 	subs.w	r8, r2, r1
 8003156:	4659      	mov	r1, fp
 8003158:	eb63 0901 	sbc.w	r9, r3, r1
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003168:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800316c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003170:	4690      	mov	r8, r2
 8003172:	4699      	mov	r9, r3
 8003174:	4623      	mov	r3, r4
 8003176:	eb18 0303 	adds.w	r3, r8, r3
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	462b      	mov	r3, r5
 800317e:	eb49 0303 	adc.w	r3, r9, r3
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003190:	4629      	mov	r1, r5
 8003192:	024b      	lsls	r3, r1, #9
 8003194:	4621      	mov	r1, r4
 8003196:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800319a:	4621      	mov	r1, r4
 800319c:	024a      	lsls	r2, r1, #9
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031a6:	2200      	movs	r2, #0
 80031a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80031aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031b0:	f7fd f828 	bl	8000204 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031be:	e065      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x420>
 80031c0:	40023800 	.word	0x40023800
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	4611      	mov	r1, r2
 80031d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031dc:	653b      	str	r3, [r7, #80]	; 0x50
 80031de:	2300      	movs	r3, #0
 80031e0:	657b      	str	r3, [r7, #84]	; 0x54
 80031e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031e6:	4642      	mov	r2, r8
 80031e8:	464b      	mov	r3, r9
 80031ea:	f04f 0000 	mov.w	r0, #0
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	0159      	lsls	r1, r3, #5
 80031f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f8:	0150      	lsls	r0, r2, #5
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4641      	mov	r1, r8
 8003200:	1a51      	subs	r1, r2, r1
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	4649      	mov	r1, r9
 8003206:	eb63 0301 	sbc.w	r3, r3, r1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003218:	4659      	mov	r1, fp
 800321a:	018b      	lsls	r3, r1, #6
 800321c:	4651      	mov	r1, sl
 800321e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003222:	4651      	mov	r1, sl
 8003224:	018a      	lsls	r2, r1, #6
 8003226:	4651      	mov	r1, sl
 8003228:	1a54      	subs	r4, r2, r1
 800322a:	4659      	mov	r1, fp
 800322c:	eb63 0501 	sbc.w	r5, r3, r1
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	00eb      	lsls	r3, r5, #3
 800323a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800323e:	00e2      	lsls	r2, r4, #3
 8003240:	4614      	mov	r4, r2
 8003242:	461d      	mov	r5, r3
 8003244:	4643      	mov	r3, r8
 8003246:	18e3      	adds	r3, r4, r3
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	464b      	mov	r3, r9
 800324c:	eb45 0303 	adc.w	r3, r5, r3
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003274:	2200      	movs	r2, #0
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
 8003278:	64fa      	str	r2, [r7, #76]	; 0x4c
 800327a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800327e:	f7fc ffc1 	bl	8000204 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4613      	mov	r3, r2
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0f1b      	lsrs	r3, r3, #28
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800329a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800329e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032aa:	e003      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	37b8      	adds	r7, #184	; 0xb8
 80032bc:	46bd      	mov	sp, r7
 80032be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	00f42400 	.word	0x00f42400

080032cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e28d      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8083 	beq.w	80033f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032ec:	4b94      	ldr	r3, [pc, #592]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d019      	beq.n	800332c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032f8:	4b91      	ldr	r3, [pc, #580]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003300:	2b08      	cmp	r3, #8
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003304:	4b8e      	ldr	r3, [pc, #568]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003310:	d00c      	beq.n	800332c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4b8b      	ldr	r3, [pc, #556]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	4b84      	ldr	r3, [pc, #528]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x124>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d157      	bne.n	80033f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e25a      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x90>
 800334e:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7b      	ldr	r2, [pc, #492]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xcc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0xb4>
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a72      	ldr	r2, [pc, #456]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xcc>
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6b      	ldr	r2, [pc, #428]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fc94 	bl	8001ccc <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fc90 	bl	8001ccc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e21f      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xdc>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fc80 	bl	8001ccc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe fc7c 	bl	8001ccc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e20b      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b57      	ldr	r3, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x104>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d06f      	beq.n	80034de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033fe:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800340a:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003412:	2b08      	cmp	r3, #8
 8003414:	d105      	bne.n	8003422 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b44      	ldr	r3, [pc, #272]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x186>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1d3      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4937      	ldr	r1, [pc, #220]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e03a      	b.n	80034de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCC_OscConfig+0x278>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe fc29 	bl	8001ccc <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe fc25 	bl	8001ccc <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1b4      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b28      	ldr	r3, [pc, #160]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4925      	ldr	r1, [pc, #148]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCC_OscConfig+0x278>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fc08 	bl	8001ccc <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe fc04 	bl	8001ccc <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e193      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d036      	beq.n	8003558 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe fbe8 	bl	8001ccc <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe fbe4 	bl	8001ccc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e173      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x234>
 800351e:	e01b      	b.n	8003558 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe fbd1 	bl	8001ccc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	e00e      	b.n	800354c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352e:	f7fe fbcd 	bl	8001ccc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d907      	bls.n	800354c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e15c      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
 8003540:	40023800 	.word	0x40023800
 8003544:	42470000 	.word	0x42470000
 8003548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b8a      	ldr	r3, [pc, #552]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ea      	bne.n	800352e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8097 	beq.w	8003694 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b83      	ldr	r3, [pc, #524]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	4b7f      	ldr	r3, [pc, #508]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a7e      	ldr	r2, [pc, #504]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b7c      	ldr	r3, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b79      	ldr	r3, [pc, #484]	; (800377c <HAL_RCC_OscConfig+0x4b0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <HAL_RCC_OscConfig+0x4b0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a75      	ldr	r2, [pc, #468]	; (800377c <HAL_RCC_OscConfig+0x4b0>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe fb8d 	bl	8001ccc <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fb89 	bl	8001ccc <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e118      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b6c      	ldr	r3, [pc, #432]	; (800377c <HAL_RCC_OscConfig+0x4b0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x31e>
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x358>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x340>
 80035f2:	4b61      	ldr	r3, [pc, #388]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a60      	ldr	r2, [pc, #384]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a5d      	ldr	r2, [pc, #372]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0x358>
 800360c:	4b5a      	ldr	r3, [pc, #360]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a59      	ldr	r2, [pc, #356]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	4b57      	ldr	r3, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a56      	ldr	r2, [pc, #344]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	f023 0304 	bic.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe fb4e 	bl	8001ccc <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe fb4a 	bl	8001ccc <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0d7      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ee      	beq.n	8003634 <HAL_RCC_OscConfig+0x368>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe fb38 	bl	8001ccc <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe fb34 	bl	8001ccc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0c1      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003676:	4b40      	ldr	r3, [pc, #256]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ee      	bne.n	8003660 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80ad 	beq.w	80037f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d060      	beq.n	800376c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d145      	bne.n	800373e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b33      	ldr	r3, [pc, #204]	; (8003780 <HAL_RCC_OscConfig+0x4b4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe fb08 	bl	8001ccc <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe fb04 	bl	8001ccc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e093      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	071b      	lsls	r3, r3, #28
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x4b4>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe fad9 	bl	8001ccc <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe fad5 	bl	8001ccc <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e064      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x452>
 800373c:	e05c      	b.n	80037f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x4b4>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fac2 	bl	8001ccc <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fabe 	bl	8001ccc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e04d      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x480>
 800376a:	e045      	b.n	80037f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e040      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_RCC_OscConfig+0x538>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d030      	beq.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d129      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d122      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d119      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10f      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e07b      	b.n	8003912 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382a:	d009      	beq.n	8003840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
 8003832:	e005      	b.n	8003840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fe f888 	bl	8001970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	ea42 0103 	orr.w	r1, r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	f003 0104 	and.w	r1, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f003 0210 	and.w	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003900:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b088      	sub	sp, #32
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_SPI_Transmit+0x22>
 8003938:	2302      	movs	r3, #2
 800393a:	e126      	b.n	8003b8a <HAL_SPI_Transmit+0x270>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003944:	f7fe f9c2 	bl	8001ccc <HAL_GetTick>
 8003948:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d002      	beq.n	8003960 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800395e:	e10b      	b.n	8003b78 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_Transmit+0x52>
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003970:	e102      	b.n	8003b78 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	d10f      	bne.n	80039da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d007      	beq.n	80039f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a00:	d14b      	bne.n	8003a9a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Transmit+0xf6>
 8003a0a:	8afb      	ldrh	r3, [r7, #22]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d13e      	bne.n	8003a8e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a34:	e02b      	b.n	8003a8e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d112      	bne.n	8003a6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a68:	e011      	b.n	8003a8e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6a:	f7fe f92f 	bl	8001ccc <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d803      	bhi.n	8003a82 <HAL_SPI_Transmit+0x168>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a80:	d102      	bne.n	8003a88 <HAL_SPI_Transmit+0x16e>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a8c:	e074      	b.n	8003b78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ce      	bne.n	8003a36 <HAL_SPI_Transmit+0x11c>
 8003a98:	e04c      	b.n	8003b34 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SPI_Transmit+0x18e>
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d140      	bne.n	8003b2a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ace:	e02c      	b.n	8003b2a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d113      	bne.n	8003b06 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b04:	e011      	b.n	8003b2a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b06:	f7fe f8e1 	bl	8001ccc <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d803      	bhi.n	8003b1e <HAL_SPI_Transmit+0x204>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Transmit+0x20a>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b28:	e026      	b.n	8003b78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1cd      	bne.n	8003ad0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f8b3 	bl	8003ca4 <SPI_EndRxTxTransaction>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e000      	b.n	8003b78 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba4:	f7fe f892 	bl	8001ccc <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bb4:	f7fe f88a 	bl	8001ccc <HAL_GetTick>
 8003bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	015b      	lsls	r3, r3, #5
 8003bc0:	0d1b      	lsrs	r3, r3, #20
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	e054      	b.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd2:	d050      	beq.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd4:	f7fe f87a 	bl	8001ccc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d902      	bls.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13d      	bne.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c02:	d111      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0c:	d004      	beq.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d107      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d10f      	bne.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e017      	b.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d19b      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000004 	.word	0x20000004

08003ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <SPI_EndRxTxTransaction+0x7c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <SPI_EndRxTxTransaction+0x80>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0d5b      	lsrs	r3, r3, #21
 8003cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cce:	d112      	bne.n	8003cf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff ff5a 	bl	8003b94 <SPI_WaitFlagStateUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d016      	beq.n	8003d14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e00f      	b.n	8003d16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	2b80      	cmp	r3, #128	; 0x80
 8003d0e:	d0f2      	beq.n	8003cf6 <SPI_EndRxTxTransaction+0x52>
 8003d10:	e000      	b.n	8003d14 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d12:	bf00      	nop
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000004 	.word	0x20000004
 8003d24:	165e9f81 	.word	0x165e9f81

08003d28 <__libc_init_array>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4d0d      	ldr	r5, [pc, #52]	; (8003d60 <__libc_init_array+0x38>)
 8003d2c:	4c0d      	ldr	r4, [pc, #52]	; (8003d64 <__libc_init_array+0x3c>)
 8003d2e:	1b64      	subs	r4, r4, r5
 8003d30:	10a4      	asrs	r4, r4, #2
 8003d32:	2600      	movs	r6, #0
 8003d34:	42a6      	cmp	r6, r4
 8003d36:	d109      	bne.n	8003d4c <__libc_init_array+0x24>
 8003d38:	4d0b      	ldr	r5, [pc, #44]	; (8003d68 <__libc_init_array+0x40>)
 8003d3a:	4c0c      	ldr	r4, [pc, #48]	; (8003d6c <__libc_init_array+0x44>)
 8003d3c:	f000 f82e 	bl	8003d9c <_init>
 8003d40:	1b64      	subs	r4, r4, r5
 8003d42:	10a4      	asrs	r4, r4, #2
 8003d44:	2600      	movs	r6, #0
 8003d46:	42a6      	cmp	r6, r4
 8003d48:	d105      	bne.n	8003d56 <__libc_init_array+0x2e>
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d50:	4798      	blx	r3
 8003d52:	3601      	adds	r6, #1
 8003d54:	e7ee      	b.n	8003d34 <__libc_init_array+0xc>
 8003d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5a:	4798      	blx	r3
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	e7f2      	b.n	8003d46 <__libc_init_array+0x1e>
 8003d60:	08004344 	.word	0x08004344
 8003d64:	08004344 	.word	0x08004344
 8003d68:	08004344 	.word	0x08004344
 8003d6c:	08004348 	.word	0x08004348

08003d70 <memcpy>:
 8003d70:	440a      	add	r2, r1
 8003d72:	4291      	cmp	r1, r2
 8003d74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d78:	d100      	bne.n	8003d7c <memcpy+0xc>
 8003d7a:	4770      	bx	lr
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d86:	4291      	cmp	r1, r2
 8003d88:	d1f9      	bne.n	8003d7e <memcpy+0xe>
 8003d8a:	bd10      	pop	{r4, pc}

08003d8c <memset>:
 8003d8c:	4402      	add	r2, r0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d100      	bne.n	8003d96 <memset+0xa>
 8003d94:	4770      	bx	lr
 8003d96:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9a:	e7f9      	b.n	8003d90 <memset+0x4>

08003d9c <_init>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr

08003da8 <_fini>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr
