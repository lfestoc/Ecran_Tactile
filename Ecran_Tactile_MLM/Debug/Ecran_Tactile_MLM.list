
Ecran_Tactile_MLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005188  08005188  000338f4  2**0
                  CONTENTS
  4 .ARM          00000008  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005190  08005190  000338f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000138f4  20000000  08005198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200138f4  08018a8c  000338f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013af4  08018a8c  00033af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000338f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1cb  00000000  00000000  00033924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f81  00000000  00000000  0003eaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00040a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002348f  00000000  00000000  00041c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c166  00000000  00000000  000650b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d55aa  00000000  00000000  0007121d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001467c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000290c  00000000  00000000  00146818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200138f4 	.word	0x200138f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b64 	.word	0x08004b64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200138f8 	.word	0x200138f8
 800020c:	08004b64 	.word	0x08004b64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <ILI9341_SendCommand+0x54>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <ILI9341_SendCommand+0x58>)
 80005d8:	8811      	ldrh	r1, [r2, #0]
 80005da:	2200      	movs	r2, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fd3d 	bl	800305c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <ILI9341_SendCommand+0x5c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <ILI9341_SendCommand+0x60>)
 80005e8:	8811      	ldrh	r1, [r2, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fd35 	bl	800305c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	2305      	movs	r3, #5
 80005f8:	2201      	movs	r2, #1
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <ILI9341_SendCommand+0x64>)
 80005fc:	f003 fbf9 	bl	8003df2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <ILI9341_SendCommand+0x5c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <ILI9341_SendCommand+0x60>)
 8000606:	8811      	ldrh	r1, [r2, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fd26 	bl	800305c <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20013974 	.word	0x20013974
 800061c:	20013978 	.word	0x20013978
 8000620:	2001396c 	.word	0x2001396c
 8000624:	20013970 	.word	0x20013970
 8000628:	20013914 	.word	0x20013914

0800062c <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <ILI9341_SendData+0x54>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <ILI9341_SendData+0x58>)
 8000640:	8811      	ldrh	r1, [r2, #0]
 8000642:	2201      	movs	r2, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fd09 	bl	800305c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <ILI9341_SendData+0x5c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <ILI9341_SendData+0x60>)
 8000650:	8811      	ldrh	r1, [r2, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fd01 	bl	800305c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800065a:	f107 010f 	add.w	r1, r7, #15
 800065e:	2305      	movs	r3, #5
 8000660:	2201      	movs	r2, #1
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <ILI9341_SendData+0x64>)
 8000664:	f003 fbc5 	bl	8003df2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <ILI9341_SendData+0x5c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <ILI9341_SendData+0x60>)
 800066e:	8811      	ldrh	r1, [r2, #0]
 8000670:	2201      	movs	r2, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fcf2 	bl	800305c <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20013974 	.word	0x20013974
 8000684:	20013978 	.word	0x20013978
 8000688:	2001396c 	.word	0x2001396c
 800068c:	20013970 	.word	0x20013970
 8000690:	20013914 	.word	0x20013914

08000694 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80006b2:	202a      	movs	r0, #42	; 0x2a
 80006b4:	f7ff ff86 	bl	80005c4 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb3 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffae 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffa7 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffa2 	bl	800062c <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80006e8:	202b      	movs	r0, #43	; 0x2b
 80006ea:	f7ff ff6b 	bl	80005c4 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80006ee:	88bb      	ldrh	r3, [r7, #4]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff98 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff93 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000706:	883b      	ldrh	r3, [r7, #0]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b29b      	uxth	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff8c 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000714:	883b      	ldrh	r3, [r7, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff87 	bl	800062c <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800071e:	202c      	movs	r0, #44	; 0x2c
 8000720:	f7ff ff50 	bl	80005c4 <ILI9341_SendCommand>
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4613      	mov	r3, r2
 800073a:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 800073c:	2258      	movs	r2, #88	; 0x58
 800073e:	68f9      	ldr	r1, [r7, #12]
 8000740:	4853      	ldr	r0, [pc, #332]	; (8000890 <ILI9341_Init+0x164>)
 8000742:	f003 fd87 	bl	8004254 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000746:	4a53      	ldr	r2, [pc, #332]	; (8000894 <ILI9341_Init+0x168>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 800074c:	4a52      	ldr	r2, [pc, #328]	; (8000898 <ILI9341_Init+0x16c>)
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000752:	4a52      	ldr	r2, [pc, #328]	; (800089c <ILI9341_Init+0x170>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000758:	4a51      	ldr	r2, [pc, #324]	; (80008a0 <ILI9341_Init+0x174>)
 800075a:	8b3b      	ldrh	r3, [r7, #24]
 800075c:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800075e:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <ILI9341_Init+0x168>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a4d      	ldr	r2, [pc, #308]	; (8000898 <ILI9341_Init+0x16c>)
 8000764:	8811      	ldrh	r1, [r2, #0]
 8000766:	2201      	movs	r2, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fc77 	bl	800305c <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <ILI9341_Init+0x178>)
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <ILI9341_Init+0x17c>)
 8000776:	8c3b      	ldrh	r3, [r7, #32]
 8000778:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 800077a:	8c3b      	ldrh	r3, [r7, #32]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	69f8      	ldr	r0, [r7, #28]
 8000782:	f002 fc6b 	bl	800305c <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff1c 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f001 fd15 	bl	80021bc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f7ff ff16 	bl	80005c4 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000798:	20c0      	movs	r0, #192	; 0xc0
 800079a:	f7ff ff13 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 800079e:	2026      	movs	r0, #38	; 0x26
 80007a0:	f7ff ff44 	bl	800062c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80007a4:	20c1      	movs	r0, #193	; 0xc1
 80007a6:	f7ff ff0d 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80007aa:	2011      	movs	r0, #17
 80007ac:	f7ff ff3e 	bl	800062c <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80007b0:	20c5      	movs	r0, #197	; 0xc5
 80007b2:	f7ff ff07 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80007b6:	2035      	movs	r0, #53	; 0x35
 80007b8:	f7ff ff38 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80007bc:	203e      	movs	r0, #62	; 0x3e
 80007be:	f7ff ff35 	bl	800062c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80007c2:	20c7      	movs	r0, #199	; 0xc7
 80007c4:	f7ff fefe 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80007c8:	20be      	movs	r0, #190	; 0xbe
 80007ca:	f7ff ff2f 	bl	800062c <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80007ce:	2036      	movs	r0, #54	; 0x36
 80007d0:	f7ff fef8 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80007d4:	2048      	movs	r0, #72	; 0x48
 80007d6:	f7ff ff29 	bl	800062c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80007da:	203a      	movs	r0, #58	; 0x3a
 80007dc:	f7ff fef2 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80007e0:	2055      	movs	r0, #85	; 0x55
 80007e2:	f7ff ff23 	bl	800062c <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80007e6:	20b1      	movs	r0, #177	; 0xb1
 80007e8:	f7ff feec 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff ff1d 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 80007f2:	201f      	movs	r0, #31
 80007f4:	f7ff ff1a 	bl	800062c <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 80007f8:	202a      	movs	r0, #42	; 0x2a
 80007fa:	f7ff fee3 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ff14 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff ff11 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ff0e 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000810:	20ef      	movs	r0, #239	; 0xef
 8000812:	f7ff ff0b 	bl	800062c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000816:	202b      	movs	r0, #43	; 0x2b
 8000818:	f7ff fed4 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff05 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff02 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff feff 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800082e:	203f      	movs	r0, #63	; 0x3f
 8000830:	f7ff fefc 	bl	800062c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000834:	2034      	movs	r0, #52	; 0x34
 8000836:	f7ff fec5 	bl	80005c4 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 800083a:	20b7      	movs	r0, #183	; 0xb7
 800083c:	f7ff fec2 	bl	80005c4 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000840:	2007      	movs	r0, #7
 8000842:	f7ff fef3 	bl	800062c <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000846:	20b6      	movs	r0, #182	; 0xb6
 8000848:	f7ff febc 	bl	80005c4 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 800084c:	200a      	movs	r0, #10
 800084e:	f7ff feed 	bl	800062c <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000852:	2082      	movs	r0, #130	; 0x82
 8000854:	f7ff feea 	bl	800062c <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000858:	2027      	movs	r0, #39	; 0x27
 800085a:	f7ff fee7 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fee4 	bl	800062c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000864:	2011      	movs	r0, #17
 8000866:	f7ff fead 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f001 fca6 	bl	80021bc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000870:	2029      	movs	r0, #41	; 0x29
 8000872:	f7ff fea7 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f001 fca0 	bl	80021bc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 800087c:	202c      	movs	r0, #44	; 0x2c
 800087e:	f7ff fea1 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(5);
 8000882:	2005      	movs	r0, #5
 8000884:	f001 fc9a 	bl	80021bc <HAL_Delay>
 }
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20013914 	.word	0x20013914
 8000894:	2001396c 	.word	0x2001396c
 8000898:	20013970 	.word	0x20013970
 800089c:	20013974 	.word	0x20013974
 80008a0:	20013978 	.word	0x20013978
 80008a4:	2001397c 	.word	0x2001397c
 80008a8:	20013980 	.word	0x20013980

080008ac <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	80bb      	strh	r3, [r7, #4]
 80008ba:	4613      	mov	r3, r2
 80008bc:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	88b9      	ldrh	r1, [r7, #4]
 80008c4:	88f8      	ldrh	r0, [r7, #6]
 80008c6:	f7ff fee5 	bl	8000694 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff feaa 	bl	800062c <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fea5 	bl	800062c <ILI9341_SendData>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 80008f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80008fa:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 80008fc:	23ff      	movs	r3, #255	; 0xff
 80008fe:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <ILI9341_Fill+0x84>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d003      	beq.n	8000910 <ILI9341_Fill+0x24>
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <ILI9341_Fill+0x84>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b03      	cmp	r3, #3
 800090e:	d107      	bne.n	8000920 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000910:	f240 133f 	movw	r3, #319	; 0x13f
 8000914:	22ef      	movs	r2, #239	; 0xef
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff febb 	bl	8000694 <ILI9341_SetCursorPosition>
 800091e:	e00e      	b.n	800093e <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <ILI9341_Fill+0x84>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d003      	beq.n	8000930 <ILI9341_Fill+0x44>
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <ILI9341_Fill+0x84>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d116      	bne.n	800095e <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000930:	23ef      	movs	r3, #239	; 0xef
 8000932:	f240 123f 	movw	r2, #319	; 0x13f
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff feab 	bl	8000694 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800093e:	e00e      	b.n	800095e <ILI9341_Fill+0x72>
			n--;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3b01      	subs	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe6c 	bl	800062c <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe67 	bl	800062c <ILI9341_SendData>
	while (n) {
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1ed      	bne.n	8000940 <ILI9341_Fill+0x54>
	}
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000

08000974 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	3301      	adds	r3, #1
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	1a8a      	subs	r2, r1, r2
 8000990:	3201      	adds	r2, #1
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800099e:	d902      	bls.n	80009a6 <ILI9341_Fill_Rect+0x32>
 80009a0:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80009a4:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b298      	uxth	r0, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	b299      	uxth	r1, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f7ff fe6d 	bl	8000694 <ILI9341_SetCursorPosition>
	while (n) {
 80009ba:	e00e      	b.n	80009da <ILI9341_Fill_Rect+0x66>
			n--;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	3b01      	subs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80009c2:	8c3b      	ldrh	r3, [r7, #32]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe2e 	bl	800062c <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80009d0:	8c3b      	ldrh	r3, [r7, #32]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe29 	bl	800062c <ILI9341_SendData>
	while (n) {
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1ed      	bne.n	80009bc <ILI9341_Fill_Rect+0x48>
	}
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000a0a:	4b98      	ldr	r3, [pc, #608]	; (8000c6c <ILI9341_drawChar+0x280>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d003      	beq.n	8000a1a <ILI9341_drawChar+0x2e>
 8000a12:	4b96      	ldr	r3, [pc, #600]	; (8000c6c <ILI9341_drawChar+0x280>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d11f      	bne.n	8000a5a <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1e:	2bef      	cmp	r3, #239	; 0xef
 8000a20:	f300 811d 	bgt.w	8000c5e <ILI9341_drawChar+0x272>
 8000a24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a2c:	f280 8117 	bge.w	8000c5e <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000a30:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a34:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f340 810b 	ble.w	8000c5e <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000a48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	dc21      	bgt.n	8000a9c <ILI9341_drawChar+0xb0>
    return;
 8000a58:	e101      	b.n	8000c5e <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8000a5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a5e:	2bef      	cmp	r3, #239	; 0xef
 8000a60:	f300 80ff 	bgt.w	8000c62 <ILI9341_drawChar+0x276>
 8000a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a68:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a6c:	f280 80f9 	bge.w	8000c62 <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000a70:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a74:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f340 80ed 	ble.w	8000c62 <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000a88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f340 80e4 	ble.w	8000c62 <ILI9341_drawChar+0x276>
 8000a9a:	e000      	b.n	8000a9e <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000a9c:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000a9e:	4b74      	ldr	r3, [pc, #464]	; (8000c70 <ILI9341_drawChar+0x284>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f083 0301 	eor.w	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d005      	beq.n	8000ab8 <ILI9341_drawChar+0xcc>
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2baf      	cmp	r3, #175	; 0xaf
 8000ab0:	d902      	bls.n	8000ab8 <ILI9341_drawChar+0xcc>
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e0c9      	b.n	8000c52 <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	d102      	bne.n	8000acc <ILI9341_drawChar+0xe0>
      line = 0x0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73bb      	strb	r3, [r7, #14]
 8000aca:	e00b      	b.n	8000ae4 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8000acc:	78fa      	ldrb	r2, [r7, #3]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a65      	ldr	r2, [pc, #404]	; (8000c74 <ILI9341_drawChar+0x288>)
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	737b      	strb	r3, [r7, #13]
 8000ae8:	e0a8      	b.n	8000c3c <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d04b      	beq.n	8000b8c <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8000af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d110      	bne.n	8000b1e <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8000afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	4413      	add	r3, r2
 8000b06:	b298      	uxth	r0, r3
 8000b08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	883a      	ldrh	r2, [r7, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	f7ff fec8 	bl	80008ac <ILI9341_DrawPixel>
 8000b1c:	e085      	b.n	8000c2a <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000b1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b3a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	461c      	mov	r4, r3
 8000b46:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	441a      	add	r2, r3
 8000b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b54:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	461d      	mov	r5, r3
 8000b60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6a:	441a      	add	r2, r3
 8000b6c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b70:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b74:	fb01 f303 	mul.w	r3, r1, r3
 8000b78:	4413      	add	r3, r2
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	883b      	ldrh	r3, [r7, #0]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4613      	mov	r3, r2
 8000b82:	462a      	mov	r2, r5
 8000b84:	4621      	mov	r1, r4
 8000b86:	f7ff fef5 	bl	8000974 <ILI9341_Fill_Rect>
 8000b8a:	e04e      	b.n	8000c2a <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8000b8c:	8c3a      	ldrh	r2, [r7, #32]
 8000b8e:	883b      	ldrh	r3, [r7, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d04a      	beq.n	8000c2a <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8000b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d110      	bne.n	8000bbe <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b298      	uxth	r0, r3
 8000ba8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	8c3a      	ldrh	r2, [r7, #32]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f7ff fe78 	bl	80008ac <ILI9341_DrawPixel>
 8000bbc:	e035      	b.n	8000c2a <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000bbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000bd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bda:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	461c      	mov	r4, r3
 8000be6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bee:	441a      	add	r2, r3
 8000bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000bf8:	fb01 f303 	mul.w	r3, r1, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	461d      	mov	r5, r3
 8000c00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c0a:	441a      	add	r2, r3
 8000c0c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c10:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000c14:	fb01 f303 	mul.w	r3, r1, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	8c3b      	ldrh	r3, [r7, #32]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	462a      	mov	r2, r5
 8000c24:	4621      	mov	r1, r4
 8000c26:	f7ff fea5 	bl	8000974 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	085b      	lsrs	r3, r3, #1
 8000c2e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000c30:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	737b      	strb	r3, [r7, #13]
 8000c3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c40:	2b07      	cmp	r3, #7
 8000c42:	f77f af52 	ble.w	8000aea <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	2b05      	cmp	r3, #5
 8000c58:	f77f af31 	ble.w	8000abe <ILI9341_drawChar+0xd2>
 8000c5c:	e002      	b.n	8000c64 <ILI9341_drawChar+0x278>
    return;
 8000c5e:	bf00      	nop
 8000c60:	e000      	b.n	8000c64 <ILI9341_drawChar+0x278>
    return;
 8000c62:	bf00      	nop
    }
  }
}
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20013910 	.word	0x20013910
 8000c74:	08004c44 	.word	0x08004c44

08000c78 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	4608      	mov	r0, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	4603      	mov	r3, r0
 8000c88:	817b      	strh	r3, [r7, #10]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	813b      	strh	r3, [r7, #8]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	0052      	lsls	r2, r2, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	82fb      	strh	r3, [r7, #22]
 8000ca8:	e01a      	b.n	8000ce0 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000caa:	8abb      	ldrh	r3, [r7, #20]
 8000cac:	8afa      	ldrh	r2, [r7, #22]
 8000cae:	fb12 f303 	smulbb	r3, r2, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	897b      	ldrh	r3, [r7, #10]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b218      	sxth	r0, r3
 8000cbc:	8afb      	ldrh	r3, [r7, #22]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	88fc      	ldrh	r4, [r7, #6]
 8000cc6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000cca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	4623      	mov	r3, r4
 8000cd6:	f7ff fe89 	bl	80009ec <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000cda:	8afb      	ldrh	r3, [r7, #22]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	82fb      	strh	r3, [r7, #22]
 8000ce0:	8afb      	ldrh	r3, [r7, #22]
 8000ce2:	2b27      	cmp	r3, #39	; 0x27
 8000ce4:	d805      	bhi.n	8000cf2 <ILI9341_printText+0x7a>
 8000ce6:	8afb      	ldrh	r3, [r7, #22]
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1db      	bne.n	8000caa <ILI9341_printText+0x32>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd90      	pop	{r4, r7, pc}

08000cfa <ILI9341_printImage>:


//12. Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size)
{
 8000cfa:	b590      	push	{r4, r7, lr}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4604      	mov	r4, r0
 8000d02:	4608      	mov	r0, r1
 8000d04:	4611      	mov	r1, r2
 8000d06:	461a      	mov	r2, r3
 8000d08:	4623      	mov	r3, r4
 8000d0a:	80fb      	strh	r3, [r7, #6]
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	803b      	strh	r3, [r7, #0]
	uint32_t n = size;
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	60bb      	str	r3, [r7, #8]
	ILI9341_SetCursorPosition(x, y, w+x-1, h+y-1);
 8000d1c:	887a      	ldrh	r2, [r7, #2]
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	3b01      	subs	r3, #1
 8000d26:	b29c      	uxth	r4, r3
 8000d28:	883a      	ldrh	r2, [r7, #0]
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	3b01      	subs	r3, #1
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	88b9      	ldrh	r1, [r7, #4]
 8000d36:	88f8      	ldrh	r0, [r7, #6]
 8000d38:	4622      	mov	r2, r4
 8000d3a:	f7ff fcab 	bl	8000694 <ILI9341_SetCursorPosition>
	for(uint32_t i=0; i<n ; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	e009      	b.n	8000d58 <ILI9341_printImage+0x5e>
	{
		ILI9341_SendData(data[i]);
 8000d44:	6a3a      	ldr	r2, [r7, #32]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fc6d 	bl	800062c <ILI9341_SendData>
	for(uint32_t i=0; i<n ; i++)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3f1      	bcc.n	8000d44 <ILI9341_printImage+0x4a>
	}
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
	...

08000d6c <ILI9341_setRotation>:

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d832      	bhi.n	8000de4 <ILI9341_setRotation+0x78>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <ILI9341_setRotation+0x18>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000d95 	.word	0x08000d95
 8000d88:	08000da9 	.word	0x08000da9
 8000d8c:	08000dbd 	.word	0x08000dbd
 8000d90:	08000dd1 	.word	0x08000dd1
	{
		case 1:
			rotationNum = 1;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <ILI9341_setRotation+0x94>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000d9a:	2036      	movs	r0, #54	; 0x36
 8000d9c:	f7ff fc12 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000da0:	2088      	movs	r0, #136	; 0x88
 8000da2:	f7ff fc43 	bl	800062c <ILI9341_SendData>
			break;
 8000da6:	e027      	b.n	8000df8 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <ILI9341_setRotation+0x94>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000dae:	2036      	movs	r0, #54	; 0x36
 8000db0:	f7ff fc08 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000db4:	2028      	movs	r0, #40	; 0x28
 8000db6:	f7ff fc39 	bl	800062c <ILI9341_SendData>
			break;
 8000dba:	e01d      	b.n	8000df8 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <ILI9341_setRotation+0x94>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000dc2:	2036      	movs	r0, #54	; 0x36
 8000dc4:	f7ff fbfe 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000dc8:	2048      	movs	r0, #72	; 0x48
 8000dca:	f7ff fc2f 	bl	800062c <ILI9341_SendData>
			break;
 8000dce:	e013      	b.n	8000df8 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <ILI9341_setRotation+0x94>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000dd6:	2036      	movs	r0, #54	; 0x36
 8000dd8:	f7ff fbf4 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000ddc:	20e8      	movs	r0, #232	; 0xe8
 8000dde:	f7ff fc25 	bl	800062c <ILI9341_SendData>
			break;
 8000de2:	e009      	b.n	8000df8 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <ILI9341_setRotation+0x94>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000dea:	2036      	movs	r0, #54	; 0x36
 8000dec:	f7ff fbea 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000df0:	2088      	movs	r0, #136	; 0x88
 8000df2:	f7ff fc1b 	bl	800062c <ILI9341_SendData>
			break;
 8000df6:	bf00      	nop
	}
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000

08000e04 <fclamp>:
static uint32_t ADC_ChannelX;
static uint32_t ADC_ChannelY;
static LCD_TouchState m_touch_state = LCD_TOUCH_IDLE;
static LCD_TouchPoint* m_last_point_ref = NULL;

static float fclamp(float x, float l, float u) {
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e0e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e12:	ed87 1a01 	vstr	s2, [r7, #4]
	return x < l ? l : (x > u ? u : x);
 8000e16:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	d501      	bpl.n	8000e2c <fclamp+0x28>
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	e00b      	b.n	8000e44 <fclamp+0x40>
 8000e2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	dd01      	ble.n	8000e42 <fclamp+0x3e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	e000      	b.n	8000e44 <fclamp+0x40>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	ee07 3a90 	vmov	s15, r3
}
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <adc_norm_x>:

static float adc_norm_x(uint32_t x) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	return (x - TOUCH_ADC_X_MIN) * ADC_UNIT_PX_X;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000e84 <adc_norm_x+0x2c>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	39a9200b 	.word	0x39a9200b

08000e88 <adc_norm_y>:

static float adc_norm_y(uint32_t y) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	return (y - TOUCH_ADC_Y_MIN) * ADC_UNIT_PX_Y;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000eb4 <adc_norm_y+0x2c>
 8000ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	3996a850 	.word	0x3996a850

08000eb8 <ADC_GetValue>:

static uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig;

	sConfig.Channel = channel;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f001 fb77 	bl	80025c8 <HAL_ADC_ConfigChannel>

	// start conversion
	HAL_ADC_Start(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f001 f9d6 	bl	800228c <HAL_ADC_Start>

	// wait until finish
	HAL_ADC_PollForConversion(hadc, 100);
 8000ee0:	2164      	movs	r1, #100	; 0x64
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f001 fad7 	bl	8002496 <HAL_ADC_PollForConversion>

	uint32_t value = HAL_ADC_GetValue(hadc);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 fb5f 	bl	80025ac <HAL_ADC_GetValue>
 8000eee:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f001 fa9d 	bl	8002430 <HAL_ADC_Stop>

	return value;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <GPIO_SetPinMode>:

static void GPIO_SetPinMode(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		uint32_t GPIO_PinMode) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f0e:	897b      	ldrh	r3, [r7, #10]
 8000f10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_PinMode;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f001 feed 	bl	8002d04 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <ADC_GPIOA_init>:

static void ADC_GPIOA_init(uint16_t GPIO_Pin) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <ADC_GPIOA_init+0x2c>)
 8000f52:	f001 fed7 	bl	8002d04 <HAL_GPIO_Init>
}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020000 	.word	0x40020000

08000f64 <touchX>:

static uint32_t touchX() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	GPIO_SetPinMode(GPIOA, GPIO_PIN_1, GPIO_MODE_OUTPUT_PP);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <touchX+0x58>)
 8000f6e:	f7ff ffc7 	bl	8000f00 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_OUTPUT_PP);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f78:	4810      	ldr	r0, [pc, #64]	; (8000fbc <touchX+0x58>)
 8000f7a:	f7ff ffc1 	bl	8000f00 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_INPUT);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <touchX+0x5c>)
 8000f86:	f7ff ffbb 	bl	8000f00 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_4);
 8000f8a:	2010      	movs	r0, #16
 8000f8c:	f7ff ffd2 	bl	8000f34 <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2102      	movs	r1, #2
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <touchX+0x58>)
 8000f96:	f002 f861 	bl	800305c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <touchX+0x58>)
 8000fa2:	f002 f85b 	bl	800305c <HAL_GPIO_WritePin>

	return ADC_GetValue(hadcX, ADC_ChannelX);
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <touchX+0x60>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <touchX+0x64>)
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff81 	bl	8000eb8 <ADC_GetValue>
 8000fb6:	4603      	mov	r3, r0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	20013984 	.word	0x20013984
 8000fc8:	2001398c 	.word	0x2001398c

08000fcc <touchY>:

static uint32_t touchY() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f001 fe6d 	bl	8002cb2 <HAL_NVIC_DisableIRQ>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_OUTPUT_PP);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <touchY+0x78>)
 8000fe0:	f7ff ff8e 	bl	8000f00 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_4, GPIO_MODE_OUTPUT_PP);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	4817      	ldr	r0, [pc, #92]	; (8001048 <touchY+0x7c>)
 8000fea:	f7ff ff89 	bl	8000f00 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_INPUT);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <touchY+0x7c>)
 8000ff6:	f7ff ff83 	bl	8000f00 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_1);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f7ff ff9a 	bl	8000f34 <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	480f      	ldr	r0, [pc, #60]	; (8001044 <touchY+0x78>)
 8001008:	f002 f828 	bl	800305c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <touchY+0x7c>)
 8001012:	f002 f823 	bl	800305c <HAL_GPIO_WritePin>

	uint32_t adc_y = ADC_GetValue(hadcY, ADC_ChannelY);
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <touchY+0x80>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <touchY+0x84>)
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff49 	bl	8000eb8 <ADC_GetValue>
 8001026:	6078      	str	r0, [r7, #4]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <touchY+0x88>)
 800102a:	2210      	movs	r2, #16
 800102c:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 800102e:	200a      	movs	r0, #10
 8001030:	f001 fe59 	bl	8002ce6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001034:	200a      	movs	r0, #10
 8001036:	f001 fe2e 	bl	8002c96 <HAL_NVIC_EnableIRQ>

	return adc_y;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400
 8001048:	40020000 	.word	0x40020000
 800104c:	20013988 	.word	0x20013988
 8001050:	20013990 	.word	0x20013990
 8001054:	40013c00 	.word	0x40013c00

08001058 <LCD_Touch_Init>:

/**
 * Saves ADC handles references to measure touch screen positions.
 */
void LCD_Touch_Init(ADC_HandleTypeDef* aHadcX, uint32_t aADC_ChannelX,
		ADC_HandleTypeDef* aHadcY, uint32_t aADC_ChannelY) {
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
	hadcX = aHadcX;
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <LCD_Touch_Init+0x34>)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6013      	str	r3, [r2, #0]
	hadcY = aHadcY;
 800106c:	4a08      	ldr	r2, [pc, #32]	; (8001090 <LCD_Touch_Init+0x38>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
	ADC_ChannelX = aADC_ChannelX;
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <LCD_Touch_Init+0x3c>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	6013      	str	r3, [r2, #0]
	ADC_ChannelY = aADC_ChannelY;
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <LCD_Touch_Init+0x40>)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20013984 	.word	0x20013984
 8001090:	20013988 	.word	0x20013988
 8001094:	2001398c 	.word	0x2001398c
 8001098:	20013990 	.word	0x20013990

0800109c <GPIO_DrawMode>:

static void GPIO_DrawMode() {
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE()
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <GPIO_DrawMode+0x7c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <GPIO_DrawMode+0x7c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <GPIO_DrawMode+0x7c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOB_CLK_ENABLE()
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <GPIO_DrawMode+0x7c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <GPIO_DrawMode+0x7c>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <GPIO_DrawMode+0x7c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
	;
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80010da:	200a      	movs	r0, #10
 80010dc:	f001 fde9 	bl	8002cb2 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]

	/*Configure GPIO pins: PA1 PA4 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_8;
 80010ec:	f44f 7389 	mov.w	r3, #274	; 0x112
 80010f0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <GPIO_DrawMode+0x80>)
 80010fa:	f001 fe03 	bl	8002d04 <HAL_GPIO_Init>

	/*Configure GPIO data pin PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001102:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <GPIO_DrawMode+0x84>)
 800110c:	f001 fdfa 	bl	8002d04 <HAL_GPIO_Init>
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400

08001124 <GPIO_InterruptMode>:


// TOUCH mode GPIO setup
static void GPIO_InterruptMode() {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE()
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <GPIO_InterruptMode+0xa8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a26      	ldr	r2, [pc, #152]	; (80011cc <GPIO_InterruptMode+0xa8>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <GPIO_InterruptMode+0xa8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
	;

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]

	/* X- PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800114a:	2302      	movs	r3, #2
 800114c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	481d      	ldr	r0, [pc, #116]	; (80011d0 <GPIO_InterruptMode+0xac>)
 800115c:	f001 fdd2 	bl	8002d04 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	481a      	ldr	r0, [pc, #104]	; (80011d0 <GPIO_InterruptMode+0xac>)
 8001166:	f001 ff79 	bl	800305c <HAL_GPIO_WritePin>

	/* X+ PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <GPIO_InterruptMode+0xac>)
 800117e:	f001 fdc1 	bl	8002d04 <HAL_GPIO_Init>

	/* Y- PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001186:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <GPIO_InterruptMode+0xb0>)
 8001196:	f001 fdb5 	bl	8002d04 <HAL_GPIO_Init>

	/* Y+ PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800119a:	2310      	movs	r3, #16
 800119c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800119e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4808      	ldr	r0, [pc, #32]	; (80011d0 <GPIO_InterruptMode+0xac>)
 80011ae:	f001 fda9 	bl	8002d04 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	200a      	movs	r0, #10
 80011b8:	f001 fd51 	bl	8002c5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011bc:	200a      	movs	r0, #10
 80011be:	f001 fd6a 	bl	8002c96 <HAL_NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400

080011d8 <LCD_SetMode>:
 * Set LCD's mode to either DRAW or TOUCH.
 *
 * Set LCD_Mode to DRAW to draw or print text on LCD,
 * then switch back to TOUCH, if you want to receive touches.
 */
HAL_StatusTypeDef LCD_SetMode(LCD_Mode mode) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <LCD_SetMode+0x1c>
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <LCD_SetMode+0x24>
	case LCD_MODE_TOUCH:
		GPIO_InterruptMode();
 80011ec:	f7ff ff9a 	bl	8001124 <GPIO_InterruptMode>
		return HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e004      	b.n	80011fe <LCD_SetMode+0x26>

	case LCD_MODE_DRAW:
		GPIO_DrawMode();
 80011f4:	f7ff ff52 	bl	800109c <GPIO_DrawMode>
		return HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e000      	b.n	80011fe <LCD_SetMode+0x26>

	default:
		return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
	}
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <LCD_Touch_Read>:

/*
 * Reads raw touch x- and y-positions and, if successful,
 * stores them in the LCD_TouchPoint point.
 */
LCD_TouchReadState LCD_Touch_Read(LCD_TouchPoint* p) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	if (hadcX == NULL || hadcY == NULL) {
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <LCD_Touch_Read+0xe8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <LCD_Touch_Read+0x18>
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <LCD_Touch_Read+0xec>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <LCD_Touch_Read+0x1c>
		return LCD_TOUCH_READ_NOT_INITIALIZED;
 8001220:	2301      	movs	r3, #1
 8001222:	e061      	b.n	80012e8 <LCD_Touch_Read+0xe0>
	}
	if (m_touch_state == LCD_TOUCH_IDLE) {
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <LCD_Touch_Read+0xf0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <LCD_Touch_Read+0x28>
		return LCD_TOUCH_READ_NO_TOUCH;
 800122c:	2302      	movs	r3, #2
 800122e:	e05b      	b.n	80012e8 <LCD_Touch_Read+0xe0>
	}
	uint32_t x = touchX();
 8001230:	f7ff fe98 	bl	8000f64 <touchX>
 8001234:	60f8      	str	r0, [r7, #12]

	if (x > ADC_NO_TOUCH_X_OUTSIDE) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f640 729b 	movw	r2, #3995	; 0xf9b
 800123c:	4293      	cmp	r3, r2
 800123e:	d901      	bls.n	8001244 <LCD_Touch_Read+0x3c>
		return LCD_TOUCH_READ_OUTSIDE;
 8001240:	2303      	movs	r3, #3
 8001242:	e051      	b.n	80012e8 <LCD_Touch_Read+0xe0>
	}

	uint32_t y = touchY();
 8001244:	f7ff fec2 	bl	8000fcc <touchY>
 8001248:	60b8      	str	r0, [r7, #8]
	m_touch_state = LCD_TOUCH_MOVE;
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <LCD_Touch_Read+0xf0>)
 800124c:	2202      	movs	r2, #2
 800124e:	701a      	strb	r2, [r3, #0]
	p->x = (int16_t) ((1 - fclamp(adc_norm_x(x), 0.0f, 1.0f)) * TFTWIDTH);
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff fe01 	bl	8000e58 <adc_norm_x>
 8001256:	eef0 7a40 	vmov.f32	s15, s0
 800125a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800125e:	eddf 0a27 	vldr	s1, [pc, #156]	; 80012fc <LCD_Touch_Read+0xf4>
 8001262:	eeb0 0a67 	vmov.f32	s0, s15
 8001266:	f7ff fdcd 	bl	8000e04 <fclamp>
 800126a:	eef0 7a40 	vmov.f32	s15, s0
 800126e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001276:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001300 <LCD_Touch_Read+0xf8>
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001282:	ee17 3a90 	vmov	r3, s15
 8001286:	b21a      	sxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	801a      	strh	r2, [r3, #0]
	p->y = (int16_t) ((1 - fclamp(adc_norm_y(y), 0.0f, 1.0f)) * TFTHEIGHT);
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff fdfb 	bl	8000e88 <adc_norm_y>
 8001292:	eef0 7a40 	vmov.f32	s15, s0
 8001296:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800129a:	eddf 0a18 	vldr	s1, [pc, #96]	; 80012fc <LCD_Touch_Read+0xf4>
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f7ff fdaf 	bl	8000e04 <fclamp>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001304 <LCD_Touch_Read+0xfc>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012be:	ee17 3a90 	vmov	r3, s15
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	805a      	strh	r2, [r3, #2]
	p->tick = HAL_GetTick();
 80012c8:	f000 ff6c 	bl	80021a4 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
	p->state = m_touch_state;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <LCD_Touch_Read+0xf0>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	721a      	strb	r2, [r3, #8]

	m_last_point_ref = p;
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LCD_Touch_Read+0x100>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6013      	str	r3, [r2, #0]
	m_touch_state = LCD_TOUCH_IDLE;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <LCD_Touch_Read+0xf0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

	return LCD_TOUCH_READ_SUCCESS;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20013984 	.word	0x20013984
 80012f4:	20013988 	.word	0x20013988
 80012f8:	20013994 	.word	0x20013994
 80012fc:	00000000 	.word	0x00000000
 8001300:	43700000 	.word	0x43700000
 8001304:	43a00000 	.word	0x43a00000
 8001308:	20013998 	.word	0x20013998

0800130c <LCD_Touch_OnDown>:

/*
 * Indicates the start of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnDown() {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	if (m_touch_state == LCD_TOUCH_IDLE) {
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <LCD_Touch_OnDown+0x1c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <LCD_Touch_OnDown+0x12>
		m_touch_state = LCD_TOUCH_DOWN;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <LCD_Touch_OnDown+0x1c>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
	}
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20013994 	.word	0x20013994

0800132c <LCD_Touch_OnUp>:

/*
 * Indicates the finish of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnUp() {
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	m_touch_state = LCD_TOUCH_IDLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <LCD_Touch_OnUp+0x24>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]

	if (m_last_point_ref != NULL) {
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <LCD_Touch_OnUp+0x28>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <LCD_Touch_OnUp+0x1a>
		// Mark the last read touch point as TOUCH_UP.
		// Note that it changes the point state that the user specified
		// as an argument to LCD_Touch_Read function.
		m_last_point_ref->state = LCD_TOUCH_UP;
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <LCD_Touch_OnUp+0x28>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2203      	movs	r2, #3
 8001344:	721a      	strb	r2, [r3, #8]
	}
	//LCD_Touch_Draw_OnUp();
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	20013994 	.word	0x20013994
 8001354:	20013998 	.word	0x20013998

08001358 <LCD_Touch_Belong_Interval>:

/*
 * Return TRUE if the point belong to the interval
 */
int LCD_Touch_Belong_Interval(LCD_TouchPoint* p,int16_t xmin,int16_t xmax,int16_t ymin,int16_t ymax)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	4608      	mov	r0, r1
 8001362:	4611      	mov	r1, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4603      	mov	r3, r0
 8001368:	817b      	strh	r3, [r7, #10]
 800136a:	460b      	mov	r3, r1
 800136c:	813b      	strh	r3, [r7, #8]
 800136e:	4613      	mov	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
	 if(p->x>xmin && p->x<xmax && p->y>ymin && p->y<ymax) return 1;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800137c:	429a      	cmp	r2, r3
 800137e:	da16      	bge.n	80013ae <LCD_Touch_Belong_Interval+0x56>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	dd0f      	ble.n	80013ae <LCD_Touch_Belong_Interval+0x56>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001394:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001398:	429a      	cmp	r2, r3
 800139a:	da08      	bge.n	80013ae <LCD_Touch_Belong_Interval+0x56>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013a2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dd01      	ble.n	80013ae <LCD_Touch_Belong_Interval+0x56>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <LCD_Touch_Belong_Interval+0x58>
	 return 0;
 80013ae:	2300      	movs	r3, #0

}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LCD_Touch_Draw_LastPoint_Bottom>:

/*
 * Draw the last touch point on the bottom
 */
void LCD_Touch_Draw_LastPoint_Bottom(const LCD_TouchPoint* p)
{
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
	char TextPos[] = "Last touch point X=000  Y=000";
 80013c4:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <LCD_Touch_Draw_LastPoint_Bottom+0xec>)
 80013c6:	f107 0410 	add.w	r4, r7, #16
 80013ca:	461d      	mov	r5, r3
 80013cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013d4:	c407      	stmia	r4!, {r0, r1, r2}
 80013d6:	8023      	strh	r3, [r4, #0]
	char PosX[3];
	char PosY[3];
	LCD_SetMode(LCD_MODE_DRAW);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fefd 	bl	80011d8 <LCD_SetMode>
	ILI9341_printText("touche ", 60 ,60, COLOR_WHITE, COLOR_GREEN, 1);
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ec:	223c      	movs	r2, #60	; 0x3c
 80013ee:	213c      	movs	r1, #60	; 0x3c
 80013f0:	482e      	ldr	r0, [pc, #184]	; (80014ac <LCD_Touch_Draw_LastPoint_Bottom+0xf0>)
 80013f2:	f7ff fc41 	bl	8000c78 <ILI9341_printText>
	strcpy(TextPos,"Last touch point X=");
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <LCD_Touch_Draw_LastPoint_Bottom+0xf4>)
 80013fc:	461c      	mov	r4, r3
 80013fe:	4615      	mov	r5, r2
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	6023      	str	r3, [r4, #0]
	sprintf(PosX,"%d",p->x);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	461a      	mov	r2, r3
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4927      	ldr	r1, [pc, #156]	; (80014b4 <LCD_Touch_Draw_LastPoint_Bottom+0xf8>)
 8001416:	4618      	mov	r0, r3
 8001418:	f002 ff32 	bl	8004280 <siprintf>
	strncat(TextPos,PosX,sizeof(int));
 800141c:	f107 010c 	add.w	r1, r7, #12
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	2204      	movs	r2, #4
 8001426:	4618      	mov	r0, r3
 8001428:	f002 ff4a 	bl	80042c0 <strncat>
	strncat(TextPos," Y=",3);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe feed 	bl	8000210 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4413      	add	r3, r2
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <LCD_Touch_Draw_LastPoint_Bottom+0xfc>)
 8001442:	6810      	ldr	r0, [r2, #0]
 8001444:	6018      	str	r0, [r3, #0]
	sprintf(PosY,"%d",p->y);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800144c:	461a      	mov	r2, r3
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4918      	ldr	r1, [pc, #96]	; (80014b4 <LCD_Touch_Draw_LastPoint_Bottom+0xf8>)
 8001454:	4618      	mov	r0, r3
 8001456:	f002 ff13 	bl	8004280 <siprintf>
	strncat(TextPos,PosY,sizeof(PosY));
 800145a:	f107 0108 	add.w	r1, r7, #8
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	2203      	movs	r2, #3
 8001464:	4618      	mov	r0, r3
 8001466:	f002 ff2b 	bl	80042c0 <strncat>
	ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 800146a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	23eb      	movs	r3, #235	; 0xeb
 8001472:	f240 123b 	movw	r2, #315	; 0x13b
 8001476:	21d7      	movs	r1, #215	; 0xd7
 8001478:	2005      	movs	r0, #5
 800147a:	f7ff fa7b 	bl	8000974 <ILI9341_Fill_Rect>
	ILI9341_printText(TextPos, 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 800147e:	f107 0010 	add.w	r0, r7, #16
 8001482:	2301      	movs	r3, #1
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001490:	22dd      	movs	r2, #221	; 0xdd
 8001492:	2146      	movs	r1, #70	; 0x46
 8001494:	f7ff fbf0 	bl	8000c78 <ILI9341_printText>
	LCD_SetMode(LCD_MODE_TOUCH);
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff fe9d 	bl	80011d8 <LCD_SetMode>
}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	; 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08004ba0 	.word	0x08004ba0
 80014ac:	08004b7c 	.word	0x08004b7c
 80014b0:	08004b84 	.word	0x08004b84
 80014b4:	08004b98 	.word	0x08004b98
 80014b8:	08004b9c 	.word	0x08004b9c

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b092      	sub	sp, #72	; 0x48
 80014c0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int Testcolor=0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f000 fe07 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f9d9 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 fb59 	bl	8001b84 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014d2:	f000 faeb 	bl	8001aac <MX_SPI1_Init>
  MX_SPI2_Init();
 80014d6:	f000 fb1f 	bl	8001b18 <MX_SPI2_Init>
  MX_ADC1_Init();
 80014da:	f000 fa43 	bl	8001964 <MX_ADC1_Init>
  MX_ADC2_Init();
 80014de:	f000 fa93 	bl	8001a08 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	4bd0      	ldr	r3, [pc, #832]	; (8001828 <main+0x36c>)
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4bce      	ldr	r3, [pc, #824]	; (800182c <main+0x370>)
 80014f2:	2240      	movs	r2, #64	; 0x40
 80014f4:	49ce      	ldr	r1, [pc, #824]	; (8001830 <main+0x374>)
 80014f6:	48cf      	ldr	r0, [pc, #828]	; (8001834 <main+0x378>)
 80014f8:	f7ff f918 	bl	800072c <ILI9341_Init>
	ILI9341_setRotation(2);
 80014fc:	2002      	movs	r0, #2
 80014fe:	f7ff fc35 	bl	8000d6c <ILI9341_setRotation>
	ILI9341_Fill(COLOR_NAVY);
 8001502:	200f      	movs	r0, #15
 8001504:	f7ff f9f2 	bl	80008ec <ILI9341_Fill>

	//TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
	//TSC2046_Calibrate();
	ILI9341_Fill(COLOR_WHITE);
 8001508:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800150c:	f7ff f9ee 	bl	80008ec <ILI9341_Fill>

		ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 8001510:	231f      	movs	r3, #31
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	23b4      	movs	r3, #180	; 0xb4
 8001516:	228c      	movs	r2, #140	; 0x8c
 8001518:	218c      	movs	r1, #140	; 0x8c
 800151a:	2014      	movs	r0, #20
 800151c:	f7ff fa2a 	bl	8000974 <ILI9341_Fill_Rect>
		ILI9341_printText("LED ON", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 8001520:	2301      	movs	r3, #1
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	231f      	movs	r3, #31
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152c:	229b      	movs	r2, #155	; 0x9b
 800152e:	2137      	movs	r1, #55	; 0x37
 8001530:	48c1      	ldr	r0, [pc, #772]	; (8001838 <main+0x37c>)
 8001532:	f7ff fba1 	bl	8000c78 <ILI9341_printText>
		ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8001536:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	23b4      	movs	r3, #180	; 0xb4
 800153e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001542:	218c      	movs	r1, #140	; 0x8c
 8001544:	20b4      	movs	r0, #180	; 0xb4
 8001546:	f7ff fa15 	bl	8000974 <ILI9341_Fill_Rect>
		ILI9341_printText("LED OFF", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 800154a:	2301      	movs	r3, #1
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001558:	229b      	movs	r2, #155	; 0x9b
 800155a:	21d7      	movs	r1, #215	; 0xd7
 800155c:	48b7      	ldr	r0, [pc, #732]	; (800183c <main+0x380>)
 800155e:	f7ff fb8b 	bl	8000c78 <ILI9341_printText>

	ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 8001562:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	235a      	movs	r3, #90	; 0x5a
 800156a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800156e:	211e      	movs	r1, #30
 8001570:	203c      	movs	r0, #60	; 0x3c
 8001572:	f7ff f9ff 	bl	8000974 <ILI9341_Fill_Rect>


	ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 8001576:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	23eb      	movs	r3, #235	; 0xeb
 800157e:	f240 123b 	movw	r2, #315	; 0x13b
 8001582:	21d7      	movs	r1, #215	; 0xd7
 8001584:	2005      	movs	r0, #5
 8001586:	f7ff f9f5 	bl	8000974 <ILI9341_Fill_Rect>
	ILI9341_printText("Last touch point X=000  Y=000", 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 800158a:	2301      	movs	r3, #1
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001598:	22dd      	movs	r2, #221	; 0xdd
 800159a:	2146      	movs	r1, #70	; 0x46
 800159c:	48a8      	ldr	r0, [pc, #672]	; (8001840 <main+0x384>)
 800159e:	f7ff fb6b 	bl	8000c78 <ILI9341_printText>
	ILI9341_Fill_Rect(5, 215, 5, 25, COLOR_GREEN);
 80015a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2319      	movs	r3, #25
 80015aa:	2205      	movs	r2, #5
 80015ac:	21d7      	movs	r1, #215	; 0xd7
 80015ae:	2005      	movs	r0, #5
 80015b0:	f7ff f9e0 	bl	8000974 <ILI9341_Fill_Rect>
	ILI9341_printText("Max, Leo, Margot, time to leave ", 60 ,5, COLOR_WHITE, COLOR_BLACK, 1);
 80015b4:	2301      	movs	r3, #1
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c0:	2205      	movs	r2, #5
 80015c2:	213c      	movs	r1, #60	; 0x3c
 80015c4:	489f      	ldr	r0, [pc, #636]	; (8001844 <main+0x388>)
 80015c6:	f7ff fb57 	bl	8000c78 <ILI9341_printText>
	LCD_Touch_Init(&hadc2, ADC_CHANNEL_4, &hadc1, ADC_CHANNEL_1);
 80015ca:	2301      	movs	r3, #1
 80015cc:	4a9e      	ldr	r2, [pc, #632]	; (8001848 <main+0x38c>)
 80015ce:	2104      	movs	r1, #4
 80015d0:	489e      	ldr	r0, [pc, #632]	; (800184c <main+0x390>)
 80015d2:	f7ff fd41 	bl	8001058 <LCD_Touch_Init>
		LCD_SetMode(LCD_MODE_TOUCH);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fdfe 	bl	80011d8 <LCD_SetMode>
		LCD_TouchPoint p;
		p.x=0;
 80015dc:	2300      	movs	r3, #0
 80015de:	853b      	strh	r3, [r7, #40]	; 0x28
		p.y=0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	857b      	strh	r3, [r7, #42]	; 0x2a
		p.state=LCD_TOUCH_IDLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		char TextPos[] = "Last touch point X=000  Y=000";
 80015ea:	4b95      	ldr	r3, [pc, #596]	; (8001840 <main+0x384>)
 80015ec:	f107 0408 	add.w	r4, r7, #8
 80015f0:	461d      	mov	r5, r3
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015fa:	c407      	stmia	r4!, {r0, r1, r2}
 80015fc:	8023      	strh	r3, [r4, #0]
	  /*** main test 2 draw last point END ***/

  	  /*** main test 3 draw last point and touch BEG***/


		  if(LCD_Touch_Read(&p)==LCD_TOUCH_READ_SUCCESS)
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe00 	bl	8001208 <LCD_Touch_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 80fa 	bne.w	8001804 <main+0x348>
		  {
			  LCD_Touch_Draw_LastPoint_Bottom(&p);
 8001610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fed1 	bl	80013bc <LCD_Touch_Draw_LastPoint_Bottom>

			  if(LCD_Touch_Belong_Interval(&p,140,180,180,300))  // carré LED ON
 800161a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800161e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	23b4      	movs	r3, #180	; 0xb4
 8001626:	22b4      	movs	r2, #180	; 0xb4
 8001628:	218c      	movs	r1, #140	; 0x8c
 800162a:	f7ff fe95 	bl	8001358 <LCD_Touch_Belong_Interval>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d02e      	beq.n	8001692 <main+0x1d6>
			 			  {

			 					  LCD_SetMode(LCD_MODE_DRAW);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fdcf 	bl	80011d8 <LCD_SetMode>
			 					  ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 800163a:	231f      	movs	r3, #31
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	23b4      	movs	r3, #180	; 0xb4
 8001640:	228c      	movs	r2, #140	; 0x8c
 8001642:	218c      	movs	r1, #140	; 0x8c
 8001644:	2014      	movs	r0, #20
 8001646:	f7ff f995 	bl	8000974 <ILI9341_Fill_Rect>
			 					  ILI9341_printText("LED ON 0", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 800164a:	2301      	movs	r3, #1
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	231f      	movs	r3, #31
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001656:	229b      	movs	r2, #155	; 0x9b
 8001658:	2137      	movs	r1, #55	; 0x37
 800165a:	487d      	ldr	r0, [pc, #500]	; (8001850 <main+0x394>)
 800165c:	f7ff fb0c 	bl	8000c78 <ILI9341_printText>
			 					  ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8001660:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	23b4      	movs	r3, #180	; 0xb4
 8001668:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800166c:	218c      	movs	r1, #140	; 0x8c
 800166e:	20b4      	movs	r0, #180	; 0xb4
 8001670:	f7ff f980 	bl	8000974 <ILI9341_Fill_Rect>
			 					  ILI9341_printText("LED OFF 0", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 8001674:	2301      	movs	r3, #1
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001682:	229b      	movs	r2, #155	; 0x9b
 8001684:	21d7      	movs	r1, #215	; 0xd7
 8001686:	4873      	ldr	r0, [pc, #460]	; (8001854 <main+0x398>)
 8001688:	f7ff faf6 	bl	8000c78 <ILI9341_printText>
			 					  LCD_SetMode(LCD_MODE_TOUCH);
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff fda3 	bl	80011d8 <LCD_SetMode>
			 			  }

			 if(LCD_Touch_Belong_Interval(&p,140,180,30,140))  // carré LED OFF
 8001692:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001696:	238c      	movs	r3, #140	; 0x8c
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	231e      	movs	r3, #30
 800169c:	22b4      	movs	r2, #180	; 0xb4
 800169e:	218c      	movs	r1, #140	; 0x8c
 80016a0:	f7ff fe5a 	bl	8001358 <LCD_Touch_Belong_Interval>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d02e      	beq.n	8001708 <main+0x24c>
			 			{
			 					 LCD_SetMode(LCD_MODE_DRAW);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff fd94 	bl	80011d8 <LCD_SetMode>
			 					 ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_RED);
 80016b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	23b4      	movs	r3, #180	; 0xb4
 80016b8:	228c      	movs	r2, #140	; 0x8c
 80016ba:	218c      	movs	r1, #140	; 0x8c
 80016bc:	2014      	movs	r0, #20
 80016be:	f7ff f959 	bl	8000974 <ILI9341_Fill_Rect>
			 					 ILI9341_printText("LED ON 1", 55,  155, COLOR_WHITE, COLOR_RED, 1);
 80016c2:	2301      	movs	r3, #1
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d0:	229b      	movs	r2, #155	; 0x9b
 80016d2:	2137      	movs	r1, #55	; 0x37
 80016d4:	4860      	ldr	r0, [pc, #384]	; (8001858 <main+0x39c>)
 80016d6:	f7ff facf 	bl	8000c78 <ILI9341_printText>
			 					 ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_BLUE);
 80016da:	231f      	movs	r3, #31
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	23b4      	movs	r3, #180	; 0xb4
 80016e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016e4:	218c      	movs	r1, #140	; 0x8c
 80016e6:	20b4      	movs	r0, #180	; 0xb4
 80016e8:	f7ff f944 	bl	8000974 <ILI9341_Fill_Rect>
			 					 ILI9341_printText("LED OFF 1", 215,  155, COLOR_WHITE, COLOR_BLUE, 1);
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	231f      	movs	r3, #31
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f8:	229b      	movs	r2, #155	; 0x9b
 80016fa:	21d7      	movs	r1, #215	; 0xd7
 80016fc:	4857      	ldr	r0, [pc, #348]	; (800185c <main+0x3a0>)
 80016fe:	f7ff fabb 	bl	8000c78 <ILI9341_printText>
			 					 LCD_SetMode(LCD_MODE_TOUCH);
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff fd68 	bl	80011d8 <LCD_SetMode>
			 			}

			 if(LCD_Touch_Belong_Interval(&p,50,80,60,180))  // rectangle
 8001708:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800170c:	23b4      	movs	r3, #180	; 0xb4
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	233c      	movs	r3, #60	; 0x3c
 8001712:	2250      	movs	r2, #80	; 0x50
 8001714:	2132      	movs	r1, #50	; 0x32
 8001716:	f7ff fe1f 	bl	8001358 <LCD_Touch_Belong_Interval>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	f43f af6e 	beq.w	80015fe <main+0x142>
			 {
				 ILI9341_printImage(60,30, 100,100,Banane1, sizeof(Banane1));
 8001722:	f242 7310 	movw	r3, #10000	; 0x2710
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <main+0x3a4>)
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	2264      	movs	r2, #100	; 0x64
 8001730:	211e      	movs	r1, #30
 8001732:	203c      	movs	r0, #60	; 0x3c
 8001734:	f7ff fae1 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 8001738:	2064      	movs	r0, #100	; 0x64
 800173a:	f000 fd3f 	bl	80021bc <HAL_Delay>
				 ILI9341_printImage(60,30, 100,100,Banane2, sizeof(Banane2));
 800173e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <main+0x3a8>)
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	2264      	movs	r2, #100	; 0x64
 800174c:	211e      	movs	r1, #30
 800174e:	203c      	movs	r0, #60	; 0x3c
 8001750:	f7ff fad3 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	f000 fd31 	bl	80021bc <HAL_Delay>
				 ILI9341_printImage(60,30, 100,100,Banane3, sizeof(Banane3));
 800175a:	f242 7310 	movw	r3, #10000	; 0x2710
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	4b41      	ldr	r3, [pc, #260]	; (8001868 <main+0x3ac>)
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2364      	movs	r3, #100	; 0x64
 8001766:	2264      	movs	r2, #100	; 0x64
 8001768:	211e      	movs	r1, #30
 800176a:	203c      	movs	r0, #60	; 0x3c
 800176c:	f7ff fac5 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 8001770:	2064      	movs	r0, #100	; 0x64
 8001772:	f000 fd23 	bl	80021bc <HAL_Delay>
				 ILI9341_printImage(60,30, 100,100,Banane4, sizeof(Banane4));
 8001776:	f242 7310 	movw	r3, #10000	; 0x2710
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <main+0x3b0>)
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2364      	movs	r3, #100	; 0x64
 8001782:	2264      	movs	r2, #100	; 0x64
 8001784:	211e      	movs	r1, #30
 8001786:	203c      	movs	r0, #60	; 0x3c
 8001788:	f7ff fab7 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f000 fd15 	bl	80021bc <HAL_Delay>
				 ILI9341_printImage(60,30, 100,100,Banane5, sizeof(Banane5));
 8001792:	f242 7310 	movw	r3, #10000	; 0x2710
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <main+0x3b4>)
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	2264      	movs	r2, #100	; 0x64
 80017a0:	211e      	movs	r1, #30
 80017a2:	203c      	movs	r0, #60	; 0x3c
 80017a4:	f7ff faa9 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	; 0x64
 80017aa:	f000 fd07 	bl	80021bc <HAL_Delay>
				 ILI9341_printImage(60,30, 100,100,Banane6, sizeof(Banane6));
 80017ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <main+0x3b8>)
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	211e      	movs	r1, #30
 80017be:	203c      	movs	r0, #60	; 0x3c
 80017c0:	f7ff fa9b 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	f000 fcf9 	bl	80021bc <HAL_Delay>
				 ILI9341_printImage(60,30, 100,100,Banane7, sizeof(Banane7));
 80017ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <main+0x3bc>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2364      	movs	r3, #100	; 0x64
 80017d6:	2264      	movs	r2, #100	; 0x64
 80017d8:	211e      	movs	r1, #30
 80017da:	203c      	movs	r0, #60	; 0x3c
 80017dc:	f7ff fa8d 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 80017e0:	2064      	movs	r0, #100	; 0x64
 80017e2:	f000 fceb 	bl	80021bc <HAL_Delay>
				 ILI9341_printImage(60,30, 100,100,Banane8, sizeof(Banane8));
 80017e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <main+0x3c0>)
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	2264      	movs	r2, #100	; 0x64
 80017f4:	211e      	movs	r1, #30
 80017f6:	203c      	movs	r0, #60	; 0x3c
 80017f8:	f7ff fa7f 	bl	8000cfa <ILI9341_printImage>
				 HAL_Delay(100);
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f000 fcdd 	bl	80021bc <HAL_Delay>
 8001802:	e6fc      	b.n	80015fe <main+0x142>



		  }
		  else{
			  LCD_SetMode(LCD_MODE_DRAW);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff fce7 	bl	80011d8 <LCD_SetMode>
			  ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 800180a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	235a      	movs	r3, #90	; 0x5a
 8001812:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001816:	211e      	movs	r1, #30
 8001818:	203c      	movs	r0, #60	; 0x3c
 800181a:	f7ff f8ab 	bl	8000974 <ILI9341_Fill_Rect>
			  LCD_SetMode(LCD_MODE_TOUCH);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fcda 	bl	80011d8 <LCD_SetMode>
			  __WFI();
 8001824:	bf30      	wfi
		  if(LCD_Touch_Read(&p)==LCD_TOUCH_READ_SUCCESS)
 8001826:	e6ea      	b.n	80015fe <main+0x142>
 8001828:	40020800 	.word	0x40020800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	20013a2c 	.word	0x20013a2c
 8001838:	08004bc0 	.word	0x08004bc0
 800183c:	08004bc8 	.word	0x08004bc8
 8001840:	08004bd0 	.word	0x08004bd0
 8001844:	08004bf0 	.word	0x08004bf0
 8001848:	2001399c 	.word	0x2001399c
 800184c:	200139e4 	.word	0x200139e4
 8001850:	08004c14 	.word	0x08004c14
 8001854:	08004c20 	.word	0x08004c20
 8001858:	08004c2c 	.word	0x08004c2c
 800185c:	08004c38 	.word	0x08004c38
 8001860:	20000004 	.word	0x20000004
 8001864:	20002714 	.word	0x20002714
 8001868:	20004e24 	.word	0x20004e24
 800186c:	20007534 	.word	0x20007534
 8001870:	20009c44 	.word	0x20009c44
 8001874:	2000c354 	.word	0x2000c354
 8001878:	2000ea64 	.word	0x2000ea64
 800187c:	20011174 	.word	0x20011174

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	2234      	movs	r2, #52	; 0x34
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fcee 	bl	8004270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <SystemClock_Config+0xdc>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <SystemClock_Config+0xdc>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <SystemClock_Config+0xdc>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <SystemClock_Config+0xe0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <SystemClock_Config+0xe0>)
 80018ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <SystemClock_Config+0xe0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f0:	2304      	movs	r3, #4
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018f4:	23b4      	movs	r3, #180	; 0xb4
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4618      	mov	r0, r3
 800190a:	f001 ff4b 	bl	80037a4 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001914:	f000 f9c0 	bl	8001c98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001918:	f001 fbde 	bl	80030d8 <HAL_PWREx_EnableOverDrive>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001922:	f000 f9b9 	bl	8001c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2302      	movs	r3, #2
 800192c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001932:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	2105      	movs	r1, #5
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fc17 	bl	8003178 <HAL_RCC_ClockConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001950:	f000 f9a2 	bl	8001c98 <Error_Handler>
  }
}
 8001954:	bf00      	nop
 8001956:	3750      	adds	r7, #80	; 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800196a:	463b      	mov	r3, r7
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_ADC1_Init+0x98>)
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <MX_ADC1_Init+0x9c>)
 800197a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <MX_ADC1_Init+0x98>)
 800197e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001982:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_ADC1_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_ADC1_Init+0x98>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_ADC1_Init+0x98>)
 8001992:	2200      	movs	r2, #0
 8001994:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_ADC1_Init+0x98>)
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_ADC1_Init+0x98>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_ADC1_Init+0x98>)
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <MX_ADC1_Init+0xa0>)
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_ADC1_Init+0x98>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_ADC1_Init+0x98>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_ADC1_Init+0x98>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_ADC1_Init+0x98>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_ADC1_Init+0x98>)
 80019c6:	f000 fc1d 	bl	8002204 <HAL_ADC_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019d0:	f000 f962 	bl	8001c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_ADC1_Init+0x98>)
 80019e6:	f000 fdef 	bl	80025c8 <HAL_ADC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019f0:	f000 f952 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2001399c 	.word	0x2001399c
 8001a00:	40012000 	.word	0x40012000
 8001a04:	0f000001 	.word	0x0f000001

08001a08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <MX_ADC2_Init+0x9c>)
 8001a1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <MX_ADC2_Init+0xa0>)
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a6a:	f000 fbcb 	bl	8002204 <HAL_ADC_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001a74:	f000 f910 	bl	8001c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a84:	463b      	mov	r3, r7
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_ADC2_Init+0x98>)
 8001a8a:	f000 fd9d 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001a94:	f000 f900 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200139e4 	.word	0x200139e4
 8001aa4:	40012100 	.word	0x40012100
 8001aa8:	0f000001 	.word	0x0f000001

08001aac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <MX_SPI1_Init+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001abc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001adc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001af8:	220a      	movs	r2, #10
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_SPI1_Init+0x64>)
 8001afe:	f002 f8ef 	bl	8003ce0 <HAL_SPI_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b08:	f000 f8c6 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20013a2c 	.word	0x20013a2c
 8001b14:	40013000 	.word	0x40013000

08001b18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <MX_SPI2_Init+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b64:	220a      	movs	r2, #10
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_SPI2_Init+0x64>)
 8001b6a:	f002 f8b9 	bl	8003ce0 <HAL_SPI_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b74:	f000 f890 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20013a84 	.word	0x20013a84
 8001b80:	40003800 	.word	0x40003800

08001b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a39      	ldr	r2, [pc, #228]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a32      	ldr	r2, [pc, #200]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a24      	ldr	r2, [pc, #144]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <MX_GPIO_Init+0x104>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001c10:	481e      	ldr	r0, [pc, #120]	; (8001c8c <MX_GPIO_Init+0x108>)
 8001c12:	f001 fa23 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	481d      	ldr	r0, [pc, #116]	; (8001c90 <MX_GPIO_Init+0x10c>)
 8001c1c:	f001 fa1e 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2160      	movs	r1, #96	; 0x60
 8001c24:	481b      	ldr	r0, [pc, #108]	; (8001c94 <MX_GPIO_Init+0x110>)
 8001c26:	f001 fa19 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 8001c2a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4812      	ldr	r0, [pc, #72]	; (8001c8c <MX_GPIO_Init+0x108>)
 8001c44:	f001 f85e 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480c      	ldr	r0, [pc, #48]	; (8001c90 <MX_GPIO_Init+0x10c>)
 8001c60:	f001 f850 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_GPIO_Init+0x110>)
 8001c7c:	f001 f842 	bl	8002d04 <HAL_GPIO_Init>

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020400 	.word	0x40020400

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <Error_Handler+0x8>
	...

08001ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce2:	2007      	movs	r0, #7
 8001ce4:	f000 ffb0 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <HAL_ADC_MspInit+0xd8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d128      	bne.n	8001d68 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d52:	2303      	movs	r3, #3
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <HAL_ADC_MspInit+0xe0>)
 8001d62:	f000 ffcf 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d66:	e02c      	b.n	8001dc2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d127      	bne.n	8001dc2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_ADC_MspInit+0xdc>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001daa:	2310      	movs	r3, #16
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_ADC_MspInit+0xe0>)
 8001dbe:	f000 ffa1 	bl	8002d04 <HAL_GPIO_Init>
}
 8001dc2:	bf00      	nop
 8001dc4:	3730      	adds	r7, #48	; 0x30
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40012000 	.word	0x40012000
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40012100 	.word	0x40012100

08001ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_SPI_MspInit+0x180>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d14a      	bne.n	8001e94 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b54      	ldr	r3, [pc, #336]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a4f      	ldr	r2, [pc, #316]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e52:	23c0      	movs	r3, #192	; 0xc0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e62:	2305      	movs	r3, #5
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	483d      	ldr	r0, [pc, #244]	; (8001f64 <HAL_SPI_MspInit+0x188>)
 8001e6e:	f000 ff49 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e72:	2308      	movs	r3, #8
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e82:	2305      	movs	r3, #5
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4836      	ldr	r0, [pc, #216]	; (8001f68 <HAL_SPI_MspInit+0x18c>)
 8001e8e:	f000 ff39 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e92:	e05f      	b.n	8001f54 <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <HAL_SPI_MspInit+0x190>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d15a      	bne.n	8001f54 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_SPI_MspInit+0x184>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_DO_Pin;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001f02:	2307      	movs	r3, #7
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TS_DO_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4818      	ldr	r0, [pc, #96]	; (8001f70 <HAL_SPI_MspInit+0x194>)
 8001f0e:	f000 fef9 	bl	8002d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = T_DIN_Pin;
 8001f12:	2304      	movs	r3, #4
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f22:	2305      	movs	r3, #5
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(T_DIN_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4810      	ldr	r0, [pc, #64]	; (8001f70 <HAL_SPI_MspInit+0x194>)
 8001f2e:	f000 fee9 	bl	8002d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f44:	2305      	movs	r3, #5
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4806      	ldr	r0, [pc, #24]	; (8001f68 <HAL_SPI_MspInit+0x18c>)
 8001f50:	f000 fed8 	bl	8002d04 <HAL_GPIO_Init>
}
 8001f54:	bf00      	nop
 8001f56:	3738      	adds	r7, #56	; 0x38
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40013000 	.word	0x40013000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40003800 	.word	0x40003800
 8001f70:	40020800 	.word	0x40020800

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 f8dc 	bl	800217c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <EXTI4_IRQHandler>:
 *   LCD_TOUCH_DOWN,
 *   LCD_TOUCH_MOVE,
 *   LCD_TOUCH_UP
 * events, if LCD_MODE_TOUCH is selected.
 */
void EXTI4_IRQHandler(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8001fcc:	2110      	movs	r1, #16
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <EXTI4_IRQHandler+0x28>)
 8001fd0:	f001 f82c 	bl	800302c <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <EXTI4_IRQHandler+0x18>
		LCD_Touch_OnDown();
 8001fda:	f7ff f997 	bl	800130c <LCD_Touch_OnDown>
 8001fde:	e001      	b.n	8001fe4 <EXTI4_IRQHandler+0x1c>
	} else {
		LCD_Touch_OnUp();
 8001fe0:	f7ff f9a4 	bl	800132c <LCD_Touch_OnUp>
	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fe4:	2010      	movs	r0, #16
 8001fe6:	f001 f853 	bl	8003090 <HAL_GPIO_EXTI_IRQHandler>
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40020000 	.word	0x40020000

08001ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <_sbrk+0x5c>)
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <_sbrk+0x60>)
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <_sbrk+0x64>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <_sbrk+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002024:	f002 f8ec 	bl	8004200 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002032:	e009      	b.n	8002048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20020000 	.word	0x20020000
 8002054:	00000400 	.word	0x00000400
 8002058:	20013adc 	.word	0x20013adc
 800205c:	20013af8 	.word	0x20013af8

08002060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <SystemInit+0x20>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <SystemInit+0x20>)
 800206c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800208a:	490e      	ldr	r1, [pc, #56]	; (80020c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a0:	4c0b      	ldr	r4, [pc, #44]	; (80020d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020ae:	f7ff ffd7 	bl	8002060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b2:	f002 f8ab 	bl	800420c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b6:	f7ff fa01 	bl	80014bc <main>
  bx  lr    
 80020ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	200138f4 	.word	0x200138f4
  ldr r2, =_sidata
 80020c8:	08005198 	.word	0x08005198
  ldr r2, =_sbss
 80020cc:	200138f4 	.word	0x200138f4
  ldr r4, =_ebss
 80020d0:	20013af4 	.word	0x20013af4

080020d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_Init+0x40>)
 80020e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_Init+0x40>)
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_Init+0x40>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002100:	2003      	movs	r0, #3
 8002102:	f000 fda1 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002106:	2000      	movs	r0, #0
 8002108:	f000 f808 	bl	800211c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210c:	f7ff fdca 	bl	8001ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00

0800211c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x54>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x58>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	fbb3 f3f1 	udiv	r3, r3, r1
 8002136:	fbb2 f3f3 	udiv	r3, r2, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fdc7 	bl	8002cce <HAL_SYSTICK_Config>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00e      	b.n	8002168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d80a      	bhi.n	8002166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002158:	f000 fd81 	bl	8002c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800215c:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_InitTick+0x5c>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20013884 	.word	0x20013884
 8002174:	2001388c 	.word	0x2001388c
 8002178:	20013888 	.word	0x20013888

0800217c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x20>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x24>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4413      	add	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_IncTick+0x24>)
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	2001388c 	.word	0x2001388c
 80021a0:	20013ae0 	.word	0x20013ae0

080021a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_GetTick+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20013ae0 	.word	0x20013ae0

080021bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff ffee 	bl	80021a4 <HAL_GetTick>
 80021c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d4:	d005      	beq.n	80021e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_Delay+0x44>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021e2:	bf00      	nop
 80021e4:	f7ff ffde 	bl	80021a4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d8f7      	bhi.n	80021e4 <HAL_Delay+0x28>
  {
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2001388c 	.word	0x2001388c

08002204 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e033      	b.n	8002282 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fd66 	bl	8001cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800224a:	f023 0302 	bic.w	r3, r3, #2
 800224e:	f043 0202 	orr.w	r2, r3, #2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fae8 	bl	800282c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
 8002272:	e001      	b.n	8002278 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Start+0x1a>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0b2      	b.n	800240c <HAL_ADC_Start+0x180>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d018      	beq.n	80022ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022cc:	4b52      	ldr	r3, [pc, #328]	; (8002418 <HAL_ADC_Start+0x18c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_ADC_Start+0x190>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9a      	lsrs	r2, r3, #18
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d17a      	bne.n	80023f2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002326:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233a:	d106      	bne.n	800234a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f023 0206 	bic.w	r2, r3, #6
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
 8002348:	e002      	b.n	8002350 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002358:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_ADC_Start+0x194>)
 800235a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002364:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12a      	bne.n	80023c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <HAL_ADC_Start+0x198>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d015      	beq.n	80023a8 <HAL_ADC_Start+0x11c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <HAL_ADC_Start+0x19c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d105      	bne.n	8002392 <HAL_ADC_Start+0x106>
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_ADC_Start+0x194>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a25      	ldr	r2, [pc, #148]	; (800242c <HAL_ADC_Start+0x1a0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d136      	bne.n	800240a <HAL_ADC_Start+0x17e>
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_ADC_Start+0x194>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d130      	bne.n	800240a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d129      	bne.n	800240a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	e020      	b.n	800240a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_ADC_Start+0x198>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d11b      	bne.n	800240a <HAL_ADC_Start+0x17e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d114      	bne.n	800240a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e00b      	b.n	800240a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20013884 	.word	0x20013884
 800241c:	431bde83 	.word	0x431bde83
 8002420:	40012300 	.word	0x40012300
 8002424:	40012000 	.word	0x40012000
 8002428:	40012100 	.word	0x40012100
 800242c:	40012200 	.word	0x40012200

08002430 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_ADC_Stop+0x16>
 8002442:	2302      	movs	r3, #2
 8002444:	e021      	b.n	800248a <HAL_ADC_Stop+0x5a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	d113      	bne.n	80024dc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c2:	d10b      	bne.n	80024dc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e063      	b.n	80025a4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024dc:	f7ff fe62 	bl	80021a4 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024e2:	e021      	b.n	8002528 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ea:	d01d      	beq.n	8002528 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_ADC_PollForConversion+0x6c>
 80024f2:	f7ff fe57 	bl	80021a4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d212      	bcs.n	8002528 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d00b      	beq.n	8002528 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f043 0204 	orr.w	r2, r3, #4
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e03d      	b.n	80025a4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d1d6      	bne.n	80024e4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0212 	mvn.w	r2, #18
 800253e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d123      	bne.n	80025a2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11f      	bne.n	80025a2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800257a:	2b00      	cmp	r3, #0
 800257c:	d111      	bne.n	80025a2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1c>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e113      	b.n	800280c <HAL_ADC_ConfigChannel+0x244>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b09      	cmp	r3, #9
 80025f2:	d925      	bls.n	8002640 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68d9      	ldr	r1, [r3, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	3b1e      	subs	r3, #30
 800260a:	2207      	movs	r2, #7
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43da      	mvns	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	400a      	ands	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68d9      	ldr	r1, [r3, #12]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	4603      	mov	r3, r0
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4403      	add	r3, r0
 8002632:	3b1e      	subs	r3, #30
 8002634:	409a      	lsls	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	e022      	b.n	8002686 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	2207      	movs	r2, #7
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	400a      	ands	r2, r1
 8002662:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6919      	ldr	r1, [r3, #16]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	4618      	mov	r0, r3
 8002676:	4603      	mov	r3, r0
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4403      	add	r3, r0
 800267c:	409a      	lsls	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d824      	bhi.n	80026d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3b05      	subs	r3, #5
 80026a0:	221f      	movs	r2, #31
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	400a      	ands	r2, r1
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3b05      	subs	r3, #5
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
 80026d6:	e04c      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d824      	bhi.n	800272a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b23      	subs	r3, #35	; 0x23
 80026f2:	221f      	movs	r2, #31
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b23      	subs	r3, #35	; 0x23
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
 8002728:	e023      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	3b41      	subs	r3, #65	; 0x41
 800273c:	221f      	movs	r2, #31
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b41      	subs	r3, #65	; 0x41
 8002766:	fa00 f203 	lsl.w	r2, r0, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_ADC_ConfigChannel+0x250>)
 8002774:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_ADC_ConfigChannel+0x254>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10f      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b12      	cmp	r3, #18
 8002786:	d10b      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_ADC_ConfigChannel+0x254>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d12b      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x23a>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <HAL_ADC_ConfigChannel+0x258>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x1f4>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b11      	cmp	r3, #17
 80027ba:	d122      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a11      	ldr	r2, [pc, #68]	; (8002820 <HAL_ADC_ConfigChannel+0x258>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d111      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_ADC_ConfigChannel+0x25c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_ADC_ConfigChannel+0x260>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9a      	lsrs	r2, r3, #18
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027f4:	e002      	b.n	80027fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f9      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40012300 	.word	0x40012300
 800281c:	40012000 	.word	0x40012000
 8002820:	10000012 	.word	0x10000012
 8002824:	20013884 	.word	0x20013884
 8002828:	431bde83 	.word	0x431bde83

0800282c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <ADC_Init+0x1f0>)
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6899      	ldr	r1, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <ADC_Init+0x1f4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d022      	beq.n	800290a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6899      	ldr	r1, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e00f      	b.n	800292a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002928:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0202 	bic.w	r2, r2, #2
 8002938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7e1b      	ldrb	r3, [r3, #24]
 8002944:	005a      	lsls	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002966:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002976:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	3b01      	subs	r3, #1
 8002984:	035a      	lsls	r2, r3, #13
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	e007      	b.n	80029a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	051a      	lsls	r2, r3, #20
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029e2:	025a      	lsls	r2, r3, #9
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	029a      	lsls	r2, r3, #10
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40012300 	.word	0x40012300
 8002a20:	0f000001 	.word	0x0f000001

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	; (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	db12      	blt.n	8002afc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	490a      	ldr	r1, [pc, #40]	; (8002b08 <__NVIC_DisableIRQ+0x44>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aea:	3320      	adds	r3, #32
 8002aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002af0:	f3bf 8f4f 	dsb	sy
}
 8002af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002af6:	f3bf 8f6f 	isb	sy
}
 8002afa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db0c      	blt.n	8002b38 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4907      	ldr	r1, [pc, #28]	; (8002b44 <__NVIC_ClearPendingIRQ+0x38>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b32:	3360      	adds	r3, #96	; 0x60
 8002b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c28:	f7ff ff8e 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff fee7 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff fefc 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff8e 	bl	8002b9c <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5d 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff feef 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff feff 	bl	8002ac4 <__NVIC_DisableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ff94 	bl	8002c04 <SysTick_Config>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff09 	bl	8002b0c <__NVIC_ClearPendingIRQ>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e165      	b.n	8002fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d20:	2201      	movs	r2, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f040 8154 	bne.w	8002fe6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d005      	beq.n	8002d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d130      	bne.n	8002db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 0201 	and.w	r2, r3, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d017      	beq.n	8002df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d123      	bne.n	8002e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	69b9      	ldr	r1, [r7, #24]
 8002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0203 	and.w	r2, r3, #3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80ae 	beq.w	8002fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b5a      	ldr	r3, [pc, #360]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea6:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4f      	ldr	r2, [pc, #316]	; (800300c <HAL_GPIO_Init+0x308>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d025      	beq.n	8002f1e <HAL_GPIO_Init+0x21a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4e      	ldr	r2, [pc, #312]	; (8003010 <HAL_GPIO_Init+0x30c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <HAL_GPIO_Init+0x216>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <HAL_GPIO_Init+0x310>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d019      	beq.n	8002f16 <HAL_GPIO_Init+0x212>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4c      	ldr	r2, [pc, #304]	; (8003018 <HAL_GPIO_Init+0x314>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_GPIO_Init+0x20e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4b      	ldr	r2, [pc, #300]	; (800301c <HAL_GPIO_Init+0x318>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00d      	beq.n	8002f0e <HAL_GPIO_Init+0x20a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <HAL_GPIO_Init+0x31c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_Init+0x206>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a49      	ldr	r2, [pc, #292]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_GPIO_Init+0x202>
 8002f02:	2306      	movs	r3, #6
 8002f04:	e00c      	b.n	8002f20 <HAL_GPIO_Init+0x21c>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e00a      	b.n	8002f20 <HAL_GPIO_Init+0x21c>
 8002f0a:	2305      	movs	r3, #5
 8002f0c:	e008      	b.n	8002f20 <HAL_GPIO_Init+0x21c>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	e006      	b.n	8002f20 <HAL_GPIO_Init+0x21c>
 8002f12:	2303      	movs	r3, #3
 8002f14:	e004      	b.n	8002f20 <HAL_GPIO_Init+0x21c>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e002      	b.n	8002f20 <HAL_GPIO_Init+0x21c>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_GPIO_Init+0x21c>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	f002 0203 	and.w	r2, r2, #3
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	4093      	lsls	r3, r2
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f30:	4935      	ldr	r1, [pc, #212]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	3302      	adds	r3, #2
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f62:	4a31      	ldr	r2, [pc, #196]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f8c:	4a26      	ldr	r2, [pc, #152]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b0f      	cmp	r3, #15
 8002ff0:	f67f ae96 	bls.w	8002d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	40013800 	.word	0x40013800
 800300c:	40020000 	.word	0x40020000
 8003010:	40020400 	.word	0x40020400
 8003014:	40020800 	.word	0x40020800
 8003018:	40020c00 	.word	0x40020c00
 800301c:	40021000 	.word	0x40021000
 8003020:	40021400 	.word	0x40021400
 8003024:	40021800 	.word	0x40021800
 8003028:	40013c00 	.word	0x40013c00

0800302c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e001      	b.n	800304e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030a6:	4a05      	ldr	r2, [pc, #20]	; (80030bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f806 	bl	80030c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40013c00 	.word	0x40013c00

080030c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_PWREx_EnableOverDrive+0x90>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <HAL_PWREx_EnableOverDrive+0x90>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_PWREx_EnableOverDrive+0x90>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_PWREx_EnableOverDrive+0x94>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003104:	f7ff f84e 	bl	80021a4 <HAL_GetTick>
 8003108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800310a:	e009      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800310c:	f7ff f84a 	bl	80021a4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800311a:	d901      	bls.n	8003120 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e01f      	b.n	8003160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_PWREx_EnableOverDrive+0x98>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d1ee      	bne.n	800310c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003134:	f7ff f836 	bl	80021a4 <HAL_GetTick>
 8003138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800313a:	e009      	b.n	8003150 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800313c:	f7ff f832 	bl	80021a4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800314a:	d901      	bls.n	8003150 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e007      	b.n	8003160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_PWREx_EnableOverDrive+0x98>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800315c:	d1ee      	bne.n	800313c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	420e0040 	.word	0x420e0040
 8003170:	40007000 	.word	0x40007000
 8003174:	420e0044 	.word	0x420e0044

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0cc      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d90c      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d044      	beq.n	8003298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d119      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e067      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4934      	ldr	r1, [pc, #208]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fe ff9c 	bl	80021a4 <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fe ff98 	bl	80021a4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e04f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20c      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f821 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490a      	ldr	r1, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fefc 	bl	800211c <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00
 8003334:	40023800 	.word	0x40023800
 8003338:	08005144 	.word	0x08005144
 800333c:	20013884 	.word	0x20013884
 8003340:	20013888 	.word	0x20013888

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b0ae      	sub	sp, #184	; 0xb8
 800334a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336a:	4bcb      	ldr	r3, [pc, #812]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b0c      	cmp	r3, #12
 8003374:	f200 8206 	bhi.w	8003784 <HAL_RCC_GetSysClockFreq+0x440>
 8003378:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <HAL_RCC_GetSysClockFreq+0x3c>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	080033b5 	.word	0x080033b5
 8003384:	08003785 	.word	0x08003785
 8003388:	08003785 	.word	0x08003785
 800338c:	08003785 	.word	0x08003785
 8003390:	080033bd 	.word	0x080033bd
 8003394:	08003785 	.word	0x08003785
 8003398:	08003785 	.word	0x08003785
 800339c:	08003785 	.word	0x08003785
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	08003785 	.word	0x08003785
 80033a8:	08003785 	.word	0x08003785
 80033ac:	08003785 	.word	0x08003785
 80033b0:	080035b5 	.word	0x080035b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4bb9      	ldr	r3, [pc, #740]	; (800369c <HAL_RCC_GetSysClockFreq+0x358>)
 80033b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80033ba:	e1e7      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033bc:	4bb8      	ldr	r3, [pc, #736]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033c2:	e1e3      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c4:	4bb4      	ldr	r3, [pc, #720]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d0:	4bb1      	ldr	r3, [pc, #708]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d071      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033dc:	4bae      	ldr	r3, [pc, #696]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	099b      	lsrs	r3, r3, #6
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80033ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003402:	4622      	mov	r2, r4
 8003404:	462b      	mov	r3, r5
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	0159      	lsls	r1, r3, #5
 8003410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003414:	0150      	lsls	r0, r2, #5
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4621      	mov	r1, r4
 800341c:	1a51      	subs	r1, r2, r1
 800341e:	6439      	str	r1, [r7, #64]	; 0x40
 8003420:	4629      	mov	r1, r5
 8003422:	eb63 0301 	sbc.w	r3, r3, r1
 8003426:	647b      	str	r3, [r7, #68]	; 0x44
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003434:	4649      	mov	r1, r9
 8003436:	018b      	lsls	r3, r1, #6
 8003438:	4641      	mov	r1, r8
 800343a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343e:	4641      	mov	r1, r8
 8003440:	018a      	lsls	r2, r1, #6
 8003442:	4641      	mov	r1, r8
 8003444:	1a51      	subs	r1, r2, r1
 8003446:	63b9      	str	r1, [r7, #56]	; 0x38
 8003448:	4649      	mov	r1, r9
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800345c:	4649      	mov	r1, r9
 800345e:	00cb      	lsls	r3, r1, #3
 8003460:	4641      	mov	r1, r8
 8003462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003466:	4641      	mov	r1, r8
 8003468:	00ca      	lsls	r2, r1, #3
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	4603      	mov	r3, r0
 8003470:	4622      	mov	r2, r4
 8003472:	189b      	adds	r3, r3, r2
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
 8003476:	462b      	mov	r3, r5
 8003478:	460a      	mov	r2, r1
 800347a:	eb42 0303 	adc.w	r3, r2, r3
 800347e:	637b      	str	r3, [r7, #52]	; 0x34
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800348c:	4629      	mov	r1, r5
 800348e:	024b      	lsls	r3, r1, #9
 8003490:	4621      	mov	r1, r4
 8003492:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003496:	4621      	mov	r1, r4
 8003498:	024a      	lsls	r2, r1, #9
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80034b0:	f7fc ff06 	bl	80002c0 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034be:	e067      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c0:	4b75      	ldr	r3, [pc, #468]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034da:	2300      	movs	r3, #0
 80034dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	f04f 0000 	mov.w	r0, #0
 80034ea:	f04f 0100 	mov.w	r1, #0
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f4:	0150      	lsls	r0, r2, #5
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4621      	mov	r1, r4
 80034fc:	1a51      	subs	r1, r2, r1
 80034fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003500:	4629      	mov	r1, r5
 8003502:	eb63 0301 	sbc.w	r3, r3, r1
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003514:	4649      	mov	r1, r9
 8003516:	018b      	lsls	r3, r1, #6
 8003518:	4641      	mov	r1, r8
 800351a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351e:	4641      	mov	r1, r8
 8003520:	018a      	lsls	r2, r1, #6
 8003522:	4641      	mov	r1, r8
 8003524:	ebb2 0a01 	subs.w	sl, r2, r1
 8003528:	4649      	mov	r1, r9
 800352a:	eb63 0b01 	sbc.w	fp, r3, r1
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800353a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800353e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003542:	4692      	mov	sl, r2
 8003544:	469b      	mov	fp, r3
 8003546:	4623      	mov	r3, r4
 8003548:	eb1a 0303 	adds.w	r3, sl, r3
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	462b      	mov	r3, r5
 8003550:	eb4b 0303 	adc.w	r3, fp, r3
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003562:	4629      	mov	r1, r5
 8003564:	028b      	lsls	r3, r1, #10
 8003566:	4621      	mov	r1, r4
 8003568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800356c:	4621      	mov	r1, r4
 800356e:	028a      	lsls	r2, r1, #10
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003578:	2200      	movs	r2, #0
 800357a:	673b      	str	r3, [r7, #112]	; 0x70
 800357c:	677a      	str	r2, [r7, #116]	; 0x74
 800357e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003582:	f7fc fe9d 	bl	80002c0 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4613      	mov	r3, r2
 800358c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80035a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035b2:	e0eb      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b4:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c0:	4b35      	ldr	r3, [pc, #212]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d06b      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	2200      	movs	r2, #0
 80035d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	663b      	str	r3, [r7, #96]	; 0x60
 80035e0:	2300      	movs	r3, #0
 80035e2:	667b      	str	r3, [r7, #100]	; 0x64
 80035e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80035e8:	4622      	mov	r2, r4
 80035ea:	462b      	mov	r3, r5
 80035ec:	f04f 0000 	mov.w	r0, #0
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	0159      	lsls	r1, r3, #5
 80035f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fa:	0150      	lsls	r0, r2, #5
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4621      	mov	r1, r4
 8003602:	1a51      	subs	r1, r2, r1
 8003604:	61b9      	str	r1, [r7, #24]
 8003606:	4629      	mov	r1, r5
 8003608:	eb63 0301 	sbc.w	r3, r3, r1
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800361a:	4659      	mov	r1, fp
 800361c:	018b      	lsls	r3, r1, #6
 800361e:	4651      	mov	r1, sl
 8003620:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003624:	4651      	mov	r1, sl
 8003626:	018a      	lsls	r2, r1, #6
 8003628:	4651      	mov	r1, sl
 800362a:	ebb2 0801 	subs.w	r8, r2, r1
 800362e:	4659      	mov	r1, fp
 8003630:	eb63 0901 	sbc.w	r9, r3, r1
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003648:	4690      	mov	r8, r2
 800364a:	4699      	mov	r9, r3
 800364c:	4623      	mov	r3, r4
 800364e:	eb18 0303 	adds.w	r3, r8, r3
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	462b      	mov	r3, r5
 8003656:	eb49 0303 	adc.w	r3, r9, r3
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003668:	4629      	mov	r1, r5
 800366a:	024b      	lsls	r3, r1, #9
 800366c:	4621      	mov	r1, r4
 800366e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003672:	4621      	mov	r1, r4
 8003674:	024a      	lsls	r2, r1, #9
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800367e:	2200      	movs	r2, #0
 8003680:	65bb      	str	r3, [r7, #88]	; 0x58
 8003682:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003684:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003688:	f7fc fe1a 	bl	80002c0 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003696:	e065      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x420>
 8003698:	40023800 	.word	0x40023800
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a4:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_GetSysClockFreq+0x458>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	2200      	movs	r2, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	4611      	mov	r1, r2
 80036b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
 80036b6:	2300      	movs	r3, #0
 80036b8:	657b      	str	r3, [r7, #84]	; 0x54
 80036ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80036be:	4642      	mov	r2, r8
 80036c0:	464b      	mov	r3, r9
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	0159      	lsls	r1, r3, #5
 80036cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d0:	0150      	lsls	r0, r2, #5
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4641      	mov	r1, r8
 80036d8:	1a51      	subs	r1, r2, r1
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	4649      	mov	r1, r9
 80036de:	eb63 0301 	sbc.w	r3, r3, r1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036f0:	4659      	mov	r1, fp
 80036f2:	018b      	lsls	r3, r1, #6
 80036f4:	4651      	mov	r1, sl
 80036f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fa:	4651      	mov	r1, sl
 80036fc:	018a      	lsls	r2, r1, #6
 80036fe:	4651      	mov	r1, sl
 8003700:	1a54      	subs	r4, r2, r1
 8003702:	4659      	mov	r1, fp
 8003704:	eb63 0501 	sbc.w	r5, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	00eb      	lsls	r3, r5, #3
 8003712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003716:	00e2      	lsls	r2, r4, #3
 8003718:	4614      	mov	r4, r2
 800371a:	461d      	mov	r5, r3
 800371c:	4643      	mov	r3, r8
 800371e:	18e3      	adds	r3, r4, r3
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	464b      	mov	r3, r9
 8003724:	eb45 0303 	adc.w	r3, r5, r3
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003736:	4629      	mov	r1, r5
 8003738:	028b      	lsls	r3, r1, #10
 800373a:	4621      	mov	r1, r4
 800373c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003740:	4621      	mov	r1, r4
 8003742:	028a      	lsls	r2, r1, #10
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800374c:	2200      	movs	r2, #0
 800374e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003750:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003752:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003756:	f7fc fdb3 	bl	80002c0 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4613      	mov	r3, r2
 8003760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_RCC_GetSysClockFreq+0x458>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	0f1b      	lsrs	r3, r3, #28
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003782:	e003      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800378a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003790:	4618      	mov	r0, r3
 8003792:	37b8      	adds	r7, #184	; 0xb8
 8003794:	46bd      	mov	sp, r7
 8003796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	00f42400 	.word	0x00f42400

080037a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e28d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8083 	beq.w	80038ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037c4:	4b94      	ldr	r3, [pc, #592]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d019      	beq.n	8003804 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037d0:	4b91      	ldr	r3, [pc, #580]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d106      	bne.n	80037ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037dc:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e8:	d00c      	beq.n	8003804 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ea:	4b8b      	ldr	r3, [pc, #556]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d112      	bne.n	800381c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f6:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d10b      	bne.n	800381c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	4b84      	ldr	r3, [pc, #528]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x124>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d157      	bne.n	80038c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e25a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x90>
 8003826:	4b7c      	ldr	r3, [pc, #496]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7b      	ldr	r2, [pc, #492]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e01d      	b.n	8003870 <HAL_RCC_OscConfig+0xcc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0xb4>
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a72      	ldr	r2, [pc, #456]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0xcc>
 8003858:	4b6f      	ldr	r3, [pc, #444]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a6e      	ldr	r2, [pc, #440]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a6b      	ldr	r2, [pc, #428]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe fc94 	bl	80021a4 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003880:	f7fe fc90 	bl	80021a4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e21f      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0xdc>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fc80 	bl	80021a4 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fe fc7c 	bl	80021a4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e20b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	4b57      	ldr	r3, [pc, #348]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x104>
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d06f      	beq.n	80039b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038d6:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d017      	beq.n	8003912 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038e2:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d105      	bne.n	80038fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038ee:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b44      	ldr	r3, [pc, #272]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x186>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e1d3      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e03a      	b.n	80039b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_OscConfig+0x278>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fe fc29 	bl	80021a4 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003956:	f7fe fc25 	bl	80021a4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1b4      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4925      	ldr	r1, [pc, #148]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x278>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe fc08 	bl	80021a4 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7fe fc04 	bl	80021a4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e193      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d036      	beq.n	8003a30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fe fbe8 	bl	80021a4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fe fbe4 	bl	80021a4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e173      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x234>
 80039f6:	e01b      	b.n	8003a30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fe:	f7fe fbd1 	bl	80021a4 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	e00e      	b.n	8003a24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fe fbcd 	bl	80021a4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d907      	bls.n	8003a24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e15c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	4b8a      	ldr	r3, [pc, #552]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ea      	bne.n	8003a06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8097 	beq.w	8003b6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a42:	4b83      	ldr	r3, [pc, #524]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	4b7f      	ldr	r3, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b79      	ldr	r3, [pc, #484]	; (8003c54 <HAL_RCC_OscConfig+0x4b0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d118      	bne.n	8003aac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b76      	ldr	r3, [pc, #472]	; (8003c54 <HAL_RCC_OscConfig+0x4b0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a75      	ldr	r2, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0x4b0>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fe fb8d 	bl	80021a4 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fe fb89 	bl	80021a4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e118      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <HAL_RCC_OscConfig+0x4b0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x31e>
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	e01c      	b.n	8003afc <HAL_RCC_OscConfig+0x358>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x340>
 8003aca:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	4b5e      	ldr	r3, [pc, #376]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a5d      	ldr	r2, [pc, #372]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0x358>
 8003ae4:	4b5a      	ldr	r3, [pc, #360]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a59      	ldr	r2, [pc, #356]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a56      	ldr	r2, [pc, #344]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003af6:	f023 0304 	bic.w	r3, r3, #4
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe fb4e 	bl	80021a4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fb4a 	bl	80021a4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0d7      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ee      	beq.n	8003b0c <HAL_RCC_OscConfig+0x368>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fe fb38 	bl	80021a4 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fe fb34 	bl	80021a4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0c1      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ee      	bne.n	8003b38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b60:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	4a3a      	ldr	r2, [pc, #232]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80ad 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b76:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d060      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d145      	bne.n	8003c16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_RCC_OscConfig+0x4b4>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe fb08 	bl	80021a4 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fe fb04 	bl	80021a4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e093      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	019b      	lsls	r3, r3, #6
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	491b      	ldr	r1, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x4b4>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fe fad9 	bl	80021a4 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe fad5 	bl	80021a4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e064      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x452>
 8003c14:	e05c      	b.n	8003cd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_RCC_OscConfig+0x4b4>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fac2 	bl	80021a4 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fe fabe 	bl	80021a4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e04d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_OscConfig+0x4ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x480>
 8003c42:	e045      	b.n	8003cd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e040      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_RCC_OscConfig+0x538>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d030      	beq.n	8003ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d129      	bne.n	8003ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d122      	bne.n	8003ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d119      	bne.n	8003ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d10f      	bne.n	8003ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e07b      	b.n	8003dea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d02:	d009      	beq.n	8003d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
 8003d0a:	e005      	b.n	8003d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe f852 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	ea42 0103 	orr.w	r1, r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0104 	and.w	r1, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f003 0210 	and.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b088      	sub	sp, #32
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_SPI_Transmit+0x22>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e126      	b.n	8004062 <HAL_SPI_Transmit+0x270>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e1c:	f7fe f9c2 	bl	80021a4 <HAL_GetTick>
 8003e20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d002      	beq.n	8003e38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e36:	e10b      	b.n	8004050 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_Transmit+0x52>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e48:	e102      	b.n	8004050 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e90:	d10f      	bne.n	8003eb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d007      	beq.n	8003ed0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ece:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed8:	d14b      	bne.n	8003f72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_SPI_Transmit+0xf6>
 8003ee2:	8afb      	ldrh	r3, [r7, #22]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d13e      	bne.n	8003f66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	881a      	ldrh	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f0c:	e02b      	b.n	8003f66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d112      	bne.n	8003f42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f40:	e011      	b.n	8003f66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f42:	f7fe f92f 	bl	80021a4 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d803      	bhi.n	8003f5a <HAL_SPI_Transmit+0x168>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f58:	d102      	bne.n	8003f60 <HAL_SPI_Transmit+0x16e>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f64:	e074      	b.n	8004050 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ce      	bne.n	8003f0e <HAL_SPI_Transmit+0x11c>
 8003f70:	e04c      	b.n	800400c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_Transmit+0x18e>
 8003f7a:	8afb      	ldrh	r3, [r7, #22]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d140      	bne.n	8004002 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	7812      	ldrb	r2, [r2, #0]
 8003f8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fa6:	e02c      	b.n	8004002 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d113      	bne.n	8003fde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fdc:	e011      	b.n	8004002 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fde:	f7fe f8e1 	bl	80021a4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d803      	bhi.n	8003ff6 <HAL_SPI_Transmit+0x204>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff4:	d102      	bne.n	8003ffc <HAL_SPI_Transmit+0x20a>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004000:	e026      	b.n	8004050 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1cd      	bne.n	8003fa8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f8b3 	bl	800417c <SPI_EndRxTxTransaction>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e000      	b.n	8004050 <HAL_SPI_Transmit+0x25e>
  }

error:
 800404e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004060:	7ffb      	ldrb	r3, [r7, #31]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800407c:	f7fe f892 	bl	80021a4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	4413      	add	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800408c:	f7fe f88a 	bl	80021a4 <HAL_GetTick>
 8004090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	015b      	lsls	r3, r3, #5
 8004098:	0d1b      	lsrs	r3, r3, #20
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a2:	e054      	b.n	800414e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040aa:	d050      	beq.n	800414e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ac:	f7fe f87a 	bl	80021a4 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d902      	bls.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d13d      	bne.n	800413e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040da:	d111      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d004      	beq.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	d107      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004108:	d10f      	bne.n	800412a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e017      	b.n	800416e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3b01      	subs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	429a      	cmp	r2, r3
 800416a:	d19b      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20013884 	.word	0x20013884

0800417c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <SPI_EndRxTxTransaction+0x7c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <SPI_EndRxTxTransaction+0x80>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0d5b      	lsrs	r3, r3, #21
 8004194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004198:	fb02 f303 	mul.w	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a6:	d112      	bne.n	80041ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff ff5a 	bl	800406c <SPI_WaitFlagStateUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e00f      	b.n	80041ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d0f2      	beq.n	80041ce <SPI_EndRxTxTransaction+0x52>
 80041e8:	e000      	b.n	80041ec <SPI_EndRxTxTransaction+0x70>
        break;
 80041ea:	bf00      	nop
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20013884 	.word	0x20013884
 80041fc:	165e9f81 	.word	0x165e9f81

08004200 <__errno>:
 8004200:	4b01      	ldr	r3, [pc, #4]	; (8004208 <__errno+0x8>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20013890 	.word	0x20013890

0800420c <__libc_init_array>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4d0d      	ldr	r5, [pc, #52]	; (8004244 <__libc_init_array+0x38>)
 8004210:	4c0d      	ldr	r4, [pc, #52]	; (8004248 <__libc_init_array+0x3c>)
 8004212:	1b64      	subs	r4, r4, r5
 8004214:	10a4      	asrs	r4, r4, #2
 8004216:	2600      	movs	r6, #0
 8004218:	42a6      	cmp	r6, r4
 800421a:	d109      	bne.n	8004230 <__libc_init_array+0x24>
 800421c:	4d0b      	ldr	r5, [pc, #44]	; (800424c <__libc_init_array+0x40>)
 800421e:	4c0c      	ldr	r4, [pc, #48]	; (8004250 <__libc_init_array+0x44>)
 8004220:	f000 fca0 	bl	8004b64 <_init>
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	2600      	movs	r6, #0
 800422a:	42a6      	cmp	r6, r4
 800422c:	d105      	bne.n	800423a <__libc_init_array+0x2e>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	f855 3b04 	ldr.w	r3, [r5], #4
 8004234:	4798      	blx	r3
 8004236:	3601      	adds	r6, #1
 8004238:	e7ee      	b.n	8004218 <__libc_init_array+0xc>
 800423a:	f855 3b04 	ldr.w	r3, [r5], #4
 800423e:	4798      	blx	r3
 8004240:	3601      	adds	r6, #1
 8004242:	e7f2      	b.n	800422a <__libc_init_array+0x1e>
 8004244:	08005190 	.word	0x08005190
 8004248:	08005190 	.word	0x08005190
 800424c:	08005190 	.word	0x08005190
 8004250:	08005194 	.word	0x08005194

08004254 <memcpy>:
 8004254:	440a      	add	r2, r1
 8004256:	4291      	cmp	r1, r2
 8004258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800425c:	d100      	bne.n	8004260 <memcpy+0xc>
 800425e:	4770      	bx	lr
 8004260:	b510      	push	{r4, lr}
 8004262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800426a:	4291      	cmp	r1, r2
 800426c:	d1f9      	bne.n	8004262 <memcpy+0xe>
 800426e:	bd10      	pop	{r4, pc}

08004270 <memset>:
 8004270:	4402      	add	r2, r0
 8004272:	4603      	mov	r3, r0
 8004274:	4293      	cmp	r3, r2
 8004276:	d100      	bne.n	800427a <memset+0xa>
 8004278:	4770      	bx	lr
 800427a:	f803 1b01 	strb.w	r1, [r3], #1
 800427e:	e7f9      	b.n	8004274 <memset+0x4>

08004280 <siprintf>:
 8004280:	b40e      	push	{r1, r2, r3}
 8004282:	b500      	push	{lr}
 8004284:	b09c      	sub	sp, #112	; 0x70
 8004286:	ab1d      	add	r3, sp, #116	; 0x74
 8004288:	9002      	str	r0, [sp, #8]
 800428a:	9006      	str	r0, [sp, #24]
 800428c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004290:	4809      	ldr	r0, [pc, #36]	; (80042b8 <siprintf+0x38>)
 8004292:	9107      	str	r1, [sp, #28]
 8004294:	9104      	str	r1, [sp, #16]
 8004296:	4909      	ldr	r1, [pc, #36]	; (80042bc <siprintf+0x3c>)
 8004298:	f853 2b04 	ldr.w	r2, [r3], #4
 800429c:	9105      	str	r1, [sp, #20]
 800429e:	6800      	ldr	r0, [r0, #0]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	a902      	add	r1, sp, #8
 80042a4:	f000 f87a 	bl	800439c <_svfiprintf_r>
 80042a8:	9b02      	ldr	r3, [sp, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	b01c      	add	sp, #112	; 0x70
 80042b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b4:	b003      	add	sp, #12
 80042b6:	4770      	bx	lr
 80042b8:	20013890 	.word	0x20013890
 80042bc:	ffff0208 	.word	0xffff0208

080042c0 <strncat>:
 80042c0:	b530      	push	{r4, r5, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	7825      	ldrb	r5, [r4, #0]
 80042c6:	4623      	mov	r3, r4
 80042c8:	3401      	adds	r4, #1
 80042ca:	2d00      	cmp	r5, #0
 80042cc:	d1fa      	bne.n	80042c4 <strncat+0x4>
 80042ce:	3a01      	subs	r2, #1
 80042d0:	d304      	bcc.n	80042dc <strncat+0x1c>
 80042d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042d6:	f803 4b01 	strb.w	r4, [r3], #1
 80042da:	b904      	cbnz	r4, 80042de <strncat+0x1e>
 80042dc:	bd30      	pop	{r4, r5, pc}
 80042de:	2a00      	cmp	r2, #0
 80042e0:	d1f5      	bne.n	80042ce <strncat+0xe>
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e7f3      	b.n	80042ce <strncat+0xe>

080042e6 <__ssputs_r>:
 80042e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ea:	688e      	ldr	r6, [r1, #8]
 80042ec:	429e      	cmp	r6, r3
 80042ee:	4682      	mov	sl, r0
 80042f0:	460c      	mov	r4, r1
 80042f2:	4690      	mov	r8, r2
 80042f4:	461f      	mov	r7, r3
 80042f6:	d838      	bhi.n	800436a <__ssputs_r+0x84>
 80042f8:	898a      	ldrh	r2, [r1, #12]
 80042fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042fe:	d032      	beq.n	8004366 <__ssputs_r+0x80>
 8004300:	6825      	ldr	r5, [r4, #0]
 8004302:	6909      	ldr	r1, [r1, #16]
 8004304:	eba5 0901 	sub.w	r9, r5, r1
 8004308:	6965      	ldr	r5, [r4, #20]
 800430a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800430e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004312:	3301      	adds	r3, #1
 8004314:	444b      	add	r3, r9
 8004316:	106d      	asrs	r5, r5, #1
 8004318:	429d      	cmp	r5, r3
 800431a:	bf38      	it	cc
 800431c:	461d      	movcc	r5, r3
 800431e:	0553      	lsls	r3, r2, #21
 8004320:	d531      	bpl.n	8004386 <__ssputs_r+0xa0>
 8004322:	4629      	mov	r1, r5
 8004324:	f000 fb54 	bl	80049d0 <_malloc_r>
 8004328:	4606      	mov	r6, r0
 800432a:	b950      	cbnz	r0, 8004342 <__ssputs_r+0x5c>
 800432c:	230c      	movs	r3, #12
 800432e:	f8ca 3000 	str.w	r3, [sl]
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004342:	6921      	ldr	r1, [r4, #16]
 8004344:	464a      	mov	r2, r9
 8004346:	f7ff ff85 	bl	8004254 <memcpy>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	6126      	str	r6, [r4, #16]
 8004358:	6165      	str	r5, [r4, #20]
 800435a:	444e      	add	r6, r9
 800435c:	eba5 0509 	sub.w	r5, r5, r9
 8004360:	6026      	str	r6, [r4, #0]
 8004362:	60a5      	str	r5, [r4, #8]
 8004364:	463e      	mov	r6, r7
 8004366:	42be      	cmp	r6, r7
 8004368:	d900      	bls.n	800436c <__ssputs_r+0x86>
 800436a:	463e      	mov	r6, r7
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	4632      	mov	r2, r6
 8004370:	4641      	mov	r1, r8
 8004372:	f000 faa7 	bl	80048c4 <memmove>
 8004376:	68a3      	ldr	r3, [r4, #8]
 8004378:	1b9b      	subs	r3, r3, r6
 800437a:	60a3      	str	r3, [r4, #8]
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	4433      	add	r3, r6
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	2000      	movs	r0, #0
 8004384:	e7db      	b.n	800433e <__ssputs_r+0x58>
 8004386:	462a      	mov	r2, r5
 8004388:	f000 fb96 	bl	8004ab8 <_realloc_r>
 800438c:	4606      	mov	r6, r0
 800438e:	2800      	cmp	r0, #0
 8004390:	d1e1      	bne.n	8004356 <__ssputs_r+0x70>
 8004392:	6921      	ldr	r1, [r4, #16]
 8004394:	4650      	mov	r0, sl
 8004396:	f000 faaf 	bl	80048f8 <_free_r>
 800439a:	e7c7      	b.n	800432c <__ssputs_r+0x46>

0800439c <_svfiprintf_r>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	4698      	mov	r8, r3
 80043a2:	898b      	ldrh	r3, [r1, #12]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	b09d      	sub	sp, #116	; 0x74
 80043a8:	4607      	mov	r7, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	d50e      	bpl.n	80043ce <_svfiprintf_r+0x32>
 80043b0:	690b      	ldr	r3, [r1, #16]
 80043b2:	b963      	cbnz	r3, 80043ce <_svfiprintf_r+0x32>
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	f000 fb0b 	bl	80049d0 <_malloc_r>
 80043ba:	6028      	str	r0, [r5, #0]
 80043bc:	6128      	str	r0, [r5, #16]
 80043be:	b920      	cbnz	r0, 80043ca <_svfiprintf_r+0x2e>
 80043c0:	230c      	movs	r3, #12
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c8:	e0d1      	b.n	800456e <_svfiprintf_r+0x1d2>
 80043ca:	2340      	movs	r3, #64	; 0x40
 80043cc:	616b      	str	r3, [r5, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9309      	str	r3, [sp, #36]	; 0x24
 80043d2:	2320      	movs	r3, #32
 80043d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043dc:	2330      	movs	r3, #48	; 0x30
 80043de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004588 <_svfiprintf_r+0x1ec>
 80043e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043e6:	f04f 0901 	mov.w	r9, #1
 80043ea:	4623      	mov	r3, r4
 80043ec:	469a      	mov	sl, r3
 80043ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f2:	b10a      	cbz	r2, 80043f8 <_svfiprintf_r+0x5c>
 80043f4:	2a25      	cmp	r2, #37	; 0x25
 80043f6:	d1f9      	bne.n	80043ec <_svfiprintf_r+0x50>
 80043f8:	ebba 0b04 	subs.w	fp, sl, r4
 80043fc:	d00b      	beq.n	8004416 <_svfiprintf_r+0x7a>
 80043fe:	465b      	mov	r3, fp
 8004400:	4622      	mov	r2, r4
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ff6e 	bl	80042e6 <__ssputs_r>
 800440a:	3001      	adds	r0, #1
 800440c:	f000 80aa 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004412:	445a      	add	r2, fp
 8004414:	9209      	str	r2, [sp, #36]	; 0x24
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a2 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004420:	2300      	movs	r3, #0
 8004422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442a:	f10a 0a01 	add.w	sl, sl, #1
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	9307      	str	r3, [sp, #28]
 8004432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004436:	931a      	str	r3, [sp, #104]	; 0x68
 8004438:	4654      	mov	r4, sl
 800443a:	2205      	movs	r2, #5
 800443c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004440:	4851      	ldr	r0, [pc, #324]	; (8004588 <_svfiprintf_r+0x1ec>)
 8004442:	f7fb feed 	bl	8000220 <memchr>
 8004446:	9a04      	ldr	r2, [sp, #16]
 8004448:	b9d8      	cbnz	r0, 8004482 <_svfiprintf_r+0xe6>
 800444a:	06d0      	lsls	r0, r2, #27
 800444c:	bf44      	itt	mi
 800444e:	2320      	movmi	r3, #32
 8004450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004454:	0711      	lsls	r1, r2, #28
 8004456:	bf44      	itt	mi
 8004458:	232b      	movmi	r3, #43	; 0x2b
 800445a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800445e:	f89a 3000 	ldrb.w	r3, [sl]
 8004462:	2b2a      	cmp	r3, #42	; 0x2a
 8004464:	d015      	beq.n	8004492 <_svfiprintf_r+0xf6>
 8004466:	9a07      	ldr	r2, [sp, #28]
 8004468:	4654      	mov	r4, sl
 800446a:	2000      	movs	r0, #0
 800446c:	f04f 0c0a 	mov.w	ip, #10
 8004470:	4621      	mov	r1, r4
 8004472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004476:	3b30      	subs	r3, #48	; 0x30
 8004478:	2b09      	cmp	r3, #9
 800447a:	d94e      	bls.n	800451a <_svfiprintf_r+0x17e>
 800447c:	b1b0      	cbz	r0, 80044ac <_svfiprintf_r+0x110>
 800447e:	9207      	str	r2, [sp, #28]
 8004480:	e014      	b.n	80044ac <_svfiprintf_r+0x110>
 8004482:	eba0 0308 	sub.w	r3, r0, r8
 8004486:	fa09 f303 	lsl.w	r3, r9, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	9304      	str	r3, [sp, #16]
 800448e:	46a2      	mov	sl, r4
 8004490:	e7d2      	b.n	8004438 <_svfiprintf_r+0x9c>
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	9103      	str	r1, [sp, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	bfbb      	ittet	lt
 800449e:	425b      	neglt	r3, r3
 80044a0:	f042 0202 	orrlt.w	r2, r2, #2
 80044a4:	9307      	strge	r3, [sp, #28]
 80044a6:	9307      	strlt	r3, [sp, #28]
 80044a8:	bfb8      	it	lt
 80044aa:	9204      	strlt	r2, [sp, #16]
 80044ac:	7823      	ldrb	r3, [r4, #0]
 80044ae:	2b2e      	cmp	r3, #46	; 0x2e
 80044b0:	d10c      	bne.n	80044cc <_svfiprintf_r+0x130>
 80044b2:	7863      	ldrb	r3, [r4, #1]
 80044b4:	2b2a      	cmp	r3, #42	; 0x2a
 80044b6:	d135      	bne.n	8004524 <_svfiprintf_r+0x188>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	9203      	str	r2, [sp, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bfb8      	it	lt
 80044c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044c8:	3402      	adds	r4, #2
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004598 <_svfiprintf_r+0x1fc>
 80044d0:	7821      	ldrb	r1, [r4, #0]
 80044d2:	2203      	movs	r2, #3
 80044d4:	4650      	mov	r0, sl
 80044d6:	f7fb fea3 	bl	8000220 <memchr>
 80044da:	b140      	cbz	r0, 80044ee <_svfiprintf_r+0x152>
 80044dc:	2340      	movs	r3, #64	; 0x40
 80044de:	eba0 000a 	sub.w	r0, r0, sl
 80044e2:	fa03 f000 	lsl.w	r0, r3, r0
 80044e6:	9b04      	ldr	r3, [sp, #16]
 80044e8:	4303      	orrs	r3, r0
 80044ea:	3401      	adds	r4, #1
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f2:	4826      	ldr	r0, [pc, #152]	; (800458c <_svfiprintf_r+0x1f0>)
 80044f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044f8:	2206      	movs	r2, #6
 80044fa:	f7fb fe91 	bl	8000220 <memchr>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d038      	beq.n	8004574 <_svfiprintf_r+0x1d8>
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <_svfiprintf_r+0x1f4>)
 8004504:	bb1b      	cbnz	r3, 800454e <_svfiprintf_r+0x1b2>
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	3307      	adds	r3, #7
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	3308      	adds	r3, #8
 8004510:	9303      	str	r3, [sp, #12]
 8004512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004514:	4433      	add	r3, r6
 8004516:	9309      	str	r3, [sp, #36]	; 0x24
 8004518:	e767      	b.n	80043ea <_svfiprintf_r+0x4e>
 800451a:	fb0c 3202 	mla	r2, ip, r2, r3
 800451e:	460c      	mov	r4, r1
 8004520:	2001      	movs	r0, #1
 8004522:	e7a5      	b.n	8004470 <_svfiprintf_r+0xd4>
 8004524:	2300      	movs	r3, #0
 8004526:	3401      	adds	r4, #1
 8004528:	9305      	str	r3, [sp, #20]
 800452a:	4619      	mov	r1, r3
 800452c:	f04f 0c0a 	mov.w	ip, #10
 8004530:	4620      	mov	r0, r4
 8004532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004536:	3a30      	subs	r2, #48	; 0x30
 8004538:	2a09      	cmp	r2, #9
 800453a:	d903      	bls.n	8004544 <_svfiprintf_r+0x1a8>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0c5      	beq.n	80044cc <_svfiprintf_r+0x130>
 8004540:	9105      	str	r1, [sp, #20]
 8004542:	e7c3      	b.n	80044cc <_svfiprintf_r+0x130>
 8004544:	fb0c 2101 	mla	r1, ip, r1, r2
 8004548:	4604      	mov	r4, r0
 800454a:	2301      	movs	r3, #1
 800454c:	e7f0      	b.n	8004530 <_svfiprintf_r+0x194>
 800454e:	ab03      	add	r3, sp, #12
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	462a      	mov	r2, r5
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <_svfiprintf_r+0x1f8>)
 8004556:	a904      	add	r1, sp, #16
 8004558:	4638      	mov	r0, r7
 800455a:	f3af 8000 	nop.w
 800455e:	1c42      	adds	r2, r0, #1
 8004560:	4606      	mov	r6, r0
 8004562:	d1d6      	bne.n	8004512 <_svfiprintf_r+0x176>
 8004564:	89ab      	ldrh	r3, [r5, #12]
 8004566:	065b      	lsls	r3, r3, #25
 8004568:	f53f af2c 	bmi.w	80043c4 <_svfiprintf_r+0x28>
 800456c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456e:	b01d      	add	sp, #116	; 0x74
 8004570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004574:	ab03      	add	r3, sp, #12
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	462a      	mov	r2, r5
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <_svfiprintf_r+0x1f8>)
 800457c:	a904      	add	r1, sp, #16
 800457e:	4638      	mov	r0, r7
 8004580:	f000 f87a 	bl	8004678 <_printf_i>
 8004584:	e7eb      	b.n	800455e <_svfiprintf_r+0x1c2>
 8004586:	bf00      	nop
 8004588:	08005154 	.word	0x08005154
 800458c:	0800515e 	.word	0x0800515e
 8004590:	00000000 	.word	0x00000000
 8004594:	080042e7 	.word	0x080042e7
 8004598:	0800515a 	.word	0x0800515a

0800459c <_printf_common>:
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	4616      	mov	r6, r2
 80045a2:	4699      	mov	r9, r3
 80045a4:	688a      	ldr	r2, [r1, #8]
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bfb8      	it	lt
 80045b0:	4613      	movlt	r3, r2
 80045b2:	6033      	str	r3, [r6, #0]
 80045b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b8:	4607      	mov	r7, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	b10a      	cbz	r2, 80045c2 <_printf_common+0x26>
 80045be:	3301      	adds	r3, #1
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	6833      	ldrmi	r3, [r6, #0]
 80045ca:	3302      	addmi	r3, #2
 80045cc:	6033      	strmi	r3, [r6, #0]
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	f015 0506 	ands.w	r5, r5, #6
 80045d4:	d106      	bne.n	80045e4 <_printf_common+0x48>
 80045d6:	f104 0a19 	add.w	sl, r4, #25
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	6832      	ldr	r2, [r6, #0]
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	dc26      	bgt.n	8004632 <_printf_common+0x96>
 80045e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e8:	1e13      	subs	r3, r2, #0
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	bf18      	it	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	0692      	lsls	r2, r2, #26
 80045f2:	d42b      	bmi.n	800464c <_printf_common+0xb0>
 80045f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f8:	4649      	mov	r1, r9
 80045fa:	4638      	mov	r0, r7
 80045fc:	47c0      	blx	r8
 80045fe:	3001      	adds	r0, #1
 8004600:	d01e      	beq.n	8004640 <_printf_common+0xa4>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	68e5      	ldr	r5, [r4, #12]
 8004606:	6832      	ldr	r2, [r6, #0]
 8004608:	f003 0306 	and.w	r3, r3, #6
 800460c:	2b04      	cmp	r3, #4
 800460e:	bf08      	it	eq
 8004610:	1aad      	subeq	r5, r5, r2
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	6922      	ldr	r2, [r4, #16]
 8004616:	bf0c      	ite	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	2500      	movne	r5, #0
 800461e:	4293      	cmp	r3, r2
 8004620:	bfc4      	itt	gt
 8004622:	1a9b      	subgt	r3, r3, r2
 8004624:	18ed      	addgt	r5, r5, r3
 8004626:	2600      	movs	r6, #0
 8004628:	341a      	adds	r4, #26
 800462a:	42b5      	cmp	r5, r6
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xc8>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xa8>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4649      	mov	r1, r9
 8004638:	4638      	mov	r0, r7
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xac>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c6      	b.n	80045da <_printf_common+0x3e>
 800464c:	18e1      	adds	r1, r4, r3
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	2030      	movs	r0, #48	; 0x30
 8004652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004656:	4422      	add	r2, r4
 8004658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004660:	3302      	adds	r3, #2
 8004662:	e7c7      	b.n	80045f4 <_printf_common+0x58>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xa4>
 8004672:	3601      	adds	r6, #1
 8004674:	e7d9      	b.n	800462a <_printf_common+0x8e>
	...

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	7e0f      	ldrb	r7, [r1, #24]
 800467e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004680:	2f78      	cmp	r7, #120	; 0x78
 8004682:	4691      	mov	r9, r2
 8004684:	4680      	mov	r8, r0
 8004686:	460c      	mov	r4, r1
 8004688:	469a      	mov	sl, r3
 800468a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	; 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d8 	beq.w	800484a <_printf_i+0x1d2>
 800469a:	2f58      	cmp	r7, #88	; 0x58
 800469c:	f000 80a3 	beq.w	80047e6 <_printf_i+0x16e>
 80046a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a101      	add	r1, pc, #4	; (adr r1, 80046b8 <_printf_i+0x40>)
 80046b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004831 	.word	0x08004831
 80046e8:	08004755 	.word	0x08004755
 80046ec:	08004813 	.word	0x08004813
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004853 	.word	0x08004853
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	08004755 	.word	0x08004755
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	0800481b 	.word	0x0800481b
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	602a      	str	r2, [r5, #0]
 8004718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e0a3      	b.n	800486c <_printf_i+0x1f4>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	6829      	ldr	r1, [r5, #0]
 8004728:	0606      	lsls	r6, r0, #24
 800472a:	f101 0304 	add.w	r3, r1, #4
 800472e:	d50a      	bpl.n	8004746 <_printf_i+0xce>
 8004730:	680e      	ldr	r6, [r1, #0]
 8004732:	602b      	str	r3, [r5, #0]
 8004734:	2e00      	cmp	r6, #0
 8004736:	da03      	bge.n	8004740 <_printf_i+0xc8>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	4276      	negs	r6, r6
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	485e      	ldr	r0, [pc, #376]	; (80048bc <_printf_i+0x244>)
 8004742:	230a      	movs	r3, #10
 8004744:	e019      	b.n	800477a <_printf_i+0x102>
 8004746:	680e      	ldr	r6, [r1, #0]
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800474e:	bf18      	it	ne
 8004750:	b236      	sxthne	r6, r6
 8004752:	e7ef      	b.n	8004734 <_printf_i+0xbc>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	1d19      	adds	r1, r3, #4
 800475a:	6029      	str	r1, [r5, #0]
 800475c:	0601      	lsls	r1, r0, #24
 800475e:	d501      	bpl.n	8004764 <_printf_i+0xec>
 8004760:	681e      	ldr	r6, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0xf2>
 8004764:	0646      	lsls	r6, r0, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0xe8>
 8004768:	881e      	ldrh	r6, [r3, #0]
 800476a:	4854      	ldr	r0, [pc, #336]	; (80048bc <_printf_i+0x244>)
 800476c:	2f6f      	cmp	r7, #111	; 0x6f
 800476e:	bf0c      	ite	eq
 8004770:	2308      	moveq	r3, #8
 8004772:	230a      	movne	r3, #10
 8004774:	2100      	movs	r1, #0
 8004776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477a:	6865      	ldr	r5, [r4, #4]
 800477c:	60a5      	str	r5, [r4, #8]
 800477e:	2d00      	cmp	r5, #0
 8004780:	bfa2      	ittt	ge
 8004782:	6821      	ldrge	r1, [r4, #0]
 8004784:	f021 0104 	bicge.w	r1, r1, #4
 8004788:	6021      	strge	r1, [r4, #0]
 800478a:	b90e      	cbnz	r6, 8004790 <_printf_i+0x118>
 800478c:	2d00      	cmp	r5, #0
 800478e:	d04d      	beq.n	800482c <_printf_i+0x1b4>
 8004790:	4615      	mov	r5, r2
 8004792:	fbb6 f1f3 	udiv	r1, r6, r3
 8004796:	fb03 6711 	mls	r7, r3, r1, r6
 800479a:	5dc7      	ldrb	r7, [r0, r7]
 800479c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047a0:	4637      	mov	r7, r6
 80047a2:	42bb      	cmp	r3, r7
 80047a4:	460e      	mov	r6, r1
 80047a6:	d9f4      	bls.n	8004792 <_printf_i+0x11a>
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d10b      	bne.n	80047c4 <_printf_i+0x14c>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	07de      	lsls	r6, r3, #31
 80047b0:	d508      	bpl.n	80047c4 <_printf_i+0x14c>
 80047b2:	6923      	ldr	r3, [r4, #16]
 80047b4:	6861      	ldr	r1, [r4, #4]
 80047b6:	4299      	cmp	r1, r3
 80047b8:	bfde      	ittt	le
 80047ba:	2330      	movle	r3, #48	; 0x30
 80047bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047c4:	1b52      	subs	r2, r2, r5
 80047c6:	6122      	str	r2, [r4, #16]
 80047c8:	f8cd a000 	str.w	sl, [sp]
 80047cc:	464b      	mov	r3, r9
 80047ce:	aa03      	add	r2, sp, #12
 80047d0:	4621      	mov	r1, r4
 80047d2:	4640      	mov	r0, r8
 80047d4:	f7ff fee2 	bl	800459c <_printf_common>
 80047d8:	3001      	adds	r0, #1
 80047da:	d14c      	bne.n	8004876 <_printf_i+0x1fe>
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047e0:	b004      	add	sp, #16
 80047e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e6:	4835      	ldr	r0, [pc, #212]	; (80048bc <_printf_i+0x244>)
 80047e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047ec:	6829      	ldr	r1, [r5, #0]
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047f4:	6029      	str	r1, [r5, #0]
 80047f6:	061d      	lsls	r5, r3, #24
 80047f8:	d514      	bpl.n	8004824 <_printf_i+0x1ac>
 80047fa:	07df      	lsls	r7, r3, #31
 80047fc:	bf44      	itt	mi
 80047fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004802:	6023      	strmi	r3, [r4, #0]
 8004804:	b91e      	cbnz	r6, 800480e <_printf_i+0x196>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	f023 0320 	bic.w	r3, r3, #32
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	2310      	movs	r3, #16
 8004810:	e7b0      	b.n	8004774 <_printf_i+0xfc>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	f043 0320 	orr.w	r3, r3, #32
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	2378      	movs	r3, #120	; 0x78
 800481c:	4828      	ldr	r0, [pc, #160]	; (80048c0 <_printf_i+0x248>)
 800481e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004822:	e7e3      	b.n	80047ec <_printf_i+0x174>
 8004824:	0659      	lsls	r1, r3, #25
 8004826:	bf48      	it	mi
 8004828:	b2b6      	uxthmi	r6, r6
 800482a:	e7e6      	b.n	80047fa <_printf_i+0x182>
 800482c:	4615      	mov	r5, r2
 800482e:	e7bb      	b.n	80047a8 <_printf_i+0x130>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	6826      	ldr	r6, [r4, #0]
 8004834:	6961      	ldr	r1, [r4, #20]
 8004836:	1d18      	adds	r0, r3, #4
 8004838:	6028      	str	r0, [r5, #0]
 800483a:	0635      	lsls	r5, r6, #24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	d501      	bpl.n	8004844 <_printf_i+0x1cc>
 8004840:	6019      	str	r1, [r3, #0]
 8004842:	e002      	b.n	800484a <_printf_i+0x1d2>
 8004844:	0670      	lsls	r0, r6, #25
 8004846:	d5fb      	bpl.n	8004840 <_printf_i+0x1c8>
 8004848:	8019      	strh	r1, [r3, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	4615      	mov	r5, r2
 8004850:	e7ba      	b.n	80047c8 <_printf_i+0x150>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	1d1a      	adds	r2, r3, #4
 8004856:	602a      	str	r2, [r5, #0]
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	2100      	movs	r1, #0
 800485e:	4628      	mov	r0, r5
 8004860:	f7fb fcde 	bl	8000220 <memchr>
 8004864:	b108      	cbz	r0, 800486a <_printf_i+0x1f2>
 8004866:	1b40      	subs	r0, r0, r5
 8004868:	6060      	str	r0, [r4, #4]
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004874:	e7a8      	b.n	80047c8 <_printf_i+0x150>
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	462a      	mov	r2, r5
 800487a:	4649      	mov	r1, r9
 800487c:	4640      	mov	r0, r8
 800487e:	47d0      	blx	sl
 8004880:	3001      	adds	r0, #1
 8004882:	d0ab      	beq.n	80047dc <_printf_i+0x164>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	079b      	lsls	r3, r3, #30
 8004888:	d413      	bmi.n	80048b2 <_printf_i+0x23a>
 800488a:	68e0      	ldr	r0, [r4, #12]
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	4298      	cmp	r0, r3
 8004890:	bfb8      	it	lt
 8004892:	4618      	movlt	r0, r3
 8004894:	e7a4      	b.n	80047e0 <_printf_i+0x168>
 8004896:	2301      	movs	r3, #1
 8004898:	4632      	mov	r2, r6
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	47d0      	blx	sl
 80048a0:	3001      	adds	r0, #1
 80048a2:	d09b      	beq.n	80047dc <_printf_i+0x164>
 80048a4:	3501      	adds	r5, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	9903      	ldr	r1, [sp, #12]
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	42ab      	cmp	r3, r5
 80048ae:	dcf2      	bgt.n	8004896 <_printf_i+0x21e>
 80048b0:	e7eb      	b.n	800488a <_printf_i+0x212>
 80048b2:	2500      	movs	r5, #0
 80048b4:	f104 0619 	add.w	r6, r4, #25
 80048b8:	e7f5      	b.n	80048a6 <_printf_i+0x22e>
 80048ba:	bf00      	nop
 80048bc:	08005165 	.word	0x08005165
 80048c0:	08005176 	.word	0x08005176

080048c4 <memmove>:
 80048c4:	4288      	cmp	r0, r1
 80048c6:	b510      	push	{r4, lr}
 80048c8:	eb01 0402 	add.w	r4, r1, r2
 80048cc:	d902      	bls.n	80048d4 <memmove+0x10>
 80048ce:	4284      	cmp	r4, r0
 80048d0:	4623      	mov	r3, r4
 80048d2:	d807      	bhi.n	80048e4 <memmove+0x20>
 80048d4:	1e43      	subs	r3, r0, #1
 80048d6:	42a1      	cmp	r1, r4
 80048d8:	d008      	beq.n	80048ec <memmove+0x28>
 80048da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048e2:	e7f8      	b.n	80048d6 <memmove+0x12>
 80048e4:	4402      	add	r2, r0
 80048e6:	4601      	mov	r1, r0
 80048e8:	428a      	cmp	r2, r1
 80048ea:	d100      	bne.n	80048ee <memmove+0x2a>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048f6:	e7f7      	b.n	80048e8 <memmove+0x24>

080048f8 <_free_r>:
 80048f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048fa:	2900      	cmp	r1, #0
 80048fc:	d044      	beq.n	8004988 <_free_r+0x90>
 80048fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004902:	9001      	str	r0, [sp, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f1a1 0404 	sub.w	r4, r1, #4
 800490a:	bfb8      	it	lt
 800490c:	18e4      	addlt	r4, r4, r3
 800490e:	f000 f913 	bl	8004b38 <__malloc_lock>
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <_free_r+0x94>)
 8004914:	9801      	ldr	r0, [sp, #4]
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	b933      	cbnz	r3, 8004928 <_free_r+0x30>
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	6014      	str	r4, [r2, #0]
 800491e:	b003      	add	sp, #12
 8004920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004924:	f000 b90e 	b.w	8004b44 <__malloc_unlock>
 8004928:	42a3      	cmp	r3, r4
 800492a:	d908      	bls.n	800493e <_free_r+0x46>
 800492c:	6825      	ldr	r5, [r4, #0]
 800492e:	1961      	adds	r1, r4, r5
 8004930:	428b      	cmp	r3, r1
 8004932:	bf01      	itttt	eq
 8004934:	6819      	ldreq	r1, [r3, #0]
 8004936:	685b      	ldreq	r3, [r3, #4]
 8004938:	1949      	addeq	r1, r1, r5
 800493a:	6021      	streq	r1, [r4, #0]
 800493c:	e7ed      	b.n	800491a <_free_r+0x22>
 800493e:	461a      	mov	r2, r3
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b10b      	cbz	r3, 8004948 <_free_r+0x50>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d9fa      	bls.n	800493e <_free_r+0x46>
 8004948:	6811      	ldr	r1, [r2, #0]
 800494a:	1855      	adds	r5, r2, r1
 800494c:	42a5      	cmp	r5, r4
 800494e:	d10b      	bne.n	8004968 <_free_r+0x70>
 8004950:	6824      	ldr	r4, [r4, #0]
 8004952:	4421      	add	r1, r4
 8004954:	1854      	adds	r4, r2, r1
 8004956:	42a3      	cmp	r3, r4
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	d1e0      	bne.n	800491e <_free_r+0x26>
 800495c:	681c      	ldr	r4, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	6053      	str	r3, [r2, #4]
 8004962:	4421      	add	r1, r4
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	e7da      	b.n	800491e <_free_r+0x26>
 8004968:	d902      	bls.n	8004970 <_free_r+0x78>
 800496a:	230c      	movs	r3, #12
 800496c:	6003      	str	r3, [r0, #0]
 800496e:	e7d6      	b.n	800491e <_free_r+0x26>
 8004970:	6825      	ldr	r5, [r4, #0]
 8004972:	1961      	adds	r1, r4, r5
 8004974:	428b      	cmp	r3, r1
 8004976:	bf04      	itt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	bf04      	itt	eq
 8004980:	1949      	addeq	r1, r1, r5
 8004982:	6021      	streq	r1, [r4, #0]
 8004984:	6054      	str	r4, [r2, #4]
 8004986:	e7ca      	b.n	800491e <_free_r+0x26>
 8004988:	b003      	add	sp, #12
 800498a:	bd30      	pop	{r4, r5, pc}
 800498c:	20013ae4 	.word	0x20013ae4

08004990 <sbrk_aligned>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4e0e      	ldr	r6, [pc, #56]	; (80049cc <sbrk_aligned+0x3c>)
 8004994:	460c      	mov	r4, r1
 8004996:	6831      	ldr	r1, [r6, #0]
 8004998:	4605      	mov	r5, r0
 800499a:	b911      	cbnz	r1, 80049a2 <sbrk_aligned+0x12>
 800499c:	f000 f8bc 	bl	8004b18 <_sbrk_r>
 80049a0:	6030      	str	r0, [r6, #0]
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 f8b7 	bl	8004b18 <_sbrk_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d00a      	beq.n	80049c4 <sbrk_aligned+0x34>
 80049ae:	1cc4      	adds	r4, r0, #3
 80049b0:	f024 0403 	bic.w	r4, r4, #3
 80049b4:	42a0      	cmp	r0, r4
 80049b6:	d007      	beq.n	80049c8 <sbrk_aligned+0x38>
 80049b8:	1a21      	subs	r1, r4, r0
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 f8ac 	bl	8004b18 <_sbrk_r>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d101      	bne.n	80049c8 <sbrk_aligned+0x38>
 80049c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80049c8:	4620      	mov	r0, r4
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	20013ae8 	.word	0x20013ae8

080049d0 <_malloc_r>:
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d4:	1ccd      	adds	r5, r1, #3
 80049d6:	f025 0503 	bic.w	r5, r5, #3
 80049da:	3508      	adds	r5, #8
 80049dc:	2d0c      	cmp	r5, #12
 80049de:	bf38      	it	cc
 80049e0:	250c      	movcc	r5, #12
 80049e2:	2d00      	cmp	r5, #0
 80049e4:	4607      	mov	r7, r0
 80049e6:	db01      	blt.n	80049ec <_malloc_r+0x1c>
 80049e8:	42a9      	cmp	r1, r5
 80049ea:	d905      	bls.n	80049f8 <_malloc_r+0x28>
 80049ec:	230c      	movs	r3, #12
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	2600      	movs	r6, #0
 80049f2:	4630      	mov	r0, r6
 80049f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f8:	4e2e      	ldr	r6, [pc, #184]	; (8004ab4 <_malloc_r+0xe4>)
 80049fa:	f000 f89d 	bl	8004b38 <__malloc_lock>
 80049fe:	6833      	ldr	r3, [r6, #0]
 8004a00:	461c      	mov	r4, r3
 8004a02:	bb34      	cbnz	r4, 8004a52 <_malloc_r+0x82>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	f7ff ffc2 	bl	8004990 <sbrk_aligned>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	4604      	mov	r4, r0
 8004a10:	d14d      	bne.n	8004aae <_malloc_r+0xde>
 8004a12:	6834      	ldr	r4, [r6, #0]
 8004a14:	4626      	mov	r6, r4
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d140      	bne.n	8004a9c <_malloc_r+0xcc>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4638      	mov	r0, r7
 8004a20:	eb04 0803 	add.w	r8, r4, r3
 8004a24:	f000 f878 	bl	8004b18 <_sbrk_r>
 8004a28:	4580      	cmp	r8, r0
 8004a2a:	d13a      	bne.n	8004aa2 <_malloc_r+0xd2>
 8004a2c:	6821      	ldr	r1, [r4, #0]
 8004a2e:	3503      	adds	r5, #3
 8004a30:	1a6d      	subs	r5, r5, r1
 8004a32:	f025 0503 	bic.w	r5, r5, #3
 8004a36:	3508      	adds	r5, #8
 8004a38:	2d0c      	cmp	r5, #12
 8004a3a:	bf38      	it	cc
 8004a3c:	250c      	movcc	r5, #12
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4638      	mov	r0, r7
 8004a42:	f7ff ffa5 	bl	8004990 <sbrk_aligned>
 8004a46:	3001      	adds	r0, #1
 8004a48:	d02b      	beq.n	8004aa2 <_malloc_r+0xd2>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	442b      	add	r3, r5
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	e00e      	b.n	8004a70 <_malloc_r+0xa0>
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	1b52      	subs	r2, r2, r5
 8004a56:	d41e      	bmi.n	8004a96 <_malloc_r+0xc6>
 8004a58:	2a0b      	cmp	r2, #11
 8004a5a:	d916      	bls.n	8004a8a <_malloc_r+0xba>
 8004a5c:	1961      	adds	r1, r4, r5
 8004a5e:	42a3      	cmp	r3, r4
 8004a60:	6025      	str	r5, [r4, #0]
 8004a62:	bf18      	it	ne
 8004a64:	6059      	strne	r1, [r3, #4]
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	bf08      	it	eq
 8004a6a:	6031      	streq	r1, [r6, #0]
 8004a6c:	5162      	str	r2, [r4, r5]
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	4638      	mov	r0, r7
 8004a72:	f104 060b 	add.w	r6, r4, #11
 8004a76:	f000 f865 	bl	8004b44 <__malloc_unlock>
 8004a7a:	f026 0607 	bic.w	r6, r6, #7
 8004a7e:	1d23      	adds	r3, r4, #4
 8004a80:	1af2      	subs	r2, r6, r3
 8004a82:	d0b6      	beq.n	80049f2 <_malloc_r+0x22>
 8004a84:	1b9b      	subs	r3, r3, r6
 8004a86:	50a3      	str	r3, [r4, r2]
 8004a88:	e7b3      	b.n	80049f2 <_malloc_r+0x22>
 8004a8a:	6862      	ldr	r2, [r4, #4]
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	bf0c      	ite	eq
 8004a90:	6032      	streq	r2, [r6, #0]
 8004a92:	605a      	strne	r2, [r3, #4]
 8004a94:	e7ec      	b.n	8004a70 <_malloc_r+0xa0>
 8004a96:	4623      	mov	r3, r4
 8004a98:	6864      	ldr	r4, [r4, #4]
 8004a9a:	e7b2      	b.n	8004a02 <_malloc_r+0x32>
 8004a9c:	4634      	mov	r4, r6
 8004a9e:	6876      	ldr	r6, [r6, #4]
 8004aa0:	e7b9      	b.n	8004a16 <_malloc_r+0x46>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f000 f84c 	bl	8004b44 <__malloc_unlock>
 8004aac:	e7a1      	b.n	80049f2 <_malloc_r+0x22>
 8004aae:	6025      	str	r5, [r4, #0]
 8004ab0:	e7de      	b.n	8004a70 <_malloc_r+0xa0>
 8004ab2:	bf00      	nop
 8004ab4:	20013ae4 	.word	0x20013ae4

08004ab8 <_realloc_r>:
 8004ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004abc:	4680      	mov	r8, r0
 8004abe:	4614      	mov	r4, r2
 8004ac0:	460e      	mov	r6, r1
 8004ac2:	b921      	cbnz	r1, 8004ace <_realloc_r+0x16>
 8004ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac8:	4611      	mov	r1, r2
 8004aca:	f7ff bf81 	b.w	80049d0 <_malloc_r>
 8004ace:	b92a      	cbnz	r2, 8004adc <_realloc_r+0x24>
 8004ad0:	f7ff ff12 	bl	80048f8 <_free_r>
 8004ad4:	4625      	mov	r5, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004adc:	f000 f838 	bl	8004b50 <_malloc_usable_size_r>
 8004ae0:	4284      	cmp	r4, r0
 8004ae2:	4607      	mov	r7, r0
 8004ae4:	d802      	bhi.n	8004aec <_realloc_r+0x34>
 8004ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004aea:	d812      	bhi.n	8004b12 <_realloc_r+0x5a>
 8004aec:	4621      	mov	r1, r4
 8004aee:	4640      	mov	r0, r8
 8004af0:	f7ff ff6e 	bl	80049d0 <_malloc_r>
 8004af4:	4605      	mov	r5, r0
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d0ed      	beq.n	8004ad6 <_realloc_r+0x1e>
 8004afa:	42bc      	cmp	r4, r7
 8004afc:	4622      	mov	r2, r4
 8004afe:	4631      	mov	r1, r6
 8004b00:	bf28      	it	cs
 8004b02:	463a      	movcs	r2, r7
 8004b04:	f7ff fba6 	bl	8004254 <memcpy>
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f7ff fef4 	bl	80048f8 <_free_r>
 8004b10:	e7e1      	b.n	8004ad6 <_realloc_r+0x1e>
 8004b12:	4635      	mov	r5, r6
 8004b14:	e7df      	b.n	8004ad6 <_realloc_r+0x1e>
	...

08004b18 <_sbrk_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d06      	ldr	r5, [pc, #24]	; (8004b34 <_sbrk_r+0x1c>)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	f7fd fa66 	bl	8001ff4 <_sbrk>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_sbrk_r+0x1a>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_sbrk_r+0x1a>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	20013aec 	.word	0x20013aec

08004b38 <__malloc_lock>:
 8004b38:	4801      	ldr	r0, [pc, #4]	; (8004b40 <__malloc_lock+0x8>)
 8004b3a:	f000 b811 	b.w	8004b60 <__retarget_lock_acquire_recursive>
 8004b3e:	bf00      	nop
 8004b40:	20013af0 	.word	0x20013af0

08004b44 <__malloc_unlock>:
 8004b44:	4801      	ldr	r0, [pc, #4]	; (8004b4c <__malloc_unlock+0x8>)
 8004b46:	f000 b80c 	b.w	8004b62 <__retarget_lock_release_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	20013af0 	.word	0x20013af0

08004b50 <_malloc_usable_size_r>:
 8004b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b54:	1f18      	subs	r0, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfbc      	itt	lt
 8004b5a:	580b      	ldrlt	r3, [r1, r0]
 8004b5c:	18c0      	addlt	r0, r0, r3
 8004b5e:	4770      	bx	lr

08004b60 <__retarget_lock_acquire_recursive>:
 8004b60:	4770      	bx	lr

08004b62 <__retarget_lock_release_recursive>:
 8004b62:	4770      	bx	lr

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
