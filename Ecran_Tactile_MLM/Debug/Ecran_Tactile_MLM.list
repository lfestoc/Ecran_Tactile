
Ecran_Tactile_MLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000513c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00038714  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  00038714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00018714  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20018714  0801e024  00038714  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200188bc  0801e024  000388bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00038714  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b28a  00000000  00000000  00038744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f92  00000000  00000000  000439ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00045960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  000462c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002347d  00000000  00000000  00046b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2a4  00000000  00000000  00069fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d55c0  00000000  00000000  00076259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b819  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  0014b86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20018714 	.word	0x20018714
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052f4 	.word	0x080052f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20018718 	.word	0x20018718
 800020c:	080052f4 	.word	0x080052f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <ILI9341_SendCommand+0x54>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <ILI9341_SendCommand+0x58>)
 80005d8:	8811      	ldrh	r1, [r2, #0]
 80005da:	2200      	movs	r2, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f905 	bl	80037ec <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <ILI9341_SendCommand+0x5c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <ILI9341_SendCommand+0x60>)
 80005e8:	8811      	ldrh	r1, [r2, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 f8fd 	bl	80037ec <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	2305      	movs	r3, #5
 80005f8:	2201      	movs	r2, #1
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <ILI9341_SendCommand+0x64>)
 80005fc:	f003 ffc1 	bl	8004582 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <ILI9341_SendCommand+0x5c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <ILI9341_SendCommand+0x60>)
 8000606:	8811      	ldrh	r1, [r2, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f8ee 	bl	80037ec <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20018794 	.word	0x20018794
 800061c:	20018798 	.word	0x20018798
 8000620:	2001878c 	.word	0x2001878c
 8000624:	20018790 	.word	0x20018790
 8000628:	20018734 	.word	0x20018734

0800062c <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <ILI9341_SendData+0x54>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <ILI9341_SendData+0x58>)
 8000640:	8811      	ldrh	r1, [r2, #0]
 8000642:	2201      	movs	r2, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f003 f8d1 	bl	80037ec <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <ILI9341_SendData+0x5c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <ILI9341_SendData+0x60>)
 8000650:	8811      	ldrh	r1, [r2, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f003 f8c9 	bl	80037ec <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800065a:	f107 010f 	add.w	r1, r7, #15
 800065e:	2305      	movs	r3, #5
 8000660:	2201      	movs	r2, #1
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <ILI9341_SendData+0x64>)
 8000664:	f003 ff8d 	bl	8004582 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <ILI9341_SendData+0x5c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <ILI9341_SendData+0x60>)
 800066e:	8811      	ldrh	r1, [r2, #0]
 8000670:	2201      	movs	r2, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f003 f8ba 	bl	80037ec <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20018794 	.word	0x20018794
 8000684:	20018798 	.word	0x20018798
 8000688:	2001878c 	.word	0x2001878c
 800068c:	20018790 	.word	0x20018790
 8000690:	20018734 	.word	0x20018734

08000694 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80006b2:	202a      	movs	r0, #42	; 0x2a
 80006b4:	f7ff ff86 	bl	80005c4 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb3 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffae 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffa7 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffa2 	bl	800062c <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80006e8:	202b      	movs	r0, #43	; 0x2b
 80006ea:	f7ff ff6b 	bl	80005c4 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80006ee:	88bb      	ldrh	r3, [r7, #4]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff98 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff93 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000706:	883b      	ldrh	r3, [r7, #0]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b29b      	uxth	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff8c 	bl	800062c <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000714:	883b      	ldrh	r3, [r7, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff87 	bl	800062c <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800071e:	202c      	movs	r0, #44	; 0x2c
 8000720:	f7ff ff50 	bl	80005c4 <ILI9341_SendCommand>
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4613      	mov	r3, r2
 800073a:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 800073c:	2258      	movs	r2, #88	; 0x58
 800073e:	68f9      	ldr	r1, [r7, #12]
 8000740:	4853      	ldr	r0, [pc, #332]	; (8000890 <ILI9341_Init+0x164>)
 8000742:	f004 f94f 	bl	80049e4 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000746:	4a53      	ldr	r2, [pc, #332]	; (8000894 <ILI9341_Init+0x168>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 800074c:	4a52      	ldr	r2, [pc, #328]	; (8000898 <ILI9341_Init+0x16c>)
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000752:	4a52      	ldr	r2, [pc, #328]	; (800089c <ILI9341_Init+0x170>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000758:	4a51      	ldr	r2, [pc, #324]	; (80008a0 <ILI9341_Init+0x174>)
 800075a:	8b3b      	ldrh	r3, [r7, #24]
 800075c:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800075e:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <ILI9341_Init+0x168>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a4d      	ldr	r2, [pc, #308]	; (8000898 <ILI9341_Init+0x16c>)
 8000764:	8811      	ldrh	r1, [r2, #0]
 8000766:	2201      	movs	r2, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f003 f83f 	bl	80037ec <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <ILI9341_Init+0x178>)
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <ILI9341_Init+0x17c>)
 8000776:	8c3b      	ldrh	r3, [r7, #32]
 8000778:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 800077a:	8c3b      	ldrh	r3, [r7, #32]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	69f8      	ldr	r0, [r7, #28]
 8000782:	f003 f833 	bl	80037ec <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff1c 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f002 f8dd 	bl	800294c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f7ff ff16 	bl	80005c4 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000798:	20c0      	movs	r0, #192	; 0xc0
 800079a:	f7ff ff13 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 800079e:	2026      	movs	r0, #38	; 0x26
 80007a0:	f7ff ff44 	bl	800062c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80007a4:	20c1      	movs	r0, #193	; 0xc1
 80007a6:	f7ff ff0d 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80007aa:	2011      	movs	r0, #17
 80007ac:	f7ff ff3e 	bl	800062c <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80007b0:	20c5      	movs	r0, #197	; 0xc5
 80007b2:	f7ff ff07 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80007b6:	2035      	movs	r0, #53	; 0x35
 80007b8:	f7ff ff38 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80007bc:	203e      	movs	r0, #62	; 0x3e
 80007be:	f7ff ff35 	bl	800062c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80007c2:	20c7      	movs	r0, #199	; 0xc7
 80007c4:	f7ff fefe 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80007c8:	20be      	movs	r0, #190	; 0xbe
 80007ca:	f7ff ff2f 	bl	800062c <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80007ce:	2036      	movs	r0, #54	; 0x36
 80007d0:	f7ff fef8 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80007d4:	2048      	movs	r0, #72	; 0x48
 80007d6:	f7ff ff29 	bl	800062c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80007da:	203a      	movs	r0, #58	; 0x3a
 80007dc:	f7ff fef2 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80007e0:	2055      	movs	r0, #85	; 0x55
 80007e2:	f7ff ff23 	bl	800062c <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80007e6:	20b1      	movs	r0, #177	; 0xb1
 80007e8:	f7ff feec 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff ff1d 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 80007f2:	201f      	movs	r0, #31
 80007f4:	f7ff ff1a 	bl	800062c <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 80007f8:	202a      	movs	r0, #42	; 0x2a
 80007fa:	f7ff fee3 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ff14 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff ff11 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ff0e 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000810:	20ef      	movs	r0, #239	; 0xef
 8000812:	f7ff ff0b 	bl	800062c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000816:	202b      	movs	r0, #43	; 0x2b
 8000818:	f7ff fed4 	bl	80005c4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff05 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff02 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff feff 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800082e:	203f      	movs	r0, #63	; 0x3f
 8000830:	f7ff fefc 	bl	800062c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000834:	2034      	movs	r0, #52	; 0x34
 8000836:	f7ff fec5 	bl	80005c4 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 800083a:	20b7      	movs	r0, #183	; 0xb7
 800083c:	f7ff fec2 	bl	80005c4 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000840:	2007      	movs	r0, #7
 8000842:	f7ff fef3 	bl	800062c <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000846:	20b6      	movs	r0, #182	; 0xb6
 8000848:	f7ff febc 	bl	80005c4 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 800084c:	200a      	movs	r0, #10
 800084e:	f7ff feed 	bl	800062c <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000852:	2082      	movs	r0, #130	; 0x82
 8000854:	f7ff feea 	bl	800062c <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000858:	2027      	movs	r0, #39	; 0x27
 800085a:	f7ff fee7 	bl	800062c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fee4 	bl	800062c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000864:	2011      	movs	r0, #17
 8000866:	f7ff fead 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f002 f86e 	bl	800294c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000870:	2029      	movs	r0, #41	; 0x29
 8000872:	f7ff fea7 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f002 f868 	bl	800294c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 800087c:	202c      	movs	r0, #44	; 0x2c
 800087e:	f7ff fea1 	bl	80005c4 <ILI9341_SendCommand>
   HAL_Delay(5);
 8000882:	2005      	movs	r0, #5
 8000884:	f002 f862 	bl	800294c <HAL_Delay>
 }
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20018734 	.word	0x20018734
 8000894:	2001878c 	.word	0x2001878c
 8000898:	20018790 	.word	0x20018790
 800089c:	20018794 	.word	0x20018794
 80008a0:	20018798 	.word	0x20018798
 80008a4:	2001879c 	.word	0x2001879c
 80008a8:	200187a0 	.word	0x200187a0

080008ac <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	80bb      	strh	r3, [r7, #4]
 80008ba:	4613      	mov	r3, r2
 80008bc:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	88b9      	ldrh	r1, [r7, #4]
 80008c4:	88f8      	ldrh	r0, [r7, #6]
 80008c6:	f7ff fee5 	bl	8000694 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff feaa 	bl	800062c <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fea5 	bl	800062c <ILI9341_SendData>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 80008f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80008fa:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 80008fc:	23ff      	movs	r3, #255	; 0xff
 80008fe:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <ILI9341_Fill+0x84>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d003      	beq.n	8000910 <ILI9341_Fill+0x24>
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <ILI9341_Fill+0x84>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b03      	cmp	r3, #3
 800090e:	d107      	bne.n	8000920 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000910:	f240 133f 	movw	r3, #319	; 0x13f
 8000914:	22ef      	movs	r2, #239	; 0xef
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff febb 	bl	8000694 <ILI9341_SetCursorPosition>
 800091e:	e00e      	b.n	800093e <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <ILI9341_Fill+0x84>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d003      	beq.n	8000930 <ILI9341_Fill+0x44>
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <ILI9341_Fill+0x84>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d116      	bne.n	800095e <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000930:	23ef      	movs	r3, #239	; 0xef
 8000932:	f240 123f 	movw	r2, #319	; 0x13f
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff feab 	bl	8000694 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800093e:	e00e      	b.n	800095e <ILI9341_Fill+0x72>
			n--;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3b01      	subs	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe6c 	bl	800062c <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe67 	bl	800062c <ILI9341_SendData>
	while (n) {
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1ed      	bne.n	8000940 <ILI9341_Fill+0x54>
	}
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000

08000974 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	3301      	adds	r3, #1
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	1a8a      	subs	r2, r1, r2
 8000990:	3201      	adds	r2, #1
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800099e:	d902      	bls.n	80009a6 <ILI9341_Fill_Rect+0x32>
 80009a0:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80009a4:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b298      	uxth	r0, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	b299      	uxth	r1, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f7ff fe6d 	bl	8000694 <ILI9341_SetCursorPosition>
	while (n) {
 80009ba:	e00e      	b.n	80009da <ILI9341_Fill_Rect+0x66>
			n--;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	3b01      	subs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80009c2:	8c3b      	ldrh	r3, [r7, #32]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe2e 	bl	800062c <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80009d0:	8c3b      	ldrh	r3, [r7, #32]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe29 	bl	800062c <ILI9341_SendData>
	while (n) {
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1ed      	bne.n	80009bc <ILI9341_Fill_Rect+0x48>
	}
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80009ea:	b590      	push	{r4, r7, lr}
 80009ec:	b087      	sub	sp, #28
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4604      	mov	r4, r0
 80009f2:	4608      	mov	r0, r1
 80009f4:	4611      	mov	r1, r2
 80009f6:	461a      	mov	r2, r3
 80009f8:	4623      	mov	r3, r4
 80009fa:	80fb      	strh	r3, [r7, #6]
 80009fc:	4603      	mov	r3, r0
 80009fe:	80bb      	strh	r3, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	807b      	strh	r3, [r7, #2]
 8000a04:	4613      	mov	r3, r2
 8000a06:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	f1c3 0301 	rsb	r3, r3, #1
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	03d2      	lsls	r2, r2, #15
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8000a2c:	e083      	b.n	8000b36 <fillCircleHelper+0x14c>
    if (f >= 0) {
 8000a2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0e      	blt.n	8000a54 <fillCircleHelper+0x6a>
      y--;
 8000a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000a42:	8a7b      	ldrh	r3, [r7, #18]
 8000a44:	3302      	adds	r3, #2
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8000a4a:	8afa      	ldrh	r2, [r7, #22]
 8000a4c:	8a7b      	ldrh	r3, [r7, #18]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000a54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000a60:	8abb      	ldrh	r3, [r7, #20]
 8000a62:	3302      	adds	r3, #2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8000a68:	8afa      	ldrh	r2, [r7, #22]
 8000a6a:	8abb      	ldrh	r3, [r7, #20]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8000a72:	787b      	ldrb	r3, [r7, #1]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d02b      	beq.n	8000ad4 <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8000a7c:	88fa      	ldrh	r2, [r7, #6]
 8000a7e:	8a3b      	ldrh	r3, [r7, #16]
 8000a80:	4413      	add	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b218      	sxth	r0, r3
 8000a86:	88ba      	ldrh	r2, [r7, #4]
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b219      	sxth	r1, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a98:	4413      	add	r3, r2
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000aa4:	f000 f921 	bl	8000cea <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8000aa8:	88fa      	ldrh	r2, [r7, #6]
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	4413      	add	r3, r2
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b218      	sxth	r0, r3
 8000ab2:	88ba      	ldrh	r2, [r7, #4]
 8000ab4:	8a3b      	ldrh	r3, [r7, #16]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b219      	sxth	r1, r3
 8000abc:	8a3b      	ldrh	r3, [r7, #16]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b21a      	sxth	r2, r3
 8000ace:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ad0:	f000 f90b 	bl	8000cea <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d02b      	beq.n	8000b36 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	8a3b      	ldrh	r3, [r7, #16]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b218      	sxth	r0, r3
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b219      	sxth	r1, r3
 8000af2:	89fb      	ldrh	r3, [r7, #14]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000afa:	4413      	add	r3, r2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000b06:	f000 f8f0 	bl	8000cea <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b218      	sxth	r0, r3
 8000b14:	88ba      	ldrh	r2, [r7, #4]
 8000b16:	8a3b      	ldrh	r3, [r7, #16]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b219      	sxth	r1, r3
 8000b1e:	8a3b      	ldrh	r3, [r7, #16]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b26:	4413      	add	r3, r2
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000b32:	f000 f8da 	bl	8000cea <ILI9341_drawFastVLine>
  while (x<y) {
 8000b36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	f6ff af75 	blt.w	8000a2e <fillCircleHelper+0x44>
    }
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	371c      	adds	r7, #28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd90      	pop	{r4, r7, pc}

08000b4e <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000b4e:	b590      	push	{r4, r7, lr}
 8000b50:	b085      	sub	sp, #20
 8000b52:	af02      	add	r7, sp, #8
 8000b54:	4604      	mov	r4, r0
 8000b56:	4608      	mov	r0, r1
 8000b58:	4611      	mov	r1, r2
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	4603      	mov	r3, r0
 8000b62:	80bb      	strh	r3, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 8000b6c:	88ba      	ldrh	r2, [r7, #4]
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b219      	sxth	r1, r3
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	883b      	ldrh	r3, [r7, #0]
 8000b84:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b88:	f000 f8af 	bl	8000cea <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8000b8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b94:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b98:	883b      	ldrh	r3, [r7, #0]
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	f7ff ff22 	bl	80009ea <fillCircleHelper>
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd90      	pop	{r4, r7, pc}

08000bae <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000bae:	b590      	push	{r4, r7, lr}
 8000bb0:	b089      	sub	sp, #36	; 0x24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	4608      	mov	r0, r1
 8000bb8:	4611      	mov	r1, r2
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4623      	mov	r3, r4
 8000bbe:	80fb      	strh	r3, [r7, #6]
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80bb      	strh	r3, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000bcc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000bd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bda:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bde:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be6:	1acb      	subs	r3, r1, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	bfb8      	it	lt
 8000bec:	425b      	neglt	r3, r3
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	bfcc      	ite	gt
 8000bf2:	2301      	movgt	r3, #1
 8000bf4:	2300      	movle	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8000bfa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00b      	beq.n	8000c1a <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	833b      	strh	r3, [r7, #24]
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	8b3b      	ldrh	r3, [r7, #24]
 8000c0c:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	82fb      	strh	r3, [r7, #22]
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	807b      	strh	r3, [r7, #2]
 8000c16:	8afb      	ldrh	r3, [r7, #22]
 8000c18:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000c1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dd0b      	ble.n	8000c3e <ILI9341_drawLine+0x90>
    swap(x0, x1);
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	82bb      	strh	r3, [r7, #20]
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	80fb      	strh	r3, [r7, #6]
 8000c2e:	8abb      	ldrh	r3, [r7, #20]
 8000c30:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	827b      	strh	r3, [r7, #18]
 8000c36:	883b      	ldrh	r3, [r7, #0]
 8000c38:	80bb      	strh	r3, [r7, #4]
 8000c3a:	8a7b      	ldrh	r3, [r7, #18]
 8000c3c:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000c3e:	887a      	ldrh	r2, [r7, #2]
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000c48:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000c4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bfb8      	it	lt
 8000c56:	425b      	neglt	r3, r3
 8000c58:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000c5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c5e:	0fda      	lsrs	r2, r3, #31
 8000c60:	4413      	add	r3, r2
 8000c62:	105b      	asrs	r3, r3, #1
 8000c64:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8000c66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	da02      	bge.n	8000c78 <ILI9341_drawLine+0xca>
    ystep = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	83bb      	strh	r3, [r7, #28]
 8000c76:	e02d      	b.n	8000cd4 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 8000c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c7c:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 8000c7e:	e029      	b.n	8000cd4 <ILI9341_drawLine+0x126>
    if (steep) {
 8000c80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 8000c88:	88bb      	ldrh	r3, [r7, #4]
 8000c8a:	88f9      	ldrh	r1, [r7, #6]
 8000c8c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fe0c 	bl	80008ac <ILI9341_DrawPixel>
 8000c94:	e005      	b.n	8000ca2 <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	88b9      	ldrh	r1, [r7, #4]
 8000c9a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe05 	bl	80008ac <ILI9341_DrawPixel>
    }
    err -= dy;
 8000ca2:	8bfa      	ldrh	r2, [r7, #30]
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8000cac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da09      	bge.n	8000cc8 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 8000cb4:	88ba      	ldrh	r2, [r7, #4]
 8000cb6:	8bbb      	ldrh	r3, [r7, #28]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000cbe:	8bfa      	ldrh	r2, [r7, #30]
 8000cc0:	8a3b      	ldrh	r3, [r7, #16]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8000cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	80fb      	strh	r3, [r7, #6]
 8000cd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	ddcf      	ble.n	8000c80 <ILI9341_drawLine+0xd2>
    }
  }
}	
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}

08000cea <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000cea:	b590      	push	{r4, r7, lr}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af02      	add	r7, sp, #8
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	80fb      	strh	r3, [r7, #6]
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	80bb      	strh	r3, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
 8000d04:	4613      	mov	r3, r2
 8000d06:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8000d08:	88ba      	ldrh	r2, [r7, #4]
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3b01      	subs	r3, #1
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b21c      	sxth	r4, r3
 8000d16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d1a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d1e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d22:	883b      	ldrh	r3, [r7, #0]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	4623      	mov	r3, r4
 8000d28:	f7ff ff41 	bl	8000bae <ILI9341_drawLine>
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}

08000d34 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	4611      	mov	r1, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	4623      	mov	r3, r4
 8000d44:	80fb      	strh	r3, [r7, #6]
 8000d46:	4603      	mov	r3, r0
 8000d48:	80bb      	strh	r3, [r7, #4]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	70fb      	strb	r3, [r7, #3]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000d52:	4b98      	ldr	r3, [pc, #608]	; (8000fb4 <ILI9341_drawChar+0x280>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d003      	beq.n	8000d62 <ILI9341_drawChar+0x2e>
 8000d5a:	4b96      	ldr	r3, [pc, #600]	; (8000fb4 <ILI9341_drawChar+0x280>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d11f      	bne.n	8000da2 <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d66:	2bef      	cmp	r3, #239	; 0xef
 8000d68:	f300 811d 	bgt.w	8000fa6 <ILI9341_drawChar+0x272>
 8000d6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d74:	f280 8117 	bge.w	8000fa6 <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000d78:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d7c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f340 810b 	ble.w	8000fa6 <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000d90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dc21      	bgt.n	8000de4 <ILI9341_drawChar+0xb0>
    return;
 8000da0:	e101      	b.n	8000fa6 <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8000da2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000da6:	2bef      	cmp	r3, #239	; 0xef
 8000da8:	f300 80ff 	bgt.w	8000faa <ILI9341_drawChar+0x276>
 8000dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000db4:	f280 80f9 	bge.w	8000faa <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000db8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000dbc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f340 80ed 	ble.w	8000faa <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000dd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f340 80e4 	ble.w	8000faa <ILI9341_drawChar+0x276>
 8000de2:	e000      	b.n	8000de6 <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000de4:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000de6:	4b74      	ldr	r3, [pc, #464]	; (8000fb8 <ILI9341_drawChar+0x284>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	f083 0301 	eor.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d005      	beq.n	8000e00 <ILI9341_drawChar+0xcc>
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	2baf      	cmp	r3, #175	; 0xaf
 8000df8:	d902      	bls.n	8000e00 <ILI9341_drawChar+0xcc>
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e0c9      	b.n	8000f9a <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d102      	bne.n	8000e14 <ILI9341_drawChar+0xe0>
      line = 0x0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73bb      	strb	r3, [r7, #14]
 8000e12:	e00b      	b.n	8000e2c <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8000e14:	78fa      	ldrb	r2, [r7, #3]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a65      	ldr	r2, [pc, #404]	; (8000fbc <ILI9341_drawChar+0x288>)
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	737b      	strb	r3, [r7, #13]
 8000e30:	e0a8      	b.n	8000f84 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d04b      	beq.n	8000ed4 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8000e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d110      	bne.n	8000e66 <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	883a      	ldrh	r2, [r7, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fd24 	bl	80008ac <ILI9341_DrawPixel>
 8000e64:	e085      	b.n	8000f72 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000e66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	4413      	add	r3, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e82:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	461c      	mov	r4, r3
 8000e8e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	441a      	add	r2, r3
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ea0:	fb01 f303 	mul.w	r3, r1, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	461d      	mov	r5, r3
 8000ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eb2:	441a      	add	r2, r3
 8000eb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eb8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ebc:	fb01 f303 	mul.w	r3, r1, r3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	883b      	ldrh	r3, [r7, #0]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	462a      	mov	r2, r5
 8000ecc:	4621      	mov	r1, r4
 8000ece:	f7ff fd51 	bl	8000974 <ILI9341_Fill_Rect>
 8000ed2:	e04e      	b.n	8000f72 <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8000ed4:	8c3a      	ldrh	r2, [r7, #32]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d04a      	beq.n	8000f72 <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8000edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d110      	bne.n	8000f06 <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4413      	add	r3, r2
 8000eee:	b298      	uxth	r0, r3
 8000ef0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	8c3a      	ldrh	r2, [r7, #32]
 8000efe:	4619      	mov	r1, r3
 8000f00:	f7ff fcd4 	bl	80008ac <ILI9341_DrawPixel>
 8000f04:	e035      	b.n	8000f72 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000f06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f12:	fb01 f303 	mul.w	r3, r1, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f22:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f26:	fb01 f303 	mul.w	r3, r1, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	461c      	mov	r4, r3
 8000f2e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	441a      	add	r2, r3
 8000f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f40:	fb01 f303 	mul.w	r3, r1, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f52:	441a      	add	r2, r3
 8000f54:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f58:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	461a      	mov	r2, r3
 8000f64:	8c3b      	ldrh	r3, [r7, #32]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	462a      	mov	r2, r5
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f7ff fd01 	bl	8000974 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000f78:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	737b      	strb	r3, [r7, #13]
 8000f84:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	f77f af52 	ble.w	8000e32 <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	f77f af31 	ble.w	8000e06 <ILI9341_drawChar+0xd2>
 8000fa4:	e002      	b.n	8000fac <ILI9341_drawChar+0x278>
    return;
 8000fa6:	bf00      	nop
 8000fa8:	e000      	b.n	8000fac <ILI9341_drawChar+0x278>
    return;
 8000faa:	bf00      	nop
    }
  }
}
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20018730 	.word	0x20018730
 8000fbc:	080053bc 	.word	0x080053bc

08000fc0 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	817b      	strh	r3, [r7, #10]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	813b      	strh	r3, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000fda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	0052      	lsls	r2, r2, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	82fb      	strh	r3, [r7, #22]
 8000ff0:	e01a      	b.n	8001028 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000ff2:	8abb      	ldrh	r3, [r7, #20]
 8000ff4:	8afa      	ldrh	r2, [r7, #22]
 8000ff6:	fb12 f303 	smulbb	r3, r2, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	897b      	ldrh	r3, [r7, #10]
 8000ffe:	4413      	add	r3, r2
 8001000:	b29b      	uxth	r3, r3
 8001002:	b218      	sxth	r0, r3
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	88fc      	ldrh	r4, [r7, #6]
 800100e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4623      	mov	r3, r4
 800101e:	f7ff fe89 	bl	8000d34 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001022:	8afb      	ldrh	r3, [r7, #22]
 8001024:	3301      	adds	r3, #1
 8001026:	82fb      	strh	r3, [r7, #22]
 8001028:	8afb      	ldrh	r3, [r7, #22]
 800102a:	2b27      	cmp	r3, #39	; 0x27
 800102c:	d805      	bhi.n	800103a <ILI9341_printText+0x7a>
 800102e:	8afb      	ldrh	r3, [r7, #22]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1db      	bne.n	8000ff2 <ILI9341_printText+0x32>
	}
}
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}

08001042 <ILI9341_printImage>:


//12. Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size)
{
 8001042:	b590      	push	{r4, r7, lr}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	4604      	mov	r4, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	461a      	mov	r2, r3
 8001050:	4623      	mov	r3, r4
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	4603      	mov	r3, r0
 8001056:	80bb      	strh	r3, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	803b      	strh	r3, [r7, #0]
	uint32_t n = size;
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	ILI9341_SetCursorPosition(x, y, w+x-1, h+y-1);
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4413      	add	r3, r2
 800106a:	b29b      	uxth	r3, r3
 800106c:	3b01      	subs	r3, #1
 800106e:	b29c      	uxth	r4, r3
 8001070:	883a      	ldrh	r2, [r7, #0]
 8001072:	88bb      	ldrh	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	b29b      	uxth	r3, r3
 8001078:	3b01      	subs	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	88b9      	ldrh	r1, [r7, #4]
 800107e:	88f8      	ldrh	r0, [r7, #6]
 8001080:	4622      	mov	r2, r4
 8001082:	f7ff fb07 	bl	8000694 <ILI9341_SetCursorPosition>
	for(uint32_t i=0; i<n ; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e009      	b.n	80010a0 <ILI9341_printImage+0x5e>
	{
		ILI9341_SendData(data[i]);
 800108c:	6a3a      	ldr	r2, [r7, #32]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fac9 	bl	800062c <ILI9341_SendData>
	for(uint32_t i=0; i<n ; i++)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d3f1      	bcc.n	800108c <ILI9341_printImage+0x4a>
	}
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
	...

080010b4 <ILI9341_setRotation>:

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d832      	bhi.n	800112c <ILI9341_setRotation+0x78>
 80010c6:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <ILI9341_setRotation+0x18>)
 80010c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010cc:	080010dd 	.word	0x080010dd
 80010d0:	080010f1 	.word	0x080010f1
 80010d4:	08001105 	.word	0x08001105
 80010d8:	08001119 	.word	0x08001119
	{
		case 1:
			rotationNum = 1;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <ILI9341_setRotation+0x94>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80010e2:	2036      	movs	r0, #54	; 0x36
 80010e4:	f7ff fa6e 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80010e8:	2088      	movs	r0, #136	; 0x88
 80010ea:	f7ff fa9f 	bl	800062c <ILI9341_SendData>
			break;
 80010ee:	e027      	b.n	8001140 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <ILI9341_setRotation+0x94>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80010f6:	2036      	movs	r0, #54	; 0x36
 80010f8:	f7ff fa64 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80010fc:	2028      	movs	r0, #40	; 0x28
 80010fe:	f7ff fa95 	bl	800062c <ILI9341_SendData>
			break;
 8001102:	e01d      	b.n	8001140 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <ILI9341_setRotation+0x94>)
 8001106:	2203      	movs	r2, #3
 8001108:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800110a:	2036      	movs	r0, #54	; 0x36
 800110c:	f7ff fa5a 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001110:	2048      	movs	r0, #72	; 0x48
 8001112:	f7ff fa8b 	bl	800062c <ILI9341_SendData>
			break;
 8001116:	e013      	b.n	8001140 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <ILI9341_setRotation+0x94>)
 800111a:	2204      	movs	r2, #4
 800111c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800111e:	2036      	movs	r0, #54	; 0x36
 8001120:	f7ff fa50 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001124:	20e8      	movs	r0, #232	; 0xe8
 8001126:	f7ff fa81 	bl	800062c <ILI9341_SendData>
			break;
 800112a:	e009      	b.n	8001140 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <ILI9341_setRotation+0x94>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001132:	2036      	movs	r0, #54	; 0x36
 8001134:	f7ff fa46 	bl	80005c4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001138:	2088      	movs	r0, #136	; 0x88
 800113a:	f7ff fa77 	bl	800062c <ILI9341_SendData>
			break;
 800113e:	bf00      	nop
	}
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000

0800114c <fclamp>:
static uint32_t ADC_ChannelX;
static uint32_t ADC_ChannelY;
static LCD_TouchState m_touch_state = LCD_TOUCH_IDLE;
static LCD_TouchPoint* m_last_point_ref = NULL;

static float fclamp(float x, float l, float u) {
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	ed87 0a03 	vstr	s0, [r7, #12]
 8001156:	edc7 0a02 	vstr	s1, [r7, #8]
 800115a:	ed87 1a01 	vstr	s2, [r7, #4]
	return x < l ? l : (x > u ? u : x);
 800115e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001162:	edd7 7a02 	vldr	s15, [r7, #8]
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d501      	bpl.n	8001174 <fclamp+0x28>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	e00b      	b.n	800118c <fclamp+0x40>
 8001174:	ed97 7a03 	vldr	s14, [r7, #12]
 8001178:	edd7 7a01 	vldr	s15, [r7, #4]
 800117c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	dd01      	ble.n	800118a <fclamp+0x3e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	e000      	b.n	800118c <fclamp+0x40>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	ee07 3a90 	vmov	s15, r3
}
 8001190:	eeb0 0a67 	vmov.f32	s0, s15
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <adc_norm_x>:

static float adc_norm_x(uint32_t x) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	return (x - TOUCH_ADC_X_MIN) * ADC_UNIT_PX_X;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011cc <adc_norm_x+0x2c>
 80011ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80011be:	eeb0 0a67 	vmov.f32	s0, s15
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	39a9200b 	.word	0x39a9200b

080011d0 <adc_norm_y>:

static float adc_norm_y(uint32_t y) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	return (y - TOUCH_ADC_Y_MIN) * ADC_UNIT_PX_Y;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011fc <adc_norm_y+0x2c>
 80011ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	3996a850 	.word	0x3996a850

08001200 <ADC_GetValue>:

static uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig;

	sConfig.Channel = channel;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f001 fd9b 	bl	8002d58 <HAL_ADC_ConfigChannel>

	// start conversion
	HAL_ADC_Start(hadc);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fbfa 	bl	8002a1c <HAL_ADC_Start>

	// wait until finish
	HAL_ADC_PollForConversion(hadc, 100);
 8001228:	2164      	movs	r1, #100	; 0x64
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f001 fcfb 	bl	8002c26 <HAL_ADC_PollForConversion>

	uint32_t value = HAL_ADC_GetValue(hadc);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f001 fd83 	bl	8002d3c <HAL_ADC_GetValue>
 8001236:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f001 fcc1 	bl	8002bc0 <HAL_ADC_Stop>

	return value;
 800123e:	69fb      	ldr	r3, [r7, #28]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <GPIO_SetPinMode>:

static void GPIO_SetPinMode(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		uint32_t GPIO_PinMode) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	460b      	mov	r3, r1
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_PinMode;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f002 f911 	bl	8003494 <HAL_GPIO_Init>
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <ADC_GPIOA_init>:

static void ADC_GPIOA_init(uint16_t GPIO_Pin) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2303      	movs	r3, #3
 800128c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <ADC_GPIOA_init+0x2c>)
 800129a:	f002 f8fb 	bl	8003494 <HAL_GPIO_Init>
}
 800129e:	bf00      	nop
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020000 	.word	0x40020000

080012ac <touchX>:

static uint32_t touchX() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	GPIO_SetPinMode(GPIOA, GPIO_PIN_1, GPIO_MODE_OUTPUT_PP);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2102      	movs	r1, #2
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <touchX+0x58>)
 80012b6:	f7ff ffc7 	bl	8001248 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_OUTPUT_PP);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <touchX+0x58>)
 80012c2:	f7ff ffc1 	bl	8001248 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_INPUT);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <touchX+0x5c>)
 80012ce:	f7ff ffbb 	bl	8001248 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_4);
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ffd2 	bl	800127c <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <touchX+0x58>)
 80012de:	f002 fa85 	bl	80037ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e8:	4806      	ldr	r0, [pc, #24]	; (8001304 <touchX+0x58>)
 80012ea:	f002 fa7f 	bl	80037ec <HAL_GPIO_WritePin>

	return ADC_GetValue(hadcX, ADC_ChannelX);
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <touchX+0x60>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <touchX+0x64>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff81 	bl	8001200 <ADC_GetValue>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	200187a4 	.word	0x200187a4
 8001310:	200187ac 	.word	0x200187ac

08001314 <touchY>:

static uint32_t touchY() {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800131a:	200a      	movs	r0, #10
 800131c:	f002 f891 	bl	8003442 <HAL_NVIC_DisableIRQ>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_10, GPIO_MODE_OUTPUT_PP);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001326:	4819      	ldr	r0, [pc, #100]	; (800138c <touchY+0x78>)
 8001328:	f7ff ff8e 	bl	8001248 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_4, GPIO_MODE_OUTPUT_PP);
 800132c:	2201      	movs	r2, #1
 800132e:	2110      	movs	r1, #16
 8001330:	4817      	ldr	r0, [pc, #92]	; (8001390 <touchY+0x7c>)
 8001332:	f7ff ff89 	bl	8001248 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_8, GPIO_MODE_INPUT);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <touchY+0x7c>)
 800133e:	f7ff ff83 	bl	8001248 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_1);
 8001342:	2002      	movs	r0, #2
 8001344:	f7ff ff9a 	bl	800127c <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <touchY+0x78>)
 8001350:	f002 fa4c 	bl	80037ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2110      	movs	r1, #16
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <touchY+0x7c>)
 800135a:	f002 fa47 	bl	80037ec <HAL_GPIO_WritePin>

	uint32_t adc_y = ADC_GetValue(hadcY, ADC_ChannelY);
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <touchY+0x80>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <touchY+0x84>)
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff49 	bl	8001200 <ADC_GetValue>
 800136e:	6078      	str	r0, [r7, #4]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <touchY+0x88>)
 8001372:	2210      	movs	r2, #16
 8001374:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8001376:	200a      	movs	r0, #10
 8001378:	f002 f87d 	bl	8003476 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800137c:	200a      	movs	r0, #10
 800137e:	f002 f852 	bl	8003426 <HAL_NVIC_EnableIRQ>

	return adc_y;
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40020400 	.word	0x40020400
 8001390:	40020000 	.word	0x40020000
 8001394:	200187a8 	.word	0x200187a8
 8001398:	200187b0 	.word	0x200187b0
 800139c:	40013c00 	.word	0x40013c00

080013a0 <LCD_Touch_Init>:

/**
 * Saves ADC handles references to measure touch screen positions.
 */
void LCD_Touch_Init(ADC_HandleTypeDef* aHadcX, uint32_t aADC_ChannelX,
		ADC_HandleTypeDef* aHadcY, uint32_t aADC_ChannelY) {
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
	hadcX = aHadcX;
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <LCD_Touch_Init+0x34>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6013      	str	r3, [r2, #0]
	hadcY = aHadcY;
 80013b4:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <LCD_Touch_Init+0x38>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
	ADC_ChannelX = aADC_ChannelX;
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <LCD_Touch_Init+0x3c>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	6013      	str	r3, [r2, #0]
	ADC_ChannelY = aADC_ChannelY;
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <LCD_Touch_Init+0x40>)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200187a4 	.word	0x200187a4
 80013d8:	200187a8 	.word	0x200187a8
 80013dc:	200187ac 	.word	0x200187ac
 80013e0:	200187b0 	.word	0x200187b0

080013e4 <GPIO_DrawMode>:

static void GPIO_DrawMode() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE()
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <GPIO_DrawMode+0x7c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <GPIO_DrawMode+0x7c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <GPIO_DrawMode+0x7c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOB_CLK_ENABLE()
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <GPIO_DrawMode+0x7c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <GPIO_DrawMode+0x7c>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <GPIO_DrawMode+0x7c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
	;
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001422:	200a      	movs	r0, #10
 8001424:	f002 f80d 	bl	8003442 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]

	/*Configure GPIO pins: PA1 PA4 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_8;
 8001434:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001438:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4619      	mov	r1, r3
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <GPIO_DrawMode+0x80>)
 8001442:	f002 f827 	bl	8003494 <HAL_GPIO_Init>

	/*Configure GPIO data pin PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <GPIO_DrawMode+0x84>)
 8001454:	f002 f81e 	bl	8003494 <HAL_GPIO_Init>
}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400

0800146c <GPIO_InterruptMode>:


// TOUCH mode GPIO setup
static void GPIO_InterruptMode() {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE()
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <GPIO_InterruptMode+0xa8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a26      	ldr	r2, [pc, #152]	; (8001514 <GPIO_InterruptMode+0xa8>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <GPIO_InterruptMode+0xa8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
	;

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]

	/* X- PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001492:	2302      	movs	r3, #2
 8001494:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	481d      	ldr	r0, [pc, #116]	; (8001518 <GPIO_InterruptMode+0xac>)
 80014a4:	f001 fff6 	bl	8003494 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2102      	movs	r1, #2
 80014ac:	481a      	ldr	r0, [pc, #104]	; (8001518 <GPIO_InterruptMode+0xac>)
 80014ae:	f002 f99d 	bl	80037ec <HAL_GPIO_WritePin>

	/* X+ PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4814      	ldr	r0, [pc, #80]	; (8001518 <GPIO_InterruptMode+0xac>)
 80014c6:	f001 ffe5 	bl	8003494 <HAL_GPIO_Init>

	/* Y- PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <GPIO_InterruptMode+0xb0>)
 80014de:	f001 ffd9 	bl	8003494 <HAL_GPIO_Init>

	/* Y+ PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e2:	2310      	movs	r3, #16
 80014e4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014e6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <GPIO_InterruptMode+0xac>)
 80014f6:	f001 ffcd 	bl	8003494 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200a      	movs	r0, #10
 8001500:	f001 ff75 	bl	80033ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001504:	200a      	movs	r0, #10
 8001506:	f001 ff8e 	bl	8003426 <HAL_NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400

08001520 <LCD_SetMode>:
 * Set LCD's mode to either DRAW or TOUCH.
 *
 * Set LCD_Mode to DRAW to draw or print text on LCD,
 * then switch back to TOUCH, if you want to receive touches.
 */
HAL_StatusTypeDef LCD_SetMode(LCD_Mode mode) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <LCD_SetMode+0x1c>
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <LCD_SetMode+0x24>
	case LCD_MODE_TOUCH:
		GPIO_InterruptMode();
 8001534:	f7ff ff9a 	bl	800146c <GPIO_InterruptMode>
		return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e004      	b.n	8001546 <LCD_SetMode+0x26>

	case LCD_MODE_DRAW:
		GPIO_DrawMode();
 800153c:	f7ff ff52 	bl	80013e4 <GPIO_DrawMode>
		return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <LCD_SetMode+0x26>

	default:
		return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
	}
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <LCD_Touch_Read>:

/*
 * Reads raw touch x- and y-positions and, if successful,
 * stores them in the LCD_TouchPoint point.
 */
LCD_TouchReadState LCD_Touch_Read(LCD_TouchPoint* p) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	if (hadcX == NULL || hadcY == NULL) {
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <LCD_Touch_Read+0xe4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <LCD_Touch_Read+0x18>
 8001560:	4b35      	ldr	r3, [pc, #212]	; (8001638 <LCD_Touch_Read+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <LCD_Touch_Read+0x1c>
		return LCD_TOUCH_READ_NOT_INITIALIZED;
 8001568:	2301      	movs	r3, #1
 800156a:	e05e      	b.n	800162a <LCD_Touch_Read+0xda>
	}
	if (m_touch_state == LCD_TOUCH_IDLE) {
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <LCD_Touch_Read+0xec>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <LCD_Touch_Read+0x28>
		return LCD_TOUCH_READ_NO_TOUCH;
 8001574:	2302      	movs	r3, #2
 8001576:	e058      	b.n	800162a <LCD_Touch_Read+0xda>
	}
	uint32_t x = touchX();
 8001578:	f7ff fe98 	bl	80012ac <touchX>
 800157c:	60f8      	str	r0, [r7, #12]

	if (x > ADC_NO_TOUCH_X_OUTSIDE) {
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f640 729b 	movw	r2, #3995	; 0xf9b
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <LCD_Touch_Read+0x3c>
		return LCD_TOUCH_READ_OUTSIDE;
 8001588:	2303      	movs	r3, #3
 800158a:	e04e      	b.n	800162a <LCD_Touch_Read+0xda>
	}

	uint32_t y = touchY();
 800158c:	f7ff fec2 	bl	8001314 <touchY>
 8001590:	60b8      	str	r0, [r7, #8]

	p->x = (int16_t) ((1 - fclamp(adc_norm_x(x), 0.0f, 1.0f)) * TFTWIDTH);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fe04 	bl	80011a0 <adc_norm_x>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80015a0:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001640 <LCD_Touch_Read+0xf0>
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f7ff fdd0 	bl	800114c <fclamp>
 80015ac:	eef0 7a40 	vmov.f32	s15, s0
 80015b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001644 <LCD_Touch_Read+0xf4>
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c4:	ee17 3a90 	vmov	r3, s15
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	801a      	strh	r2, [r3, #0]
	p->y = (int16_t) ((1 - fclamp(adc_norm_y(y), 0.0f, 1.0f)) * TFTHEIGHT);
 80015ce:	68b8      	ldr	r0, [r7, #8]
 80015d0:	f7ff fdfe 	bl	80011d0 <adc_norm_y>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80015dc:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001640 <LCD_Touch_Read+0xf0>
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	f7ff fdb2 	bl	800114c <fclamp>
 80015e8:	eef0 7a40 	vmov.f32	s15, s0
 80015ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001648 <LCD_Touch_Read+0xf8>
 80015f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001600:	ee17 3a90 	vmov	r3, s15
 8001604:	b21a      	sxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	805a      	strh	r2, [r3, #2]
	p->tick = HAL_GetTick();
 800160a:	f001 f993 	bl	8002934 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
	p->state = m_touch_state;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <LCD_Touch_Read+0xec>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	721a      	strb	r2, [r3, #8]

	m_last_point_ref = p;
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LCD_Touch_Read+0xfc>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
	m_touch_state = LCD_TOUCH_MOVE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <LCD_Touch_Read+0xec>)
 8001624:	2202      	movs	r2, #2
 8001626:	701a      	strb	r2, [r3, #0]

	return LCD_TOUCH_READ_SUCCESS;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200187a4 	.word	0x200187a4
 8001638:	200187a8 	.word	0x200187a8
 800163c:	200187b4 	.word	0x200187b4
 8001640:	00000000 	.word	0x00000000
 8001644:	43700000 	.word	0x43700000
 8001648:	43a00000 	.word	0x43a00000
 800164c:	200187b8 	.word	0x200187b8

08001650 <LCD_Touch_OnDown>:

/*
 * Indicates the start of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnDown() {
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	if (m_touch_state == LCD_TOUCH_IDLE) {
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <LCD_Touch_OnDown+0x1c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <LCD_Touch_OnDown+0x12>
		m_touch_state = LCD_TOUCH_DOWN;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <LCD_Touch_OnDown+0x1c>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
	}
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	200187b4 	.word	0x200187b4

08001670 <LCD_Touch_OnUp>:

/*
 * Indicates the finish of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnUp() {
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	m_touch_state = LCD_TOUCH_IDLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <LCD_Touch_OnUp+0x24>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]

	if (m_last_point_ref != NULL) {
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <LCD_Touch_OnUp+0x28>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <LCD_Touch_OnUp+0x1a>
		// Mark the last read touch point as TOUCH_UP.
		// Note that it changes the point state that the user specified
		// as an argument to LCD_Touch_Read function.
		m_last_point_ref->state = LCD_TOUCH_UP;
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LCD_Touch_OnUp+0x28>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2203      	movs	r2, #3
 8001688:	721a      	strb	r2, [r3, #8]
	}
	//LCD_Touch_Draw_OnUp();
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	200187b4 	.word	0x200187b4
 8001698:	200187b8 	.word	0x200187b8

0800169c <LCD_Touch_GetState>:


/*
 * Returns the current touch state.
 */
LCD_TouchState LCD_Touch_GetState() {
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	return m_touch_state;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <LCD_Touch_GetState+0x14>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200187b4 	.word	0x200187b4

080016b4 <LCD_Touch_Belong_Interval>:

/*
 * Return TRUE if the point belong to the interval
 */
int LCD_Touch_Belong_Interval(LCD_TouchPoint* p,int16_t xmin,int16_t xmax,int16_t ymin,int16_t ymax)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	817b      	strh	r3, [r7, #10]
 80016c6:	460b      	mov	r3, r1
 80016c8:	813b      	strh	r3, [r7, #8]
 80016ca:	4613      	mov	r3, r2
 80016cc:	80fb      	strh	r3, [r7, #6]
	 if(p->x>xmin && p->x<xmax && p->y>ymin && p->y<ymax) return 1;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016d8:	429a      	cmp	r2, r3
 80016da:	da16      	bge.n	800170a <LCD_Touch_Belong_Interval+0x56>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	dd0f      	ble.n	800170a <LCD_Touch_Belong_Interval+0x56>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	da08      	bge.n	800170a <LCD_Touch_Belong_Interval+0x56>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016fe:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001702:	429a      	cmp	r2, r3
 8001704:	dd01      	ble.n	800170a <LCD_Touch_Belong_Interval+0x56>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <LCD_Touch_Belong_Interval+0x58>
	 return 0;
 800170a:	2300      	movs	r3, #0

}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LCD_Touch_Draw_LastPoint_Bottom>:
/*
 * Draw the last touch point on the bottom
 * to use in touch mode
 */
void LCD_Touch_Draw_LastPoint_Bottom(const LCD_TouchPoint* p)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b08e      	sub	sp, #56	; 0x38
 800171c:	af02      	add	r7, sp, #8
 800171e:	6078      	str	r0, [r7, #4]
	char TextPos[] = "Last touch point X=000  Y=000";
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <LCD_Touch_Draw_LastPoint_Bottom+0xd4>)
 8001722:	f107 0410 	add.w	r4, r7, #16
 8001726:	461d      	mov	r5, r3
 8001728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001730:	c407      	stmia	r4!, {r0, r1, r2}
 8001732:	8023      	strh	r3, [r4, #0]
	char PosX[3];
	char PosY[3];
	LCD_SetMode(LCD_MODE_DRAW);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fef3 	bl	8001520 <LCD_SetMode>
	//ILI9341_printText("touche ", 60 ,60, COLOR_WHITE, COLOR_GREEN, 1);
	strcpy(TextPos,"Last touch point X=");
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4a2c      	ldr	r2, [pc, #176]	; (80017f0 <LCD_Touch_Draw_LastPoint_Bottom+0xd8>)
 8001740:	461c      	mov	r4, r3
 8001742:	4615      	mov	r5, r2
 8001744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	6023      	str	r3, [r4, #0]
	sprintf(PosX,"%d",p->x);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001752:	461a      	mov	r2, r3
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4926      	ldr	r1, [pc, #152]	; (80017f4 <LCD_Touch_Draw_LastPoint_Bottom+0xdc>)
 800175a:	4618      	mov	r0, r3
 800175c:	f003 f958 	bl	8004a10 <siprintf>
	strncat(TextPos,PosX,sizeof(int));
 8001760:	f107 010c 	add.w	r1, r7, #12
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2204      	movs	r2, #4
 800176a:	4618      	mov	r0, r3
 800176c:	f003 f970 	bl	8004a50 <strncat>
	strncat(TextPos," Y=",3);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fd4b 	bl	8000210 <strlen>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4413      	add	r3, r2
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <LCD_Touch_Draw_LastPoint_Bottom+0xe0>)
 8001786:	6810      	ldr	r0, [r2, #0]
 8001788:	6018      	str	r0, [r3, #0]
	sprintf(PosY,"%d",p->y);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001790:	461a      	mov	r2, r3
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	4917      	ldr	r1, [pc, #92]	; (80017f4 <LCD_Touch_Draw_LastPoint_Bottom+0xdc>)
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f939 	bl	8004a10 <siprintf>
	strncat(TextPos,PosY,sizeof(PosY));
 800179e:	f107 0108 	add.w	r1, r7, #8
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	2203      	movs	r2, #3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f951 	bl	8004a50 <strncat>
	ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 80017ae:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	23eb      	movs	r3, #235	; 0xeb
 80017b6:	f240 123b 	movw	r2, #315	; 0x13b
 80017ba:	21d7      	movs	r1, #215	; 0xd7
 80017bc:	2005      	movs	r0, #5
 80017be:	f7ff f8d9 	bl	8000974 <ILI9341_Fill_Rect>
	ILI9341_printText(TextPos, 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 80017c2:	f107 0010 	add.w	r0, r7, #16
 80017c6:	2301      	movs	r3, #1
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d4:	22dd      	movs	r2, #221	; 0xdd
 80017d6:	2146      	movs	r1, #70	; 0x46
 80017d8:	f7ff fbf2 	bl	8000fc0 <ILI9341_printText>
	LCD_SetMode(LCD_MODE_TOUCH);
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff fe9f 	bl	8001520 <LCD_SetMode>
}
 80017e2:	bf00      	nop
 80017e4:	3730      	adds	r7, #48	; 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08005328 	.word	0x08005328
 80017f0:	0800530c 	.word	0x0800530c
 80017f4:	08005320 	.word	0x08005320
 80017f8:	08005324 	.word	0x08005324

080017fc <DrawTouchPoint>:
/** Function DrawTouchPoint
 * It draws one green circle where you click and stay printed
 *
 * */

void DrawTouchPoint(const LCD_TouchPoint* p) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

		ILI9341_fillCircle(320-p->y, p->x, LCD_TOUCH_DRAW_POINT_RADIUS, COLOR_GREEN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800180a:	b29b      	uxth	r3, r3
 800180c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001810:	b29b      	uxth	r3, r3
 8001812:	b218      	sxth	r0, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f9b3 1000 	ldrsh.w	r1, [r3]
 800181a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800181e:	2203      	movs	r2, #3
 8001820:	f7ff f995 	bl	8000b4e <ILI9341_fillCircle>

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	f6ad 6d68 	subw	sp, sp, #3688	; 0xe68
 8001832:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001834:	f001 f818 	bl	8002868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001838:	f000 fc84 	bl	8002144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183c:	f000 fdce 	bl	80023dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001840:	f000 fd96 	bl	8002370 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001844:	f000 fcf0 	bl	8002228 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001848:	f000 fd40 	bl	80022cc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <main+0x1b4>)
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4b62      	ldr	r3, [pc, #392]	; (80019e4 <main+0x1b8>)
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	4962      	ldr	r1, [pc, #392]	; (80019e8 <main+0x1bc>)
 8001860:	4862      	ldr	r0, [pc, #392]	; (80019ec <main+0x1c0>)
 8001862:	f7fe ff63 	bl	800072c <ILI9341_Init>
	ILI9341_setRotation(2);
 8001866:	2002      	movs	r0, #2
 8001868:	f7ff fc24 	bl	80010b4 <ILI9341_setRotation>
	ILI9341_Fill(COLOR_NAVY);
 800186c:	200f      	movs	r0, #15
 800186e:	f7ff f83d 	bl	80008ec <ILI9341_Fill>

	//TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
	//TSC2046_Calibrate();
	ILI9341_Fill(COLOR_WHITE);
 8001872:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001876:	f7ff f839 	bl	80008ec <ILI9341_Fill>

		ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 800187a:	231f      	movs	r3, #31
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	23b4      	movs	r3, #180	; 0xb4
 8001880:	228c      	movs	r2, #140	; 0x8c
 8001882:	218c      	movs	r1, #140	; 0x8c
 8001884:	2014      	movs	r0, #20
 8001886:	f7ff f875 	bl	8000974 <ILI9341_Fill_Rect>
		ILI9341_printText("BLUE", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	231f      	movs	r3, #31
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001896:	229b      	movs	r2, #155	; 0x9b
 8001898:	2137      	movs	r1, #55	; 0x37
 800189a:	4855      	ldr	r0, [pc, #340]	; (80019f0 <main+0x1c4>)
 800189c:	f7ff fb90 	bl	8000fc0 <ILI9341_printText>
		ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 80018a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	23b4      	movs	r3, #180	; 0xb4
 80018a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ac:	218c      	movs	r1, #140	; 0x8c
 80018ae:	20b4      	movs	r0, #180	; 0xb4
 80018b0:	f7ff f860 	bl	8000974 <ILI9341_Fill_Rect>
		ILI9341_printText("RED", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 80018b4:	2301      	movs	r3, #1
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c2:	229b      	movs	r2, #155	; 0x9b
 80018c4:	21d7      	movs	r1, #215	; 0xd7
 80018c6:	484b      	ldr	r0, [pc, #300]	; (80019f4 <main+0x1c8>)
 80018c8:	f7ff fb7a 	bl	8000fc0 <ILI9341_printText>

	ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 80018cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	235a      	movs	r3, #90	; 0x5a
 80018d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018d8:	211e      	movs	r1, #30
 80018da:	203c      	movs	r0, #60	; 0x3c
 80018dc:	f7ff f84a 	bl	8000974 <ILI9341_Fill_Rect>


	ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 80018e0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	23eb      	movs	r3, #235	; 0xeb
 80018e8:	f240 123b 	movw	r2, #315	; 0x13b
 80018ec:	21d7      	movs	r1, #215	; 0xd7
 80018ee:	2005      	movs	r0, #5
 80018f0:	f7ff f840 	bl	8000974 <ILI9341_Fill_Rect>
	ILI9341_printText("Last touch point X=000  Y=000", 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 80018f4:	2301      	movs	r3, #1
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001902:	22dd      	movs	r2, #221	; 0xdd
 8001904:	2146      	movs	r1, #70	; 0x46
 8001906:	483c      	ldr	r0, [pc, #240]	; (80019f8 <main+0x1cc>)
 8001908:	f7ff fb5a 	bl	8000fc0 <ILI9341_printText>
	ILI9341_Fill_Rect(5, 215, 5, 25, COLOR_GREEN);
 800190c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2319      	movs	r3, #25
 8001914:	2205      	movs	r2, #5
 8001916:	21d7      	movs	r1, #215	; 0xd7
 8001918:	2005      	movs	r0, #5
 800191a:	f7ff f82b 	bl	8000974 <ILI9341_Fill_Rect>
	ILI9341_printText("Max, Leo, Margot, time to start ", 60 ,5, COLOR_WHITE, COLOR_BLACK, 1);
 800191e:	2301      	movs	r3, #1
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192a:	2205      	movs	r2, #5
 800192c:	213c      	movs	r1, #60	; 0x3c
 800192e:	4833      	ldr	r0, [pc, #204]	; (80019fc <main+0x1d0>)
 8001930:	f7ff fb46 	bl	8000fc0 <ILI9341_printText>
	ILI9341_Fill_Rect(280, 0, 320, 40, COLOR_RED);
 8001934:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2328      	movs	r3, #40	; 0x28
 800193c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001940:	2100      	movs	r1, #0
 8001942:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001946:	f7ff f815 	bl	8000974 <ILI9341_Fill_Rect>
	ILI9341_printText("X", 292, 5, COLOR_WHITE, COLOR_RED, 4);
 800194a:	2304      	movs	r3, #4
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001958:	2205      	movs	r2, #5
 800195a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800195e:	4828      	ldr	r0, [pc, #160]	; (8001a00 <main+0x1d4>)
 8001960:	f7ff fb2e 	bl	8000fc0 <ILI9341_printText>
	LCD_Touch_Init(&hadc2, ADC_CHANNEL_4, &hadc1, ADC_CHANNEL_1);
 8001964:	2301      	movs	r3, #1
 8001966:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <main+0x1d8>)
 8001968:	2104      	movs	r1, #4
 800196a:	4827      	ldr	r0, [pc, #156]	; (8001a08 <main+0x1dc>)
 800196c:	f7ff fd18 	bl	80013a0 <LCD_Touch_Init>
		LCD_SetMode(LCD_MODE_TOUCH);
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff fdd5 	bl	8001520 <LCD_SetMode>
		uint8_t flag=0;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3e57 	strb.w	r3, [r7, #3671]	; 0xe57
		LCD_TouchPoint p;
		p.x=0;
 800197c:	2300      	movs	r3, #0
 800197e:	f8a7 3e48 	strh.w	r3, [r7, #3656]	; 0xe48
		p.y=0;
 8001982:	2300      	movs	r3, #0
 8001984:	f8a7 3e4a 	strh.w	r3, [r7, #3658]	; 0xe4a
		p.state=LCD_TOUCH_IDLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 3e50 	strb.w	r3, [r7, #3664]	; 0xe50
		LCD_TouchPoint New_p;
				New_p.x=0;
 800198e:	2300      	movs	r3, #0
 8001990:	f8a7 3e3c 	strh.w	r3, [r7, #3644]	; 0xe3c
				New_p.y=0;
 8001994:	2300      	movs	r3, #0
 8001996:	f8a7 3e3e 	strh.w	r3, [r7, #3646]	; 0xe3e
				New_p.state=LCD_TOUCH_IDLE;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3e44 	strb.w	r3, [r7, #3652]	; 0xe44
		char TextPos[] = "Last touch point X=000  Y=000";
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <main+0x1cc>)
 80019a2:	f607 641c 	addw	r4, r7, #3612	; 0xe1c
 80019a6:	461d      	mov	r5, r3
 80019a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019b0:	c407      	stmia	r4!, {r0, r1, r2}
 80019b2:	8023      	strh	r3, [r4, #0]

*/
		  	  /*** main test 3 draw last point and touch at start of a touch  END ***/

	  /*** main test 4 draw when moving BEG ***/
	  if(LCD_Touch_GetState()==LCD_TOUCH_DOWN ) //if there is a touch starting
 80019b4:	f7ff fe72 	bl	800169c <LCD_Touch_GetState>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d126      	bne.n	8001a0c <main+0x1e0>
	  		  {		LCD_Touch_Read(&p);
 80019be:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fdc4 	bl	8001550 <LCD_Touch_Read>
	  			  	LCD_Touch_Draw_LastPoint_Bottom(&p);
 80019c8:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fea3 	bl	8001718 <LCD_Touch_Draw_LastPoint_Bottom>
	  			  	DrawTouchPoint(&p);
 80019d2:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff10 	bl	80017fc <DrawTouchPoint>
 80019dc:	e7ea      	b.n	80019b4 <main+0x188>
 80019de:	bf00      	nop
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400
 80019ec:	2001884c 	.word	0x2001884c
 80019f0:	08005348 	.word	0x08005348
 80019f4:	08005350 	.word	0x08005350
 80019f8:	08005354 	.word	0x08005354
 80019fc:	08005374 	.word	0x08005374
 8001a00:	08005398 	.word	0x08005398
 8001a04:	200187bc 	.word	0x200187bc
 8001a08:	20018804 	.word	0x20018804



	  		  }

	  		  else if(LCD_Touch_GetState()==LCD_TOUCH_MOVE){ //if there is a move during the touch
 8001a0c:	f7ff fe46 	bl	800169c <LCD_Touch_GetState>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d1ce      	bne.n	80019b4 <main+0x188>
	  			  if (flag==0)
 8001a16:	f897 3e57 	ldrb.w	r3, [r7, #3671]	; 0xe57
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d111      	bne.n	8001a42 <main+0x216>
	  			  {
	  				LCD_Touch_Read(&p);
 8001a1e:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fd94 	bl	8001550 <LCD_Touch_Read>
	  				LCD_Touch_Draw_LastPoint_Bottom(&p);
 8001a28:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fe73 	bl	8001718 <LCD_Touch_Draw_LastPoint_Bottom>
	  				DrawTouchPoint(&p);
 8001a32:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fee0 	bl	80017fc <DrawTouchPoint>
	  				flag=1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f887 3e57 	strb.w	r3, [r7, #3671]	; 0xe57
	  			  }
	  			  	  	  	  New_p.x=0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8a7 3e3c 	strh.w	r3, [r7, #3644]	; 0xe3c
	  						  New_p.y=0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8a7 3e3e 	strh.w	r3, [r7, #3646]	; 0xe3e
	  						  LCD_Touch_Read(&New_p);
 8001a4e:	f607 633c 	addw	r3, r7, #3644	; 0xe3c
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fd7c 	bl	8001550 <LCD_Touch_Read>
	  						  if(New_p.y>2&&New_p.x>5){ //if there really is a move
 8001a58:	f9b7 3e3e 	ldrsh.w	r3, [r7, #3646]	; 0xe3e
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	f340 8335 	ble.w	80020cc <main+0x8a0>
 8001a62:	f9b7 3e3c 	ldrsh.w	r3, [r7, #3644]	; 0xe3c
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	f340 8330 	ble.w	80020cc <main+0x8a0>
	  							 LCD_Touch_Draw_LastPoint_Bottom(&New_p);
 8001a6c:	f607 633c 	addw	r3, r7, #3644	; 0xe3c
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fe51 	bl	8001718 <LCD_Touch_Draw_LastPoint_Bottom>
	  				  			 DrawTouchPoint(&New_p);
 8001a76:	f607 633c 	addw	r3, r7, #3644	; 0xe3c
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff febe 	bl	80017fc <DrawTouchPoint>


	  				  			  if(LCD_Touch_Belong_Interval(&New_p,140,180,180,300))  // carré LED ON
 8001a80:	f607 603c 	addw	r0, r7, #3644	; 0xe3c
 8001a84:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	23b4      	movs	r3, #180	; 0xb4
 8001a8c:	22b4      	movs	r2, #180	; 0xb4
 8001a8e:	218c      	movs	r1, #140	; 0x8c
 8001a90:	f7ff fe10 	bl	80016b4 <LCD_Touch_Belong_Interval>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d02e      	beq.n	8001af8 <main+0x2cc>
	  				  			 			  {

	  				  			 					  LCD_SetMode(LCD_MODE_DRAW);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fd40 	bl	8001520 <LCD_SetMode>

	  				  			 					  ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 8001aa0:	231f      	movs	r3, #31
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	23b4      	movs	r3, #180	; 0xb4
 8001aa6:	228c      	movs	r2, #140	; 0x8c
 8001aa8:	218c      	movs	r1, #140	; 0x8c
 8001aaa:	2014      	movs	r0, #20
 8001aac:	f7fe ff62 	bl	8000974 <ILI9341_Fill_Rect>
	  				  			 					  ILI9341_printText("BLUE", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	231f      	movs	r3, #31
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001abc:	229b      	movs	r2, #155	; 0x9b
 8001abe:	2137      	movs	r1, #55	; 0x37
 8001ac0:	48d8      	ldr	r0, [pc, #864]	; (8001e24 <main+0x5f8>)
 8001ac2:	f7ff fa7d 	bl	8000fc0 <ILI9341_printText>
	  				  			 					  ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8001ac6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	23b4      	movs	r3, #180	; 0xb4
 8001ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad2:	218c      	movs	r1, #140	; 0x8c
 8001ad4:	20b4      	movs	r0, #180	; 0xb4
 8001ad6:	f7fe ff4d 	bl	8000974 <ILI9341_Fill_Rect>
	  				  			 					  ILI9341_printText("RED", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 8001ada:	2301      	movs	r3, #1
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae8:	229b      	movs	r2, #155	; 0x9b
 8001aea:	21d7      	movs	r1, #215	; 0xd7
 8001aec:	48ce      	ldr	r0, [pc, #824]	; (8001e28 <main+0x5fc>)
 8001aee:	f7ff fa67 	bl	8000fc0 <ILI9341_printText>
	  				  			 					  LCD_SetMode(LCD_MODE_TOUCH);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fd14 	bl	8001520 <LCD_SetMode>
	  				  			 			  }

	  				  			 if(LCD_Touch_Belong_Interval(&New_p,140,180,30,140))  // carré LED OFF
 8001af8:	f607 603c 	addw	r0, r7, #3644	; 0xe3c
 8001afc:	238c      	movs	r3, #140	; 0x8c
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	231e      	movs	r3, #30
 8001b02:	22b4      	movs	r2, #180	; 0xb4
 8001b04:	218c      	movs	r1, #140	; 0x8c
 8001b06:	f7ff fdd5 	bl	80016b4 <LCD_Touch_Belong_Interval>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d02e      	beq.n	8001b6e <main+0x342>
	  				  			 			{
	  				  			 					 LCD_SetMode(LCD_MODE_DRAW);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fd05 	bl	8001520 <LCD_SetMode>
	  				  			 					 ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_RED);
 8001b16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	23b4      	movs	r3, #180	; 0xb4
 8001b1e:	228c      	movs	r2, #140	; 0x8c
 8001b20:	218c      	movs	r1, #140	; 0x8c
 8001b22:	2014      	movs	r0, #20
 8001b24:	f7fe ff26 	bl	8000974 <ILI9341_Fill_Rect>
	  				  			 					 ILI9341_printText("RED", 55,  155, COLOR_WHITE, COLOR_RED, 1);
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b36:	229b      	movs	r2, #155	; 0x9b
 8001b38:	2137      	movs	r1, #55	; 0x37
 8001b3a:	48bb      	ldr	r0, [pc, #748]	; (8001e28 <main+0x5fc>)
 8001b3c:	f7ff fa40 	bl	8000fc0 <ILI9341_printText>
	  				  			 					 ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_BLUE);
 8001b40:	231f      	movs	r3, #31
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	23b4      	movs	r3, #180	; 0xb4
 8001b46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b4a:	218c      	movs	r1, #140	; 0x8c
 8001b4c:	20b4      	movs	r0, #180	; 0xb4
 8001b4e:	f7fe ff11 	bl	8000974 <ILI9341_Fill_Rect>
	  				  			 					 ILI9341_printText("BLUE", 215,  155, COLOR_WHITE, COLOR_BLUE, 1);
 8001b52:	2301      	movs	r3, #1
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	231f      	movs	r3, #31
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5e:	229b      	movs	r2, #155	; 0x9b
 8001b60:	21d7      	movs	r1, #215	; 0xd7
 8001b62:	48b0      	ldr	r0, [pc, #704]	; (8001e24 <main+0x5f8>)
 8001b64:	f7ff fa2c 	bl	8000fc0 <ILI9341_printText>


	  				  			 					 LCD_SetMode(LCD_MODE_TOUCH);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff fcd9 	bl	8001520 <LCD_SetMode>
	  				  			 			}

	  				  			 if(LCD_Touch_Belong_Interval(&New_p,50,80,60,180))  // rectangle
 8001b6e:	f607 603c 	addw	r0, r7, #3644	; 0xe3c
 8001b72:	23b4      	movs	r3, #180	; 0xb4
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	233c      	movs	r3, #60	; 0x3c
 8001b78:	2250      	movs	r2, #80	; 0x50
 8001b7a:	2132      	movs	r1, #50	; 0x32
 8001b7c:	f7ff fd9a 	bl	80016b4 <LCD_Touch_Belong_Interval>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d07f      	beq.n	8001c86 <main+0x45a>
	  				  			 {
	  				  				 LCD_SetMode(LCD_MODE_DRAW);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fcca 	bl	8001520 <LCD_SetMode>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane1, sizeof(Banane1));
 8001b8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	4ba6      	ldr	r3, [pc, #664]	; (8001e2c <main+0x600>)
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2364      	movs	r3, #100	; 0x64
 8001b98:	2264      	movs	r2, #100	; 0x64
 8001b9a:	211e      	movs	r1, #30
 8001b9c:	203c      	movs	r0, #60	; 0x3c
 8001b9e:	f7ff fa50 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001ba2:	2064      	movs	r0, #100	; 0x64
 8001ba4:	f000 fed2 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane2, sizeof(Banane2));
 8001ba8:	f242 7310 	movw	r3, #10000	; 0x2710
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	4ba0      	ldr	r3, [pc, #640]	; (8001e30 <main+0x604>)
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	2264      	movs	r2, #100	; 0x64
 8001bb6:	211e      	movs	r1, #30
 8001bb8:	203c      	movs	r0, #60	; 0x3c
 8001bba:	f7ff fa42 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001bbe:	2064      	movs	r0, #100	; 0x64
 8001bc0:	f000 fec4 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane3, sizeof(Banane3));
 8001bc4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	4b9a      	ldr	r3, [pc, #616]	; (8001e34 <main+0x608>)
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2364      	movs	r3, #100	; 0x64
 8001bd0:	2264      	movs	r2, #100	; 0x64
 8001bd2:	211e      	movs	r1, #30
 8001bd4:	203c      	movs	r0, #60	; 0x3c
 8001bd6:	f7ff fa34 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001bda:	2064      	movs	r0, #100	; 0x64
 8001bdc:	f000 feb6 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane4, sizeof(Banane4));
 8001be0:	f242 7310 	movw	r3, #10000	; 0x2710
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <main+0x60c>)
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2364      	movs	r3, #100	; 0x64
 8001bec:	2264      	movs	r2, #100	; 0x64
 8001bee:	211e      	movs	r1, #30
 8001bf0:	203c      	movs	r0, #60	; 0x3c
 8001bf2:	f7ff fa26 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001bf6:	2064      	movs	r0, #100	; 0x64
 8001bf8:	f000 fea8 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane5, sizeof(Banane5));
 8001bfc:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	4b8e      	ldr	r3, [pc, #568]	; (8001e3c <main+0x610>)
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	2264      	movs	r2, #100	; 0x64
 8001c0a:	211e      	movs	r1, #30
 8001c0c:	203c      	movs	r0, #60	; 0x3c
 8001c0e:	f7ff fa18 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001c12:	2064      	movs	r0, #100	; 0x64
 8001c14:	f000 fe9a 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane6, sizeof(Banane6));
 8001c18:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <main+0x614>)
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2364      	movs	r3, #100	; 0x64
 8001c24:	2264      	movs	r2, #100	; 0x64
 8001c26:	211e      	movs	r1, #30
 8001c28:	203c      	movs	r0, #60	; 0x3c
 8001c2a:	f7ff fa0a 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001c2e:	2064      	movs	r0, #100	; 0x64
 8001c30:	f000 fe8c 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane7, sizeof(Banane7));
 8001c34:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <main+0x618>)
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2364      	movs	r3, #100	; 0x64
 8001c40:	2264      	movs	r2, #100	; 0x64
 8001c42:	211e      	movs	r1, #30
 8001c44:	203c      	movs	r0, #60	; 0x3c
 8001c46:	f7ff f9fc 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001c4a:	2064      	movs	r0, #100	; 0x64
 8001c4c:	f000 fe7e 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_printImage(60,30, 100,100,Banane8, sizeof(Banane8));
 8001c50:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	4b7c      	ldr	r3, [pc, #496]	; (8001e48 <main+0x61c>)
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2364      	movs	r3, #100	; 0x64
 8001c5c:	2264      	movs	r2, #100	; 0x64
 8001c5e:	211e      	movs	r1, #30
 8001c60:	203c      	movs	r0, #60	; 0x3c
 8001c62:	f7ff f9ee 	bl	8001042 <ILI9341_printImage>
	  				  				 HAL_Delay(100);
 8001c66:	2064      	movs	r0, #100	; 0x64
 8001c68:	f000 fe70 	bl	800294c <HAL_Delay>
	  				  				 ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 8001c6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	235a      	movs	r3, #90	; 0x5a
 8001c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c78:	211e      	movs	r1, #30
 8001c7a:	203c      	movs	r0, #60	; 0x3c
 8001c7c:	f7fe fe7a 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 LCD_SetMode(LCD_MODE_TOUCH);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fc4d 	bl	8001520 <LCD_SetMode>
	  				  			 }
	  				  			 if(LCD_Touch_Belong_Interval(&New_p,1,50,1,50))  // Clear
 8001c86:	f607 603c 	addw	r0, r7, #3644	; 0xe3c
 8001c8a:	2332      	movs	r3, #50	; 0x32
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2232      	movs	r2, #50	; 0x32
 8001c92:	2101      	movs	r1, #1
 8001c94:	f7ff fd0e 	bl	80016b4 <LCD_Touch_Belong_Interval>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 808e 	beq.w	8001dbc <main+0x590>
	  				  			 			 {
	  				  				 	 	 	 LCD_SetMode(LCD_MODE_DRAW);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fc3d 	bl	8001520 <LCD_SetMode>
	  				  				 	 	 	 ILI9341_Fill(COLOR_WHITE);
 8001ca6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001caa:	f7fe fe1f 	bl	80008ec <ILI9341_Fill>
	  				  				 	 	 	 ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 8001cae:	231f      	movs	r3, #31
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	23b4      	movs	r3, #180	; 0xb4
 8001cb4:	228c      	movs	r2, #140	; 0x8c
 8001cb6:	218c      	movs	r1, #140	; 0x8c
 8001cb8:	2014      	movs	r0, #20
 8001cba:	f7fe fe5b 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 	 	 	 ILI9341_printText("BLUE", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	231f      	movs	r3, #31
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cca:	229b      	movs	r2, #155	; 0x9b
 8001ccc:	2137      	movs	r1, #55	; 0x37
 8001cce:	4855      	ldr	r0, [pc, #340]	; (8001e24 <main+0x5f8>)
 8001cd0:	f7ff f976 	bl	8000fc0 <ILI9341_printText>
	  				  				 	 	 	 ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8001cd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	23b4      	movs	r3, #180	; 0xb4
 8001cdc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ce0:	218c      	movs	r1, #140	; 0x8c
 8001ce2:	20b4      	movs	r0, #180	; 0xb4
 8001ce4:	f7fe fe46 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 	 	 	 ILI9341_printText("RED", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 8001ce8:	2301      	movs	r3, #1
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf6:	229b      	movs	r2, #155	; 0x9b
 8001cf8:	21d7      	movs	r1, #215	; 0xd7
 8001cfa:	484b      	ldr	r0, [pc, #300]	; (8001e28 <main+0x5fc>)
 8001cfc:	f7ff f960 	bl	8000fc0 <ILI9341_printText>
	  				  				 	 	 	 ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 8001d00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	235a      	movs	r3, #90	; 0x5a
 8001d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d0c:	211e      	movs	r1, #30
 8001d0e:	203c      	movs	r0, #60	; 0x3c
 8001d10:	f7fe fe30 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 	 	 	 ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 8001d14:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	23eb      	movs	r3, #235	; 0xeb
 8001d1c:	f240 123b 	movw	r2, #315	; 0x13b
 8001d20:	21d7      	movs	r1, #215	; 0xd7
 8001d22:	2005      	movs	r0, #5
 8001d24:	f7fe fe26 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 	 	 	 ILI9341_printText("Last touch point X=000  Y=000", 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d36:	22dd      	movs	r2, #221	; 0xdd
 8001d38:	2146      	movs	r1, #70	; 0x46
 8001d3a:	4844      	ldr	r0, [pc, #272]	; (8001e4c <main+0x620>)
 8001d3c:	f7ff f940 	bl	8000fc0 <ILI9341_printText>
	  				  				 	 	 	 ILI9341_Fill_Rect(5, 215, 5, 25, COLOR_GREEN);
 8001d40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2319      	movs	r3, #25
 8001d48:	2205      	movs	r2, #5
 8001d4a:	21d7      	movs	r1, #215	; 0xd7
 8001d4c:	2005      	movs	r0, #5
 8001d4e:	f7fe fe11 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 	 	 	 ILI9341_printText("Max, Leo, Margot, time to start ", 60 ,5, COLOR_WHITE, COLOR_BLACK, 1);
 8001d52:	2301      	movs	r3, #1
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5e:	2205      	movs	r2, #5
 8001d60:	213c      	movs	r1, #60	; 0x3c
 8001d62:	483b      	ldr	r0, [pc, #236]	; (8001e50 <main+0x624>)
 8001d64:	f7ff f92c 	bl	8000fc0 <ILI9341_printText>
	  				  				 	 	 	 ILI9341_Fill_Rect(280, 0, 320, 40, COLOR_RED);
 8001d68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2328      	movs	r3, #40	; 0x28
 8001d70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d74:	2100      	movs	r1, #0
 8001d76:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001d7a:	f7fe fdfb 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 	 	 	 ILI9341_printText("X", 292, 5, COLOR_WHITE, COLOR_RED, 4);
 8001d7e:	2304      	movs	r3, #4
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001d92:	4830      	ldr	r0, [pc, #192]	; (8001e54 <main+0x628>)
 8001d94:	f7ff f914 	bl	8000fc0 <ILI9341_printText>
	  				  				 	 	 	 LCD_SetMode(LCD_MODE_TOUCH);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff fbc1 	bl	8001520 <LCD_SetMode>
	  				  				 	 	 	 New_p.x=0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8a7 3e3c 	strh.w	r3, [r7, #3644]	; 0xe3c
	  				  				 	 		 New_p.y=0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8a7 3e3e 	strh.w	r3, [r7, #3646]	; 0xe3e
	  				  				 	 		 p.y=0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8a7 3e4a 	strh.w	r3, [r7, #3658]	; 0xe4a
	  				  				 	 		 p.x=0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8a7 3e48 	strh.w	r3, [r7, #3656]	; 0xe48
	  				  				 	 	flag=0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3e57 	strb.w	r3, [r7, #3671]	; 0xe57
	  				  				 	//ILI9341_SendCommand(ILI9341_DISPLAY_OFF); // test reset l'écran
	  				  			 			 }
	  				  			 if(New_p.y>p.y+20 && p.y>250 && p.x>70 && p.x<170) //swipe left to the right
 8001dbc:	f9b7 3e3e 	ldrsh.w	r3, [r7, #3646]	; 0xe3e
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f9b7 3e4a 	ldrsh.w	r3, [r7, #3658]	; 0xe4a
 8001dc6:	3314      	adds	r3, #20
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f340 80a8 	ble.w	8001f1e <main+0x6f2>
 8001dce:	f9b7 3e4a 	ldrsh.w	r3, [r7, #3658]	; 0xe4a
 8001dd2:	2bfa      	cmp	r3, #250	; 0xfa
 8001dd4:	f340 80a3 	ble.w	8001f1e <main+0x6f2>
 8001dd8:	f9b7 3e48 	ldrsh.w	r3, [r7, #3656]	; 0xe48
 8001ddc:	2b46      	cmp	r3, #70	; 0x46
 8001dde:	f340 809e 	ble.w	8001f1e <main+0x6f2>
 8001de2:	f9b7 3e48 	ldrsh.w	r3, [r7, #3656]	; 0xe48
 8001de6:	2ba9      	cmp	r3, #169	; 0xa9
 8001de8:	f300 8099 	bgt.w	8001f1e <main+0x6f2>
	  				  			 {
	  				  				 LCD_SetMode(LCD_MODE_DRAW);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fb97 	bl	8001520 <LCD_SetMode>
	  				  				 ILI9341_Fill(COLOR_BLUE);
 8001df2:	201f      	movs	r0, #31
 8001df4:	f7fe fd7a 	bl	80008ec <ILI9341_Fill>
	  				  				 ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 8001df8:	231f      	movs	r3, #31
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	23b4      	movs	r3, #180	; 0xb4
 8001dfe:	228c      	movs	r2, #140	; 0x8c
 8001e00:	218c      	movs	r1, #140	; 0x8c
 8001e02:	2014      	movs	r0, #20
 8001e04:	f7fe fdb6 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 ILI9341_printText("BLUE", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 8001e08:	2301      	movs	r3, #1
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	231f      	movs	r3, #31
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e14:	229b      	movs	r2, #155	; 0x9b
 8001e16:	2137      	movs	r1, #55	; 0x37
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <main+0x5f8>)
 8001e1a:	f7ff f8d1 	bl	8000fc0 <ILI9341_printText>
	  				  				 ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8001e1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e22:	e019      	b.n	8001e58 <main+0x62c>
 8001e24:	08005348 	.word	0x08005348
 8001e28:	08005350 	.word	0x08005350
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	20002714 	.word	0x20002714
 8001e34:	20004e24 	.word	0x20004e24
 8001e38:	20007534 	.word	0x20007534
 8001e3c:	20009c44 	.word	0x20009c44
 8001e40:	2000c354 	.word	0x2000c354
 8001e44:	2000ea64 	.word	0x2000ea64
 8001e48:	20011174 	.word	0x20011174
 8001e4c:	08005354 	.word	0x08005354
 8001e50:	08005374 	.word	0x08005374
 8001e54:	08005398 	.word	0x08005398
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	23b4      	movs	r3, #180	; 0xb4
 8001e5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e60:	218c      	movs	r1, #140	; 0x8c
 8001e62:	20b4      	movs	r0, #180	; 0xb4
 8001e64:	f7fe fd86 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 ILI9341_printText("RED", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e76:	229b      	movs	r2, #155	; 0x9b
 8001e78:	21d7      	movs	r1, #215	; 0xd7
 8001e7a:	48aa      	ldr	r0, [pc, #680]	; (8002124 <main+0x8f8>)
 8001e7c:	f7ff f8a0 	bl	8000fc0 <ILI9341_printText>
	  				  				 ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 8001e80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	235a      	movs	r3, #90	; 0x5a
 8001e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e8c:	211e      	movs	r1, #30
 8001e8e:	203c      	movs	r0, #60	; 0x3c
 8001e90:	f7fe fd70 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 8001e94:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	23eb      	movs	r3, #235	; 0xeb
 8001e9c:	f240 123b 	movw	r2, #315	; 0x13b
 8001ea0:	21d7      	movs	r1, #215	; 0xd7
 8001ea2:	2005      	movs	r0, #5
 8001ea4:	f7fe fd66 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 ILI9341_printText("Last touch point X=000  Y=000", 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb6:	22dd      	movs	r2, #221	; 0xdd
 8001eb8:	2146      	movs	r1, #70	; 0x46
 8001eba:	489b      	ldr	r0, [pc, #620]	; (8002128 <main+0x8fc>)
 8001ebc:	f7ff f880 	bl	8000fc0 <ILI9341_printText>
	  				  				 ILI9341_Fill_Rect(5, 215, 5, 25, COLOR_GREEN);
 8001ec0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2319      	movs	r3, #25
 8001ec8:	2205      	movs	r2, #5
 8001eca:	21d7      	movs	r1, #215	; 0xd7
 8001ecc:	2005      	movs	r0, #5
 8001ece:	f7fe fd51 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 ILI9341_printText("Max, Leo, Margot, time to start ", 60 ,5, COLOR_WHITE, COLOR_BLACK, 1);
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ede:	2205      	movs	r2, #5
 8001ee0:	213c      	movs	r1, #60	; 0x3c
 8001ee2:	4892      	ldr	r0, [pc, #584]	; (800212c <main+0x900>)
 8001ee4:	f7ff f86c 	bl	8000fc0 <ILI9341_printText>
	  				  				 ILI9341_Fill_Rect(280, 0, 320, 40, COLOR_RED);
 8001ee8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2328      	movs	r3, #40	; 0x28
 8001ef0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001efa:	f7fe fd3b 	bl	8000974 <ILI9341_Fill_Rect>
	  				  				 ILI9341_printText("X", 292, 5, COLOR_WHITE, COLOR_RED, 4);
 8001efe:	2304      	movs	r3, #4
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001f12:	4887      	ldr	r0, [pc, #540]	; (8002130 <main+0x904>)
 8001f14:	f7ff f854 	bl	8000fc0 <ILI9341_printText>
	  				  				 LCD_SetMode(LCD_MODE_TOUCH);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff fb01 	bl	8001520 <LCD_SetMode>
								}
	  				  			if(p.y<70 && New_p.y<p.y-20 && New_p.x>70 && New_p.x<170) //swipe right to the left
 8001f1e:	f9b7 3e4a 	ldrsh.w	r3, [r7, #3658]	; 0xe4a
 8001f22:	2b45      	cmp	r3, #69	; 0x45
 8001f24:	f300 8091 	bgt.w	800204a <main+0x81e>
 8001f28:	f9b7 3e3e 	ldrsh.w	r3, [r7, #3646]	; 0xe3e
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f9b7 3e4a 	ldrsh.w	r3, [r7, #3658]	; 0xe4a
 8001f32:	3b14      	subs	r3, #20
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f280 8088 	bge.w	800204a <main+0x81e>
 8001f3a:	f9b7 3e3c 	ldrsh.w	r3, [r7, #3644]	; 0xe3c
 8001f3e:	2b46      	cmp	r3, #70	; 0x46
 8001f40:	f340 8083 	ble.w	800204a <main+0x81e>
 8001f44:	f9b7 3e3c 	ldrsh.w	r3, [r7, #3644]	; 0xe3c
 8001f48:	2ba9      	cmp	r3, #169	; 0xa9
 8001f4a:	dc7e      	bgt.n	800204a <main+0x81e>
	  				  			{
	  				  				LCD_SetMode(LCD_MODE_DRAW);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fae7 	bl	8001520 <LCD_SetMode>
									ILI9341_Fill(COLOR_RED);
 8001f52:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f56:	f7fe fcc9 	bl	80008ec <ILI9341_Fill>
									ILI9341_Fill_Rect(20, 140, 140, 180, COLOR_BLUE);
 8001f5a:	231f      	movs	r3, #31
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	23b4      	movs	r3, #180	; 0xb4
 8001f60:	228c      	movs	r2, #140	; 0x8c
 8001f62:	218c      	movs	r1, #140	; 0x8c
 8001f64:	2014      	movs	r0, #20
 8001f66:	f7fe fd05 	bl	8000974 <ILI9341_Fill_Rect>
									ILI9341_printText("LED ON", 55,  155, COLOR_WHITE, COLOR_BLUE, 1);
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	231f      	movs	r3, #31
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f76:	229b      	movs	r2, #155	; 0x9b
 8001f78:	2137      	movs	r1, #55	; 0x37
 8001f7a:	486e      	ldr	r0, [pc, #440]	; (8002134 <main+0x908>)
 8001f7c:	f7ff f820 	bl	8000fc0 <ILI9341_printText>
									ILI9341_Fill_Rect(180, 140, 300, 180, COLOR_RED);
 8001f80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	23b4      	movs	r3, #180	; 0xb4
 8001f88:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f8c:	218c      	movs	r1, #140	; 0x8c
 8001f8e:	20b4      	movs	r0, #180	; 0xb4
 8001f90:	f7fe fcf0 	bl	8000974 <ILI9341_Fill_Rect>
									ILI9341_printText("LED OFF", 215,  155, COLOR_WHITE, COLOR_RED, 1);
 8001f94:	2301      	movs	r3, #1
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa2:	229b      	movs	r2, #155	; 0x9b
 8001fa4:	21d7      	movs	r1, #215	; 0xd7
 8001fa6:	4864      	ldr	r0, [pc, #400]	; (8002138 <main+0x90c>)
 8001fa8:	f7ff f80a 	bl	8000fc0 <ILI9341_printText>
									ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
 8001fac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	235a      	movs	r3, #90	; 0x5a
 8001fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb8:	211e      	movs	r1, #30
 8001fba:	203c      	movs	r0, #60	; 0x3c
 8001fbc:	f7fe fcda 	bl	8000974 <ILI9341_Fill_Rect>
									ILI9341_Fill_Rect(5, 215, 315, 235, COLOR_ORANGE);
 8001fc0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	23eb      	movs	r3, #235	; 0xeb
 8001fc8:	f240 123b 	movw	r2, #315	; 0x13b
 8001fcc:	21d7      	movs	r1, #215	; 0xd7
 8001fce:	2005      	movs	r0, #5
 8001fd0:	f7fe fcd0 	bl	8000974 <ILI9341_Fill_Rect>
									ILI9341_printText("Last touch point X=000  Y=000", 70, 221, COLOR_WHITE, COLOR_ORANGE, 1);
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe2:	22dd      	movs	r2, #221	; 0xdd
 8001fe4:	2146      	movs	r1, #70	; 0x46
 8001fe6:	4850      	ldr	r0, [pc, #320]	; (8002128 <main+0x8fc>)
 8001fe8:	f7fe ffea 	bl	8000fc0 <ILI9341_printText>
									ILI9341_Fill_Rect(5, 215, 5, 25, COLOR_GREEN);
 8001fec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2319      	movs	r3, #25
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	21d7      	movs	r1, #215	; 0xd7
 8001ff8:	2005      	movs	r0, #5
 8001ffa:	f7fe fcbb 	bl	8000974 <ILI9341_Fill_Rect>
									ILI9341_printText("Max, Leo, Margot, time to start ", 60 ,5, COLOR_WHITE, COLOR_BLACK, 1);
 8001ffe:	2301      	movs	r3, #1
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	2300      	movs	r3, #0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800200a:	2205      	movs	r2, #5
 800200c:	213c      	movs	r1, #60	; 0x3c
 800200e:	4847      	ldr	r0, [pc, #284]	; (800212c <main+0x900>)
 8002010:	f7fe ffd6 	bl	8000fc0 <ILI9341_printText>
									ILI9341_Fill_Rect(280, 0, 320, 40, COLOR_RED);
 8002014:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2328      	movs	r3, #40	; 0x28
 800201c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002020:	2100      	movs	r1, #0
 8002022:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002026:	f7fe fca5 	bl	8000974 <ILI9341_Fill_Rect>
									ILI9341_printText("X", 292, 5, COLOR_WHITE, COLOR_RED, 4);
 800202a:	2304      	movs	r3, #4
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002038:	2205      	movs	r2, #5
 800203a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800203e:	483c      	ldr	r0, [pc, #240]	; (8002130 <main+0x904>)
 8002040:	f7fe ffbe 	bl	8000fc0 <ILI9341_printText>
									LCD_SetMode(LCD_MODE_TOUCH);
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff fa6b 	bl	8001520 <LCD_SetMode>
	  				  			}
	  				  		if(p.y>70 &&  p.y<170 && New_p.x<p.x-15 && p.x>150 ) //swipe up
 800204a:	f9b7 3e4a 	ldrsh.w	r3, [r7, #3658]	; 0xe4a
 800204e:	2b46      	cmp	r3, #70	; 0x46
 8002050:	dd66      	ble.n	8002120 <main+0x8f4>
 8002052:	f9b7 3e4a 	ldrsh.w	r3, [r7, #3658]	; 0xe4a
 8002056:	2ba9      	cmp	r3, #169	; 0xa9
 8002058:	dc62      	bgt.n	8002120 <main+0x8f4>
 800205a:	f9b7 3e3c 	ldrsh.w	r3, [r7, #3644]	; 0xe3c
 800205e:	461a      	mov	r2, r3
 8002060:	f9b7 3e48 	ldrsh.w	r3, [r7, #3656]	; 0xe48
 8002064:	3b0f      	subs	r3, #15
 8002066:	429a      	cmp	r2, r3
 8002068:	da5a      	bge.n	8002120 <main+0x8f4>
 800206a:	f9b7 3e48 	ldrsh.w	r3, [r7, #3656]	; 0xe48
 800206e:	2b96      	cmp	r3, #150	; 0x96
 8002070:	dd56      	ble.n	8002120 <main+0x8f4>
	  				  			{
	  				  			 	 LCD_SetMode(LCD_MODE_DRAW);
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fa54 	bl	8001520 <LCD_SetMode>
	  				  			 	 ILI9341_Fill(COLOR_BLACK);
 8002078:	2000      	movs	r0, #0
 800207a:	f7fe fc37 	bl	80008ec <ILI9341_Fill>
	  				  			 	 ILI9341_printImage(100,100, 100,100,VB2, sizeof(VB2));
 800207e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <main+0x910>)
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2364      	movs	r3, #100	; 0x64
 800208a:	2264      	movs	r2, #100	; 0x64
 800208c:	2164      	movs	r1, #100	; 0x64
 800208e:	2064      	movs	r0, #100	; 0x64
 8002090:	f7fe ffd7 	bl	8001042 <ILI9341_printImage>
	  				  			 	 ILI9341_Fill_Rect(280, 0, 320, 40, COLOR_RED);
 8002094:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2328      	movs	r3, #40	; 0x28
 800209c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020a0:	2100      	movs	r1, #0
 80020a2:	f44f 708c 	mov.w	r0, #280	; 0x118
 80020a6:	f7fe fc65 	bl	8000974 <ILI9341_Fill_Rect>
	  				  			 	 ILI9341_printText("X", 292, 5, COLOR_WHITE, COLOR_RED, 4);
 80020aa:	2304      	movs	r3, #4
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	2205      	movs	r2, #5
 80020ba:	f44f 7192 	mov.w	r1, #292	; 0x124
 80020be:	481c      	ldr	r0, [pc, #112]	; (8002130 <main+0x904>)
 80020c0:	f7fe ff7e 	bl	8000fc0 <ILI9341_printText>
	  				  			 	 LCD_SetMode(LCD_MODE_TOUCH);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7ff fa2b 	bl	8001520 <LCD_SetMode>
	  				  		if(p.y>70 &&  p.y<170 && New_p.x<p.x-15 && p.x>150 ) //swipe up
 80020ca:	e029      	b.n	8002120 <main+0x8f4>

	  				  			}


	  		  }
	  		 else if(LCD_Touch_GetState()==LCD_TOUCH_UP){ //if the touch end
 80020cc:	f7ff fae6 	bl	800169c <LCD_Touch_GetState>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d11f      	bne.n	8002116 <main+0x8ea>
	  			 	 char  BUF[3600];
	  				  sprintf(BUF,"Ticktime : %ld",p.tick);
 80020d6:	f8d7 2e4c 	ldr.w	r2, [r7, #3660]	; 0xe4c
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4918      	ldr	r1, [pc, #96]	; (8002140 <main+0x914>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fc96 	bl	8004a10 <siprintf>
	  				  ILI9341_printText(BUF, 60 ,60, COLOR_WHITE, COLOR_ORANGE, 1);
 80020e4:	1d38      	adds	r0, r7, #4
 80020e6:	2301      	movs	r3, #1
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f4:	223c      	movs	r2, #60	; 0x3c
 80020f6:	213c      	movs	r1, #60	; 0x3c
 80020f8:	f7fe ff62 	bl	8000fc0 <ILI9341_printText>
	  				  BUF[0]='\0';
 80020fc:	f607 6358 	addw	r3, r7, #3672	; 0xe58
 8002100:	f6a3 6354 	subw	r3, r3, #3668	; 0xe54
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
	  				  p.tick=0;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 3e4c 	str.w	r3, [r7, #3660]	; 0xe4c
	  				  flag=0;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3e57 	strb.w	r3, [r7, #3671]	; 0xe57
 8002114:	e44e      	b.n	80019b4 <main+0x188>
	  			 /* LCD_SetMode(LCD_MODE_DRAW);
	  			  ILI9341_Fill_Rect(60, 30, 260, 90, COLOR_RED);
	  			  ILI9341_printText("NO TOUCH ", 60 ,60, COLOR_WHITE, COLOR_ORANGE, 1);
	  			  HAL_Delay(1000);
	  			  LCD_SetMode(LCD_MODE_TOUCH);*/
	  			flag=0;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3e57 	strb.w	r3, [r7, #3671]	; 0xe57
	  			  __WFI();
 800211c:	bf30      	wfi
 800211e:	e449      	b.n	80019b4 <main+0x188>
	  				  		if(p.y>70 &&  p.y<170 && New_p.x<p.x-15 && p.x>150 ) //swipe up
 8002120:	bf00      	nop
	  if(LCD_Touch_GetState()==LCD_TOUCH_DOWN ) //if there is a touch starting
 8002122:	e447      	b.n	80019b4 <main+0x188>
 8002124:	08005350 	.word	0x08005350
 8002128:	08005354 	.word	0x08005354
 800212c:	08005374 	.word	0x08005374
 8002130:	08005398 	.word	0x08005398
 8002134:	0800539c 	.word	0x0800539c
 8002138:	080053a4 	.word	0x080053a4
 800213c:	20013884 	.word	0x20013884
 8002140:	080053ac 	.word	0x080053ac

08002144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b094      	sub	sp, #80	; 0x50
 8002148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	2234      	movs	r2, #52	; 0x34
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fc54 	bl	8004a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <SystemClock_Config+0xdc>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <SystemClock_Config+0xdc>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	; 0x40
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <SystemClock_Config+0xdc>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002184:	2300      	movs	r3, #0
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <SystemClock_Config+0xe0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a25      	ldr	r2, [pc, #148]	; (8002224 <SystemClock_Config+0xe0>)
 800218e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <SystemClock_Config+0xe0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021aa:	2302      	movs	r3, #2
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021b4:	2304      	movs	r3, #4
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80021b8:	23b4      	movs	r3, #180	; 0xb4
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021bc:	2302      	movs	r3, #2
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021c0:	2302      	movs	r3, #2
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 feb1 	bl	8003f34 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021d8:	f000 f98a 	bl	80024f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021dc:	f001 fb44 	bl	8003868 <HAL_PWREx_EnableOverDrive>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021e6:	f000 f983 	bl	80024f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ea:	230f      	movs	r3, #15
 80021ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ee:	2302      	movs	r3, #2
 80021f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002200:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	2105      	movs	r1, #5
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fb7d 	bl	8003908 <HAL_RCC_ClockConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002214:	f000 f96c 	bl	80024f0 <Error_Handler>
  }
}
 8002218:	bf00      	nop
 800221a:	3750      	adds	r7, #80	; 0x50
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800222e:	463b      	mov	r3, r7
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <MX_ADC1_Init+0x98>)
 800223c:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <MX_ADC1_Init+0x9c>)
 800223e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002246:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_ADC1_Init+0x98>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002256:	2200      	movs	r2, #0
 8002258:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <MX_ADC1_Init+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002264:	2200      	movs	r2, #0
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_ADC1_Init+0x98>)
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <MX_ADC1_Init+0xa0>)
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002276:	2201      	movs	r2, #1
 8002278:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_ADC1_Init+0x98>)
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002284:	2201      	movs	r2, #1
 8002286:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002288:	480d      	ldr	r0, [pc, #52]	; (80022c0 <MX_ADC1_Init+0x98>)
 800228a:	f000 fb83 	bl	8002994 <HAL_ADC_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002294:	f000 f92c 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002298:	2301      	movs	r3, #1
 800229a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_ADC1_Init+0x98>)
 80022aa:	f000 fd55 	bl	8002d58 <HAL_ADC_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80022b4:	f000 f91c 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200187bc 	.word	0x200187bc
 80022c4:	40012000 	.word	0x40012000
 80022c8:	0f000001 	.word	0x0f000001

080022cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022d2:	463b      	mov	r3, r7
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <MX_ADC2_Init+0x98>)
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <MX_ADC2_Init+0x9c>)
 80022e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <MX_ADC2_Init+0x98>)
 80022e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <MX_ADC2_Init+0x98>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <MX_ADC2_Init+0x98>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <MX_ADC2_Init+0x98>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80022fe:	4b19      	ldr	r3, [pc, #100]	; (8002364 <MX_ADC2_Init+0x98>)
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <MX_ADC2_Init+0x98>)
 8002308:	2200      	movs	r2, #0
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <MX_ADC2_Init+0x98>)
 800230e:	4a17      	ldr	r2, [pc, #92]	; (800236c <MX_ADC2_Init+0xa0>)
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <MX_ADC2_Init+0x98>)
 8002314:	2200      	movs	r2, #0
 8002316:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <MX_ADC2_Init+0x98>)
 800231a:	2201      	movs	r2, #1
 800231c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <MX_ADC2_Init+0x98>)
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <MX_ADC2_Init+0x98>)
 8002328:	2201      	movs	r2, #1
 800232a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <MX_ADC2_Init+0x98>)
 800232e:	f000 fb31 	bl	8002994 <HAL_ADC_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002338:	f000 f8da 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800233c:	2304      	movs	r3, #4
 800233e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002340:	2301      	movs	r3, #1
 8002342:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_ADC2_Init+0x98>)
 800234e:	f000 fd03 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002358:	f000 f8ca 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20018804 	.word	0x20018804
 8002368:	40012100 	.word	0x40012100
 800236c:	0f000001 	.word	0x0f000001

08002370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <MX_SPI1_Init+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_SPI1_Init+0x64>)
 800237c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_SPI1_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_SPI1_Init+0x64>)
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023bc:	220a      	movs	r2, #10
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023c2:	f002 f855 	bl	8004470 <HAL_SPI_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023cc:	f000 f890 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	2001884c 	.word	0x2001884c
 80023d8:	40013000 	.word	0x40013000

080023dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <MX_GPIO_Init+0x104>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a39      	ldr	r2, [pc, #228]	; (80024e0 <MX_GPIO_Init+0x104>)
 80023fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <MX_GPIO_Init+0x104>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <MX_GPIO_Init+0x104>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <MX_GPIO_Init+0x104>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002468:	481e      	ldr	r0, [pc, #120]	; (80024e4 <MX_GPIO_Init+0x108>)
 800246a:	f001 f9bf 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	481d      	ldr	r0, [pc, #116]	; (80024e8 <MX_GPIO_Init+0x10c>)
 8002474:	f001 f9ba 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2160      	movs	r1, #96	; 0x60
 800247c:	481b      	ldr	r0, [pc, #108]	; (80024ec <MX_GPIO_Init+0x110>)
 800247e:	f001 f9b5 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 8002482:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	2301      	movs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4812      	ldr	r0, [pc, #72]	; (80024e4 <MX_GPIO_Init+0x108>)
 800249c:	f000 fffa 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a4:	2301      	movs	r3, #1
 80024a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	480c      	ldr	r0, [pc, #48]	; (80024e8 <MX_GPIO_Init+0x10c>)
 80024b8:	f000 ffec 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 80024bc:	2360      	movs	r3, #96	; 0x60
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <MX_GPIO_Init+0x110>)
 80024d4:	f000 ffde 	bl	8003494 <HAL_GPIO_Init>

}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020400 	.word	0x40020400

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <Error_Handler+0x8>
	...

080024fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_MspInit+0x4c>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_MspInit+0x4c>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800253a:	2007      	movs	r0, #7
 800253c:	f000 ff4c 	bl	80033d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <HAL_ADC_MspInit+0xd8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d128      	bne.n	80025c0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a25      	ldr	r2, [pc, #148]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025a6:	2302      	movs	r3, #2
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025aa:	2303      	movs	r3, #3
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	4619      	mov	r1, r3
 80025b8:	481c      	ldr	r0, [pc, #112]	; (800262c <HAL_ADC_MspInit+0xe0>)
 80025ba:	f000 ff6b 	bl	8003494 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025be:	e02c      	b.n	800261a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <HAL_ADC_MspInit+0xe4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d127      	bne.n	800261a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 80025d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_ADC_MspInit+0xdc>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002602:	2310      	movs	r3, #16
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002606:	2303      	movs	r3, #3
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <HAL_ADC_MspInit+0xe0>)
 8002616:	f000 ff3d 	bl	8003494 <HAL_GPIO_Init>
}
 800261a:	bf00      	nop
 800261c:	3730      	adds	r7, #48	; 0x30
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40012000 	.word	0x40012000
 8002628:	40023800 	.word	0x40023800
 800262c:	40020000 	.word	0x40020000
 8002630:	40012100 	.word	0x40012100

08002634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_SPI_MspInit+0xc0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d149      	bne.n	80026ea <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 8002660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_SPI_MspInit+0xc4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ba:	2305      	movs	r3, #5
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <HAL_SPI_MspInit+0xc8>)
 80026c6:	f000 fee5 	bl	8003494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026ca:	2308      	movs	r3, #8
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026da:	2305      	movs	r3, #5
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4806      	ldr	r0, [pc, #24]	; (8002700 <HAL_SPI_MspInit+0xcc>)
 80026e6:	f000 fed5 	bl	8003494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40013000 	.word	0x40013000
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <NMI_Handler+0x4>

0800270a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler+0x4>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler+0x4>

08002722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002750:	f000 f8dc 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}

08002758 <EXTI4_IRQHandler>:
 *   LCD_TOUCH_DOWN,
 *   LCD_TOUCH_MOVE,
 *   LCD_TOUCH_UP
 * events, if LCD_MODE_TOUCH is selected.
 */
void EXTI4_IRQHandler(void) {
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 800275c:	2110      	movs	r1, #16
 800275e:	4808      	ldr	r0, [pc, #32]	; (8002780 <EXTI4_IRQHandler+0x28>)
 8002760:	f001 f82c 	bl	80037bc <HAL_GPIO_ReadPin>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <EXTI4_IRQHandler+0x18>
		LCD_Touch_OnDown();
 800276a:	f7fe ff71 	bl	8001650 <LCD_Touch_OnDown>
 800276e:	e001      	b.n	8002774 <EXTI4_IRQHandler+0x1c>
	} else {
		LCD_Touch_OnUp();
 8002770:	f7fe ff7e 	bl	8001670 <LCD_Touch_OnUp>
	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002774:	2010      	movs	r0, #16
 8002776:	f001 f853 	bl	8003820 <HAL_GPIO_EXTI_IRQHandler>
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40020000 	.word	0x40020000

08002784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <_sbrk+0x5c>)
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <_sbrk+0x60>)
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b4:	f002 f8ec 	bl	8004990 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20020000 	.word	0x20020000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	200188a4 	.word	0x200188a4
 80027ec:	200188c0 	.word	0x200188c0

080027f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <SystemInit+0x20>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <SystemInit+0x20>)
 80027fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800284c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800281a:	490e      	ldr	r1, [pc, #56]	; (8002854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800281c:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002830:	4c0b      	ldr	r4, [pc, #44]	; (8002860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800283e:	f7ff ffd7 	bl	80027f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002842:	f002 f8ab 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002846:	f7fe fff1 	bl	800182c <main>
  bx  lr    
 800284a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800284c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002854:	20018714 	.word	0x20018714
  ldr r2, =_sidata
 8002858:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 800285c:	20018714 	.word	0x20018714
  ldr r4, =_ebss
 8002860:	200188bc 	.word	0x200188bc

08002864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002864:	e7fe      	b.n	8002864 <ADC_IRQHandler>
	...

08002868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <HAL_Init+0x40>)
 8002872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_Init+0x40>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <HAL_Init+0x40>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fda1 	bl	80033d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f808 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800289c:	f7ff fe2e 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x54>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_InitTick+0x58>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fdc7 	bl	800345e <HAL_SYSTICK_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00e      	b.n	80028f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d80a      	bhi.n	80028f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e8:	f000 fd81 	bl	80033ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_InitTick+0x5c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200186a4 	.word	0x200186a4
 8002904:	200186ac 	.word	0x200186ac
 8002908:	200186a8 	.word	0x200186a8

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	200186ac 	.word	0x200186ac
 8002930:	200188a8 	.word	0x200188a8

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200188a8 	.word	0x200188a8

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff ffee 	bl	8002934 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffde 	bl	8002934 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200186ac 	.word	0x200186ac

08002994 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e033      	b.n	8002a12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fdca 	bl	800254c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029da:	f023 0302 	bic.w	r3, r3, #2
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fae8 	bl	8002fbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f023 0303 	bic.w	r3, r3, #3
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
 8002a02:	e001      	b.n	8002a08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Start+0x1a>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0b2      	b.n	8002b9c <HAL_ADC_Start+0x180>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d018      	beq.n	8002a7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_ADC_Start+0x18c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_ADC_Start+0x190>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9a      	lsrs	r2, r3, #18
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a70:	e002      	b.n	8002a78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f9      	bne.n	8002a72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d17a      	bne.n	8002b82 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ab6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	d106      	bne.n	8002ada <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f023 0206 	bic.w	r2, r3, #6
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_ADC_Start+0x194>)
 8002aea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002af4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d12a      	bne.n	8002b58 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_ADC_Start+0x198>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d015      	beq.n	8002b38 <HAL_ADC_Start+0x11c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <HAL_ADC_Start+0x19c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_Start+0x106>
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_ADC_Start+0x194>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <HAL_ADC_Start+0x1a0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d136      	bne.n	8002b9a <HAL_ADC_Start+0x17e>
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_ADC_Start+0x194>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d130      	bne.n	8002b9a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d129      	bne.n	8002b9a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	e020      	b.n	8002b9a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_ADC_Start+0x198>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d11b      	bne.n	8002b9a <HAL_ADC_Start+0x17e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d114      	bne.n	8002b9a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	e00b      	b.n	8002b9a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	200186a4 	.word	0x200186a4
 8002bac:	431bde83 	.word	0x431bde83
 8002bb0:	40012300 	.word	0x40012300
 8002bb4:	40012000 	.word	0x40012000
 8002bb8:	40012100 	.word	0x40012100
 8002bbc:	40012200 	.word	0x40012200

08002bc0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_Stop+0x16>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e021      	b.n	8002c1a <HAL_ADC_Stop+0x5a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d113      	bne.n	8002c6c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c52:	d10b      	bne.n	8002c6c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e063      	b.n	8002d34 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c6c:	f7ff fe62 	bl	8002934 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c72:	e021      	b.n	8002cb8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d01d      	beq.n	8002cb8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x6c>
 8002c82:	f7ff fe57 	bl	8002934 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d212      	bcs.n	8002cb8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e03d      	b.n	8002d34 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d1d6      	bne.n	8002c74 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0212 	mvn.w	r2, #18
 8002cce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d123      	bne.n	8002d32 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d11f      	bne.n	8002d32 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d111      	bne.n	8002d32 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d105      	bne.n	8002d32 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x1c>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e113      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x244>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b09      	cmp	r3, #9
 8002d82:	d925      	bls.n	8002dd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68d9      	ldr	r1, [r3, #12]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	3b1e      	subs	r3, #30
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43da      	mvns	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	400a      	ands	r2, r1
 8002da8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68d9      	ldr	r1, [r3, #12]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4403      	add	r3, r0
 8002dc2:	3b1e      	subs	r3, #30
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	e022      	b.n	8002e16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6919      	ldr	r1, [r3, #16]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	2207      	movs	r2, #7
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	400a      	ands	r2, r1
 8002df2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6919      	ldr	r1, [r3, #16]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4618      	mov	r0, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4403      	add	r3, r0
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d824      	bhi.n	8002e68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b05      	subs	r3, #5
 8002e30:	221f      	movs	r2, #31
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	3b05      	subs	r3, #5
 8002e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34
 8002e66:	e04c      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d824      	bhi.n	8002eba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b23      	subs	r3, #35	; 0x23
 8002e82:	221f      	movs	r2, #31
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	400a      	ands	r2, r1
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3b23      	subs	r3, #35	; 0x23
 8002eac:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb8:	e023      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b41      	subs	r3, #65	; 0x41
 8002ecc:	221f      	movs	r2, #31
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	400a      	ands	r2, r1
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b41      	subs	r3, #65	; 0x41
 8002ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f02:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_ADC_ConfigChannel+0x250>)
 8002f04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a28      	ldr	r2, [pc, #160]	; (8002fac <HAL_ADC_ConfigChannel+0x254>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d10f      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1d8>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b12      	cmp	r3, #18
 8002f16:	d10b      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_ADC_ConfigChannel+0x254>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d12b      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x23a>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <HAL_ADC_ConfigChannel+0x258>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <HAL_ADC_ConfigChannel+0x1f4>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b11      	cmp	r3, #17
 8002f4a:	d122      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_ADC_ConfigChannel+0x258>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d111      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_ADC_ConfigChannel+0x25c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <HAL_ADC_ConfigChannel+0x260>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	0c9a      	lsrs	r2, r3, #18
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f9      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012300 	.word	0x40012300
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	10000012 	.word	0x10000012
 8002fb4:	200186a4 	.word	0x200186a4
 8002fb8:	431bde83 	.word	0x431bde83

08002fbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc4:	4b79      	ldr	r3, [pc, #484]	; (80031ac <ADC_Init+0x1f0>)
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	021a      	lsls	r2, r3, #8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <ADC_Init+0x1f4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003062:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	e00f      	b.n	80030ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0202 	bic.w	r2, r2, #2
 80030c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6899      	ldr	r1, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7e1b      	ldrb	r3, [r3, #24]
 80030d4:	005a      	lsls	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003106:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	3b01      	subs	r3, #1
 8003114:	035a      	lsls	r2, r3, #13
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	e007      	b.n	8003130 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	3b01      	subs	r3, #1
 800314c:	051a      	lsls	r2, r3, #20
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003172:	025a      	lsls	r2, r3, #9
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	029a      	lsls	r2, r3, #10
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40012300 	.word	0x40012300
 80031b0:	0f000001 	.word	0x0f000001

080031b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4907      	ldr	r1, [pc, #28]	; (8003250 <__NVIC_EnableIRQ+0x38>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e100 	.word	0xe000e100

08003254 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db12      	blt.n	800328c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	490a      	ldr	r1, [pc, #40]	; (8003298 <__NVIC_DisableIRQ+0x44>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2001      	movs	r0, #1
 8003276:	fa00 f202 	lsl.w	r2, r0, r2
 800327a:	3320      	adds	r3, #32
 800327c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003280:	f3bf 8f4f 	dsb	sy
}
 8003284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003286:	f3bf 8f6f 	isb	sy
}
 800328a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100

0800329c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db0c      	blt.n	80032c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <__NVIC_ClearPendingIRQ+0x38>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	3360      	adds	r3, #96	; 0x60
 80032c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db0a      	blt.n	8003302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	490c      	ldr	r1, [pc, #48]	; (8003324 <__NVIC_SetPriority+0x4c>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	440b      	add	r3, r1
 80032fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003300:	e00a      	b.n	8003318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <__NVIC_SetPriority+0x50>)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3b04      	subs	r3, #4
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	440b      	add	r3, r1
 8003316:	761a      	strb	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	bf28      	it	cs
 800334a:	2304      	movcs	r3, #4
 800334c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3304      	adds	r3, #4
 8003352:	2b06      	cmp	r3, #6
 8003354:	d902      	bls.n	800335c <NVIC_EncodePriority+0x30>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b03      	subs	r3, #3
 800335a:	e000      	b.n	800335e <NVIC_EncodePriority+0x32>
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43d9      	mvns	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	4313      	orrs	r3, r2
         );
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	; 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a4:	d301      	bcc.n	80033aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00f      	b.n	80033ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <SysTick_Config+0x40>)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033b2:	210f      	movs	r1, #15
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033b8:	f7ff ff8e 	bl	80032d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <SysTick_Config+0x40>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <SysTick_Config+0x40>)
 80033c4:	2207      	movs	r2, #7
 80033c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	e000e010 	.word	0xe000e010

080033d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fee7 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003400:	f7ff fefc 	bl	80031fc <__NVIC_GetPriorityGrouping>
 8003404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	6978      	ldr	r0, [r7, #20]
 800340c:	f7ff ff8e 	bl	800332c <NVIC_EncodePriority>
 8003410:	4602      	mov	r2, r0
 8003412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff5d 	bl	80032d8 <__NVIC_SetPriority>
}
 800341e:	bf00      	nop
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	4603      	mov	r3, r0
 800342e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff feef 	bl	8003218 <__NVIC_EnableIRQ>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff feff 	bl	8003254 <__NVIC_DisableIRQ>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ff94 	bl	8003394 <SysTick_Config>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff09 	bl	800329c <__NVIC_ClearPendingIRQ>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e165      	b.n	800377c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034b0:	2201      	movs	r2, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	f040 8154 	bne.w	8003776 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d005      	beq.n	80034e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d130      	bne.n	8003548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800351c:	2201      	movs	r2, #1
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 0201 	and.w	r2, r3, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b03      	cmp	r3, #3
 8003552:	d017      	beq.n	8003584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d123      	bne.n	80035d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	220f      	movs	r2, #15
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	08da      	lsrs	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3208      	adds	r2, #8
 80035d2:	69b9      	ldr	r1, [r7, #24]
 80035d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0203 	and.w	r2, r3, #3
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80ae 	beq.w	8003776 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_GPIO_Init+0x300>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <HAL_GPIO_Init+0x300>)
 8003624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003628:	6453      	str	r3, [r2, #68]	; 0x44
 800362a:	4b5a      	ldr	r3, [pc, #360]	; (8003794 <HAL_GPIO_Init+0x300>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003636:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_GPIO_Init+0x304>)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3302      	adds	r3, #2
 800363e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	220f      	movs	r2, #15
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a4f      	ldr	r2, [pc, #316]	; (800379c <HAL_GPIO_Init+0x308>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d025      	beq.n	80036ae <HAL_GPIO_Init+0x21a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4e      	ldr	r2, [pc, #312]	; (80037a0 <HAL_GPIO_Init+0x30c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01f      	beq.n	80036aa <HAL_GPIO_Init+0x216>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_GPIO_Init+0x310>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d019      	beq.n	80036a6 <HAL_GPIO_Init+0x212>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4c      	ldr	r2, [pc, #304]	; (80037a8 <HAL_GPIO_Init+0x314>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_GPIO_Init+0x20e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4b      	ldr	r2, [pc, #300]	; (80037ac <HAL_GPIO_Init+0x318>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00d      	beq.n	800369e <HAL_GPIO_Init+0x20a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4a      	ldr	r2, [pc, #296]	; (80037b0 <HAL_GPIO_Init+0x31c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <HAL_GPIO_Init+0x206>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a49      	ldr	r2, [pc, #292]	; (80037b4 <HAL_GPIO_Init+0x320>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_GPIO_Init+0x202>
 8003692:	2306      	movs	r3, #6
 8003694:	e00c      	b.n	80036b0 <HAL_GPIO_Init+0x21c>
 8003696:	2307      	movs	r3, #7
 8003698:	e00a      	b.n	80036b0 <HAL_GPIO_Init+0x21c>
 800369a:	2305      	movs	r3, #5
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x21c>
 800369e:	2304      	movs	r3, #4
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x21c>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x21c>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x21c>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x21c>
 80036ae:	2300      	movs	r3, #0
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036c0:	4935      	ldr	r1, [pc, #212]	; (8003798 <HAL_GPIO_Init+0x304>)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ce:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <HAL_GPIO_Init+0x324>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036f2:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <HAL_GPIO_Init+0x324>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_GPIO_Init+0x324>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800371c:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <HAL_GPIO_Init+0x324>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <HAL_GPIO_Init+0x324>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_GPIO_Init+0x324>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_GPIO_Init+0x324>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <HAL_GPIO_Init+0x324>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	f67f ae96 	bls.w	80034b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	40013800 	.word	0x40013800
 800379c:	40020000 	.word	0x40020000
 80037a0:	40020400 	.word	0x40020400
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40020c00 	.word	0x40020c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40021400 	.word	0x40021400
 80037b4:	40021800 	.word	0x40021800
 80037b8:	40013c00 	.word	0x40013c00

080037bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e001      	b.n	80037de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
 80037f8:	4613      	mov	r3, r2
 80037fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037fc:	787b      	ldrb	r3, [r7, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003808:	e003      	b.n	8003812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	041a      	lsls	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	619a      	str	r2, [r3, #24]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d006      	beq.n	8003844 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f806 	bl	8003850 <HAL_GPIO_EXTI_Callback>
  }
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800388e:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <HAL_PWREx_EnableOverDrive+0x94>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003894:	f7ff f84e 	bl	8002934 <HAL_GetTick>
 8003898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800389a:	e009      	b.n	80038b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800389c:	f7ff f84a 	bl	8002934 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038aa:	d901      	bls.n	80038b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e01f      	b.n	80038f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d1ee      	bne.n	800389c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038c4:	f7ff f836 	bl	8002934 <HAL_GetTick>
 80038c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038ca:	e009      	b.n	80038e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038cc:	f7ff f832 	bl	8002934 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038da:	d901      	bls.n	80038e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e007      	b.n	80038f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_PWREx_EnableOverDrive+0x98>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ec:	d1ee      	bne.n	80038cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	420e0040 	.word	0x420e0040
 8003900:	40007000 	.word	0x40007000
 8003904:	420e0044 	.word	0x420e0044

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0cc      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d90c      	bls.n	8003944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0b8      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800395c:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a52      	ldr	r2, [pc, #328]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800397e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003980:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	494d      	ldr	r1, [pc, #308]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d044      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d119      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e06f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e067      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4934      	ldr	r1, [pc, #208]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f8:	f7fe ff9c 	bl	8002934 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fe ff98 	bl	8002934 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e04f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20c      	bcs.n	8003a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e032      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4916      	ldr	r1, [pc, #88]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a8e:	f000 f821 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a92:	4602      	mov	r2, r0
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	490a      	ldr	r1, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	5ccb      	ldrb	r3, [r1, r3]
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fefc 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023c00 	.word	0x40023c00
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	080058bc 	.word	0x080058bc
 8003acc:	200186a4 	.word	0x200186a4
 8003ad0:	200186a8 	.word	0x200186a8

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b0ae      	sub	sp, #184	; 0xb8
 8003ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003afa:	4bcb      	ldr	r3, [pc, #812]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	f200 8206 	bhi.w	8003f14 <HAL_RCC_GetSysClockFreq+0x440>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003f15 	.word	0x08003f15
 8003b18:	08003f15 	.word	0x08003f15
 8003b1c:	08003f15 	.word	0x08003f15
 8003b20:	08003b4d 	.word	0x08003b4d
 8003b24:	08003f15 	.word	0x08003f15
 8003b28:	08003f15 	.word	0x08003f15
 8003b2c:	08003f15 	.word	0x08003f15
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003f15 	.word	0x08003f15
 8003b38:	08003f15 	.word	0x08003f15
 8003b3c:	08003f15 	.word	0x08003f15
 8003b40:	08003d45 	.word	0x08003d45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4bb9      	ldr	r3, [pc, #740]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b4a:	e1e7      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b4c:	4bb8      	ldr	r3, [pc, #736]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b52:	e1e3      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b54:	4bb4      	ldr	r3, [pc, #720]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b60:	4bb1      	ldr	r3, [pc, #708]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d071      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6c:	4bae      	ldr	r3, [pc, #696]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b78:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b92:	4622      	mov	r2, r4
 8003b94:	462b      	mov	r3, r5
 8003b96:	f04f 0000 	mov.w	r0, #0
 8003b9a:	f04f 0100 	mov.w	r1, #0
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba4:	0150      	lsls	r0, r2, #5
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4621      	mov	r1, r4
 8003bac:	1a51      	subs	r1, r2, r1
 8003bae:	6439      	str	r1, [r7, #64]	; 0x40
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	018b      	lsls	r3, r1, #6
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bce:	4641      	mov	r1, r8
 8003bd0:	018a      	lsls	r2, r1, #6
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	1a51      	subs	r1, r2, r1
 8003bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bd8:	4649      	mov	r1, r9
 8003bda:	eb63 0301 	sbc.w	r3, r3, r1
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003bec:	4649      	mov	r1, r9
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4622      	mov	r2, r4
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30
 8003c06:	462b      	mov	r3, r5
 8003c08:	460a      	mov	r2, r1
 8003c0a:	eb42 0303 	adc.w	r3, r2, r3
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	024b      	lsls	r3, r1, #9
 8003c20:	4621      	mov	r1, r4
 8003c22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c26:	4621      	mov	r1, r4
 8003c28:	024a      	lsls	r2, r1, #9
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c40:	f7fc fb3e 	bl	80002c0 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c4e:	e067      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c50:	4b75      	ldr	r3, [pc, #468]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	0159      	lsls	r1, r3, #5
 8003c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c84:	0150      	lsls	r0, r2, #5
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	1a51      	subs	r1, r2, r1
 8003c8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c90:	4629      	mov	r1, r5
 8003c92:	eb63 0301 	sbc.w	r3, r3, r1
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	018b      	lsls	r3, r1, #6
 8003ca8:	4641      	mov	r1, r8
 8003caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cae:	4641      	mov	r1, r8
 8003cb0:	018a      	lsls	r2, r1, #6
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cb8:	4649      	mov	r1, r9
 8003cba:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd2:	4692      	mov	sl, r2
 8003cd4:	469b      	mov	fp, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	eb1a 0303 	adds.w	r3, sl, r3
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	462b      	mov	r3, r5
 8003ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	028b      	lsls	r3, r1, #10
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	028a      	lsls	r2, r1, #10
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d08:	2200      	movs	r2, #0
 8003d0a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d0c:	677a      	str	r2, [r7, #116]	; 0x74
 8003d0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d12:	f7fc fad5 	bl	80002c0 <__aeabi_uldivmod>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d20:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d42:	e0eb      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d44:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d06b      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	2200      	movs	r2, #0
 8003d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d70:	2300      	movs	r3, #0
 8003d72:	667b      	str	r3, [r7, #100]	; 0x64
 8003d74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d78:	4622      	mov	r2, r4
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	f04f 0000 	mov.w	r0, #0
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	0159      	lsls	r1, r3, #5
 8003d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8a:	0150      	lsls	r0, r2, #5
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4621      	mov	r1, r4
 8003d92:	1a51      	subs	r1, r2, r1
 8003d94:	61b9      	str	r1, [r7, #24]
 8003d96:	4629      	mov	r1, r5
 8003d98:	eb63 0301 	sbc.w	r3, r3, r1
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003daa:	4659      	mov	r1, fp
 8003dac:	018b      	lsls	r3, r1, #6
 8003dae:	4651      	mov	r1, sl
 8003db0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db4:	4651      	mov	r1, sl
 8003db6:	018a      	lsls	r2, r1, #6
 8003db8:	4651      	mov	r1, sl
 8003dba:	ebb2 0801 	subs.w	r8, r2, r1
 8003dbe:	4659      	mov	r1, fp
 8003dc0:	eb63 0901 	sbc.w	r9, r3, r1
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd8:	4690      	mov	r8, r2
 8003dda:	4699      	mov	r9, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	eb18 0303 	adds.w	r3, r8, r3
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	462b      	mov	r3, r5
 8003de6:	eb49 0303 	adc.w	r3, r9, r3
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003df8:	4629      	mov	r1, r5
 8003dfa:	024b      	lsls	r3, r1, #9
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e02:	4621      	mov	r1, r4
 8003e04:	024a      	lsls	r2, r1, #9
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e0e:	2200      	movs	r2, #0
 8003e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e18:	f7fc fa52 	bl	80002c0 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e26:	e065      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x420>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	00f42400 	.word	0x00f42400
 8003e30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e34:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	4611      	mov	r1, r2
 8003e40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
 8003e46:	2300      	movs	r3, #0
 8003e48:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e4e:	4642      	mov	r2, r8
 8003e50:	464b      	mov	r3, r9
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	0159      	lsls	r1, r3, #5
 8003e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e60:	0150      	lsls	r0, r2, #5
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4641      	mov	r1, r8
 8003e68:	1a51      	subs	r1, r2, r1
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e80:	4659      	mov	r1, fp
 8003e82:	018b      	lsls	r3, r1, #6
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	018a      	lsls	r2, r1, #6
 8003e8e:	4651      	mov	r1, sl
 8003e90:	1a54      	subs	r4, r2, r1
 8003e92:	4659      	mov	r1, fp
 8003e94:	eb63 0501 	sbc.w	r5, r3, r1
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	00eb      	lsls	r3, r5, #3
 8003ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	18e3      	adds	r3, r4, r3
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb45 0303 	adc.w	r3, r5, r3
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	028b      	lsls	r3, r1, #10
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	028a      	lsls	r2, r1, #10
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003edc:	2200      	movs	r2, #0
 8003ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ee2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ee6:	f7fc f9eb 	bl	80002c0 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4613      	mov	r3, r2
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0f1b      	lsrs	r3, r3, #28
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f12:	e003      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	37b8      	adds	r7, #184	; 0xb8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	00f42400 	.word	0x00f42400

08003f34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e28d      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8083 	beq.w	800405a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f54:	4b94      	ldr	r3, [pc, #592]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d019      	beq.n	8003f94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f60:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f6c:	4b8e      	ldr	r3, [pc, #568]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f92:	d10b      	bne.n	8003fac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05b      	beq.n	8004058 <HAL_RCC_OscConfig+0x124>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d157      	bne.n	8004058 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e25a      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x90>
 8003fb6:	4b7c      	ldr	r3, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7b      	ldr	r2, [pc, #492]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xcc>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xb4>
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a75      	ldr	r2, [pc, #468]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b73      	ldr	r3, [pc, #460]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a72      	ldr	r2, [pc, #456]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xcc>
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe fc94 	bl	8002934 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe fc90 	bl	8002934 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e21f      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xdc>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe fc80 	bl	8002934 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fc7c 	bl	8002934 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e20b      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x104>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d06f      	beq.n	8004146 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004066:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b00      	cmp	r3, #0
 8004070:	d017      	beq.n	80040a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004072:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800407a:	2b08      	cmp	r3, #8
 800407c:	d105      	bne.n	800408a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800407e:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d11c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x186>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e1d3      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4937      	ldr	r1, [pc, #220]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	e03a      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCC_OscConfig+0x278>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fe fc29 	bl	8002934 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e6:	f7fe fc25 	bl	8002934 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1b4      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4925      	ldr	r1, [pc, #148]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	e015      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x278>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe fc08 	bl	8002934 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004128:	f7fe fc04 	bl	8002934 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e193      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d036      	beq.n	80041c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <HAL_RCC_OscConfig+0x27c>)
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fe fbe8 	bl	8002934 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004168:	f7fe fbe4 	bl	8002934 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e173      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_OscConfig+0x274>)
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x234>
 8004186:	e01b      	b.n	80041c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_OscConfig+0x27c>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe fbd1 	bl	8002934 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	e00e      	b.n	80041b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe fbcd 	bl	8002934 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d907      	bls.n	80041b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e15c      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470000 	.word	0x42470000
 80041b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	4b8a      	ldr	r3, [pc, #552]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1ea      	bne.n	8004196 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8097 	beq.w	80042fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b83      	ldr	r3, [pc, #524]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	4b7f      	ldr	r3, [pc, #508]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a7e      	ldr	r2, [pc, #504]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b7c      	ldr	r3, [pc, #496]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	4b79      	ldr	r3, [pc, #484]	; (80043e4 <HAL_RCC_OscConfig+0x4b0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d118      	bne.n	800423c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420a:	4b76      	ldr	r3, [pc, #472]	; (80043e4 <HAL_RCC_OscConfig+0x4b0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a75      	ldr	r2, [pc, #468]	; (80043e4 <HAL_RCC_OscConfig+0x4b0>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7fe fb8d 	bl	8002934 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fe fb89 	bl	8002934 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e118      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <HAL_RCC_OscConfig+0x4b0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x31e>
 8004244:	4b66      	ldr	r3, [pc, #408]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a65      	ldr	r2, [pc, #404]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	e01c      	b.n	800428c <HAL_RCC_OscConfig+0x358>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b05      	cmp	r3, #5
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x340>
 800425a:	4b61      	ldr	r3, [pc, #388]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a60      	ldr	r2, [pc, #384]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004260:	f043 0304 	orr.w	r3, r3, #4
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	4b5e      	ldr	r3, [pc, #376]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a5d      	ldr	r2, [pc, #372]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0x358>
 8004274:	4b5a      	ldr	r3, [pc, #360]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a59      	ldr	r2, [pc, #356]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	4b57      	ldr	r3, [pc, #348]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a56      	ldr	r2, [pc, #344]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004286:	f023 0304 	bic.w	r3, r3, #4
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fe fb4e 	bl	8002934 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fe fb4a 	bl	8002934 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e0d7      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ee      	beq.n	800429c <HAL_RCC_OscConfig+0x368>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fe fb38 	bl	8002934 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fe fb34 	bl	8002934 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0c1      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1ee      	bne.n	80042c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4a3a      	ldr	r2, [pc, #232]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80ad 	beq.w	8004460 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004306:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b08      	cmp	r3, #8
 8004310:	d060      	beq.n	80043d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d145      	bne.n	80043a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <HAL_RCC_OscConfig+0x4b4>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fe fb08 	bl	8002934 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe fb04 	bl	8002934 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e093      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69da      	ldr	r2, [r3, #28]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	019b      	lsls	r3, r3, #6
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	085b      	lsrs	r3, r3, #1
 800435e:	3b01      	subs	r3, #1
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	071b      	lsls	r3, r3, #28
 8004372:	491b      	ldr	r1, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x4b4>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fe fad9 	bl	8002934 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004386:	f7fe fad5 	bl	8002934 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e064      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x452>
 80043a4:	e05c      	b.n	8004460 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCC_OscConfig+0x4b4>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe fac2 	bl	8002934 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe fabe 	bl	8002934 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e04d      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x480>
 80043d2:	e045      	b.n	8004460 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e040      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40007000 	.word	0x40007000
 80043e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_RCC_OscConfig+0x538>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d030      	beq.n	800445c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d129      	bne.n	800445c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d122      	bne.n	800445c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004424:	4293      	cmp	r3, r2
 8004426:	d119      	bne.n	800445c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	3b01      	subs	r3, #1
 8004436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d10f      	bne.n	800445c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800

08004470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e07b      	b.n	800457a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004492:	d009      	beq.n	80044a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	61da      	str	r2, [r3, #28]
 800449a:	e005      	b.n	80044a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fe f8b6 	bl	8002634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	ea42 0103 	orr.w	r1, r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0104 	and.w	r1, r3, #4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0210 	and.w	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004568:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b088      	sub	sp, #32
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_SPI_Transmit+0x22>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e126      	b.n	80047f2 <HAL_SPI_Transmit+0x270>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ac:	f7fe f9c2 	bl	8002934 <HAL_GetTick>
 80045b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045c6:	e10b      	b.n	80047e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_SPI_Transmit+0x52>
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045d8:	e102      	b.n	80047e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2203      	movs	r2, #3
 80045de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004620:	d10f      	bne.n	8004642 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d007      	beq.n	8004660 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004668:	d14b      	bne.n	8004702 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Transmit+0xf6>
 8004672:	8afb      	ldrh	r3, [r7, #22]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d13e      	bne.n	80046f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	881a      	ldrh	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800469c:	e02b      	b.n	80046f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d112      	bne.n	80046d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	881a      	ldrh	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	1c9a      	adds	r2, r3, #2
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80046d0:	e011      	b.n	80046f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d2:	f7fe f92f 	bl	8002934 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d803      	bhi.n	80046ea <HAL_SPI_Transmit+0x168>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e8:	d102      	bne.n	80046f0 <HAL_SPI_Transmit+0x16e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046f4:	e074      	b.n	80047e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ce      	bne.n	800469e <HAL_SPI_Transmit+0x11c>
 8004700:	e04c      	b.n	800479c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_SPI_Transmit+0x18e>
 800470a:	8afb      	ldrh	r3, [r7, #22]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d140      	bne.n	8004792 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	7812      	ldrb	r2, [r2, #0]
 800471c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004736:	e02c      	b.n	8004792 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d113      	bne.n	800476e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	86da      	strh	r2, [r3, #54]	; 0x36
 800476c:	e011      	b.n	8004792 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800476e:	f7fe f8e1 	bl	8002934 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d803      	bhi.n	8004786 <HAL_SPI_Transmit+0x204>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004784:	d102      	bne.n	800478c <HAL_SPI_Transmit+0x20a>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004790:	e026      	b.n	80047e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1cd      	bne.n	8004738 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f8b3 	bl	800490c <SPI_EndRxTxTransaction>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e000      	b.n	80047e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800480c:	f7fe f892 	bl	8002934 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4413      	add	r3, r2
 800481a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800481c:	f7fe f88a 	bl	8002934 <HAL_GetTick>
 8004820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004822:	4b39      	ldr	r3, [pc, #228]	; (8004908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	015b      	lsls	r3, r3, #5
 8004828:	0d1b      	lsrs	r3, r3, #20
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004832:	e054      	b.n	80048de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483a:	d050      	beq.n	80048de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800483c:	f7fe f87a 	bl	8002934 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	429a      	cmp	r2, r3
 800484a:	d902      	bls.n	8004852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d13d      	bne.n	80048ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486a:	d111      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	d004      	beq.n	8004880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d107      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004898:	d10f      	bne.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e017      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3b01      	subs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d19b      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200186a4 	.word	0x200186a4

0800490c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <SPI_EndRxTxTransaction+0x7c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1b      	ldr	r2, [pc, #108]	; (800498c <SPI_EndRxTxTransaction+0x80>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0d5b      	lsrs	r3, r3, #21
 8004924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004936:	d112      	bne.n	800495e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2200      	movs	r2, #0
 8004940:	2180      	movs	r1, #128	; 0x80
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff ff5a 	bl	80047fc <SPI_WaitFlagStateUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	f043 0220 	orr.w	r2, r3, #32
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e00f      	b.n	800497e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3b01      	subs	r3, #1
 8004968:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d0f2      	beq.n	800495e <SPI_EndRxTxTransaction+0x52>
 8004978:	e000      	b.n	800497c <SPI_EndRxTxTransaction+0x70>
        break;
 800497a:	bf00      	nop
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200186a4 	.word	0x200186a4
 800498c:	165e9f81 	.word	0x165e9f81

08004990 <__errno>:
 8004990:	4b01      	ldr	r3, [pc, #4]	; (8004998 <__errno+0x8>)
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	200186b0 	.word	0x200186b0

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4d0d      	ldr	r5, [pc, #52]	; (80049d4 <__libc_init_array+0x38>)
 80049a0:	4c0d      	ldr	r4, [pc, #52]	; (80049d8 <__libc_init_array+0x3c>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	2600      	movs	r6, #0
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	4d0b      	ldr	r5, [pc, #44]	; (80049dc <__libc_init_array+0x40>)
 80049ae:	4c0c      	ldr	r4, [pc, #48]	; (80049e0 <__libc_init_array+0x44>)
 80049b0:	f000 fca0 	bl	80052f4 <_init>
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	2600      	movs	r6, #0
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	08005908 	.word	0x08005908
 80049d8:	08005908 	.word	0x08005908
 80049dc:	08005908 	.word	0x08005908
 80049e0:	0800590c 	.word	0x0800590c

080049e4 <memcpy>:
 80049e4:	440a      	add	r2, r1
 80049e6:	4291      	cmp	r1, r2
 80049e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049ec:	d100      	bne.n	80049f0 <memcpy+0xc>
 80049ee:	4770      	bx	lr
 80049f0:	b510      	push	{r4, lr}
 80049f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fa:	4291      	cmp	r1, r2
 80049fc:	d1f9      	bne.n	80049f2 <memcpy+0xe>
 80049fe:	bd10      	pop	{r4, pc}

08004a00 <memset>:
 8004a00:	4402      	add	r2, r0
 8004a02:	4603      	mov	r3, r0
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d100      	bne.n	8004a0a <memset+0xa>
 8004a08:	4770      	bx	lr
 8004a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0e:	e7f9      	b.n	8004a04 <memset+0x4>

08004a10 <siprintf>:
 8004a10:	b40e      	push	{r1, r2, r3}
 8004a12:	b500      	push	{lr}
 8004a14:	b09c      	sub	sp, #112	; 0x70
 8004a16:	ab1d      	add	r3, sp, #116	; 0x74
 8004a18:	9002      	str	r0, [sp, #8]
 8004a1a:	9006      	str	r0, [sp, #24]
 8004a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a20:	4809      	ldr	r0, [pc, #36]	; (8004a48 <siprintf+0x38>)
 8004a22:	9107      	str	r1, [sp, #28]
 8004a24:	9104      	str	r1, [sp, #16]
 8004a26:	4909      	ldr	r1, [pc, #36]	; (8004a4c <siprintf+0x3c>)
 8004a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a2c:	9105      	str	r1, [sp, #20]
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	a902      	add	r1, sp, #8
 8004a34:	f000 f87a 	bl	8004b2c <_svfiprintf_r>
 8004a38:	9b02      	ldr	r3, [sp, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	b01c      	add	sp, #112	; 0x70
 8004a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a44:	b003      	add	sp, #12
 8004a46:	4770      	bx	lr
 8004a48:	200186b0 	.word	0x200186b0
 8004a4c:	ffff0208 	.word	0xffff0208

08004a50 <strncat>:
 8004a50:	b530      	push	{r4, r5, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	7825      	ldrb	r5, [r4, #0]
 8004a56:	4623      	mov	r3, r4
 8004a58:	3401      	adds	r4, #1
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	d1fa      	bne.n	8004a54 <strncat+0x4>
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	d304      	bcc.n	8004a6c <strncat+0x1c>
 8004a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a66:	f803 4b01 	strb.w	r4, [r3], #1
 8004a6a:	b904      	cbnz	r4, 8004a6e <strncat+0x1e>
 8004a6c:	bd30      	pop	{r4, r5, pc}
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	d1f5      	bne.n	8004a5e <strncat+0xe>
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e7f3      	b.n	8004a5e <strncat+0xe>

08004a76 <__ssputs_r>:
 8004a76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7a:	688e      	ldr	r6, [r1, #8]
 8004a7c:	429e      	cmp	r6, r3
 8004a7e:	4682      	mov	sl, r0
 8004a80:	460c      	mov	r4, r1
 8004a82:	4690      	mov	r8, r2
 8004a84:	461f      	mov	r7, r3
 8004a86:	d838      	bhi.n	8004afa <__ssputs_r+0x84>
 8004a88:	898a      	ldrh	r2, [r1, #12]
 8004a8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a8e:	d032      	beq.n	8004af6 <__ssputs_r+0x80>
 8004a90:	6825      	ldr	r5, [r4, #0]
 8004a92:	6909      	ldr	r1, [r1, #16]
 8004a94:	eba5 0901 	sub.w	r9, r5, r1
 8004a98:	6965      	ldr	r5, [r4, #20]
 8004a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	444b      	add	r3, r9
 8004aa6:	106d      	asrs	r5, r5, #1
 8004aa8:	429d      	cmp	r5, r3
 8004aaa:	bf38      	it	cc
 8004aac:	461d      	movcc	r5, r3
 8004aae:	0553      	lsls	r3, r2, #21
 8004ab0:	d531      	bpl.n	8004b16 <__ssputs_r+0xa0>
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f000 fb54 	bl	8005160 <_malloc_r>
 8004ab8:	4606      	mov	r6, r0
 8004aba:	b950      	cbnz	r0, 8004ad2 <__ssputs_r+0x5c>
 8004abc:	230c      	movs	r3, #12
 8004abe:	f8ca 3000 	str.w	r3, [sl]
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac8:	81a3      	strh	r3, [r4, #12]
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad2:	6921      	ldr	r1, [r4, #16]
 8004ad4:	464a      	mov	r2, r9
 8004ad6:	f7ff ff85 	bl	80049e4 <memcpy>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	6126      	str	r6, [r4, #16]
 8004ae8:	6165      	str	r5, [r4, #20]
 8004aea:	444e      	add	r6, r9
 8004aec:	eba5 0509 	sub.w	r5, r5, r9
 8004af0:	6026      	str	r6, [r4, #0]
 8004af2:	60a5      	str	r5, [r4, #8]
 8004af4:	463e      	mov	r6, r7
 8004af6:	42be      	cmp	r6, r7
 8004af8:	d900      	bls.n	8004afc <__ssputs_r+0x86>
 8004afa:	463e      	mov	r6, r7
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	4632      	mov	r2, r6
 8004b00:	4641      	mov	r1, r8
 8004b02:	f000 faa7 	bl	8005054 <memmove>
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	1b9b      	subs	r3, r3, r6
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	4433      	add	r3, r6
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	2000      	movs	r0, #0
 8004b14:	e7db      	b.n	8004ace <__ssputs_r+0x58>
 8004b16:	462a      	mov	r2, r5
 8004b18:	f000 fb96 	bl	8005248 <_realloc_r>
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d1e1      	bne.n	8004ae6 <__ssputs_r+0x70>
 8004b22:	6921      	ldr	r1, [r4, #16]
 8004b24:	4650      	mov	r0, sl
 8004b26:	f000 faaf 	bl	8005088 <_free_r>
 8004b2a:	e7c7      	b.n	8004abc <__ssputs_r+0x46>

08004b2c <_svfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	4698      	mov	r8, r3
 8004b32:	898b      	ldrh	r3, [r1, #12]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	b09d      	sub	sp, #116	; 0x74
 8004b38:	4607      	mov	r7, r0
 8004b3a:	460d      	mov	r5, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	d50e      	bpl.n	8004b5e <_svfiprintf_r+0x32>
 8004b40:	690b      	ldr	r3, [r1, #16]
 8004b42:	b963      	cbnz	r3, 8004b5e <_svfiprintf_r+0x32>
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	f000 fb0b 	bl	8005160 <_malloc_r>
 8004b4a:	6028      	str	r0, [r5, #0]
 8004b4c:	6128      	str	r0, [r5, #16]
 8004b4e:	b920      	cbnz	r0, 8004b5a <_svfiprintf_r+0x2e>
 8004b50:	230c      	movs	r3, #12
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b58:	e0d1      	b.n	8004cfe <_svfiprintf_r+0x1d2>
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	616b      	str	r3, [r5, #20]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9309      	str	r3, [sp, #36]	; 0x24
 8004b62:	2320      	movs	r3, #32
 8004b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b6c:	2330      	movs	r3, #48	; 0x30
 8004b6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d18 <_svfiprintf_r+0x1ec>
 8004b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b76:	f04f 0901 	mov.w	r9, #1
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b82:	b10a      	cbz	r2, 8004b88 <_svfiprintf_r+0x5c>
 8004b84:	2a25      	cmp	r2, #37	; 0x25
 8004b86:	d1f9      	bne.n	8004b7c <_svfiprintf_r+0x50>
 8004b88:	ebba 0b04 	subs.w	fp, sl, r4
 8004b8c:	d00b      	beq.n	8004ba6 <_svfiprintf_r+0x7a>
 8004b8e:	465b      	mov	r3, fp
 8004b90:	4622      	mov	r2, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff ff6e 	bl	8004a76 <__ssputs_r>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f000 80aa 	beq.w	8004cf4 <_svfiprintf_r+0x1c8>
 8004ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba2:	445a      	add	r2, fp
 8004ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80a2 	beq.w	8004cf4 <_svfiprintf_r+0x1c8>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bba:	f10a 0a01 	add.w	sl, sl, #1
 8004bbe:	9304      	str	r3, [sp, #16]
 8004bc0:	9307      	str	r3, [sp, #28]
 8004bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc8:	4654      	mov	r4, sl
 8004bca:	2205      	movs	r2, #5
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	4851      	ldr	r0, [pc, #324]	; (8004d18 <_svfiprintf_r+0x1ec>)
 8004bd2:	f7fb fb25 	bl	8000220 <memchr>
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	b9d8      	cbnz	r0, 8004c12 <_svfiprintf_r+0xe6>
 8004bda:	06d0      	lsls	r0, r2, #27
 8004bdc:	bf44      	itt	mi
 8004bde:	2320      	movmi	r3, #32
 8004be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be4:	0711      	lsls	r1, r2, #28
 8004be6:	bf44      	itt	mi
 8004be8:	232b      	movmi	r3, #43	; 0x2b
 8004bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf4:	d015      	beq.n	8004c22 <_svfiprintf_r+0xf6>
 8004bf6:	9a07      	ldr	r2, [sp, #28]
 8004bf8:	4654      	mov	r4, sl
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f04f 0c0a 	mov.w	ip, #10
 8004c00:	4621      	mov	r1, r4
 8004c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c06:	3b30      	subs	r3, #48	; 0x30
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	d94e      	bls.n	8004caa <_svfiprintf_r+0x17e>
 8004c0c:	b1b0      	cbz	r0, 8004c3c <_svfiprintf_r+0x110>
 8004c0e:	9207      	str	r2, [sp, #28]
 8004c10:	e014      	b.n	8004c3c <_svfiprintf_r+0x110>
 8004c12:	eba0 0308 	sub.w	r3, r0, r8
 8004c16:	fa09 f303 	lsl.w	r3, r9, r3
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	9304      	str	r3, [sp, #16]
 8004c1e:	46a2      	mov	sl, r4
 8004c20:	e7d2      	b.n	8004bc8 <_svfiprintf_r+0x9c>
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	1d19      	adds	r1, r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	9103      	str	r1, [sp, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bfbb      	ittet	lt
 8004c2e:	425b      	neglt	r3, r3
 8004c30:	f042 0202 	orrlt.w	r2, r2, #2
 8004c34:	9307      	strge	r3, [sp, #28]
 8004c36:	9307      	strlt	r3, [sp, #28]
 8004c38:	bfb8      	it	lt
 8004c3a:	9204      	strlt	r2, [sp, #16]
 8004c3c:	7823      	ldrb	r3, [r4, #0]
 8004c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c40:	d10c      	bne.n	8004c5c <_svfiprintf_r+0x130>
 8004c42:	7863      	ldrb	r3, [r4, #1]
 8004c44:	2b2a      	cmp	r3, #42	; 0x2a
 8004c46:	d135      	bne.n	8004cb4 <_svfiprintf_r+0x188>
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9203      	str	r2, [sp, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bfb8      	it	lt
 8004c54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c58:	3402      	adds	r4, #2
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d28 <_svfiprintf_r+0x1fc>
 8004c60:	7821      	ldrb	r1, [r4, #0]
 8004c62:	2203      	movs	r2, #3
 8004c64:	4650      	mov	r0, sl
 8004c66:	f7fb fadb 	bl	8000220 <memchr>
 8004c6a:	b140      	cbz	r0, 8004c7e <_svfiprintf_r+0x152>
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	eba0 000a 	sub.w	r0, r0, sl
 8004c72:	fa03 f000 	lsl.w	r0, r3, r0
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	4303      	orrs	r3, r0
 8004c7a:	3401      	adds	r4, #1
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c82:	4826      	ldr	r0, [pc, #152]	; (8004d1c <_svfiprintf_r+0x1f0>)
 8004c84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c88:	2206      	movs	r2, #6
 8004c8a:	f7fb fac9 	bl	8000220 <memchr>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d038      	beq.n	8004d04 <_svfiprintf_r+0x1d8>
 8004c92:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <_svfiprintf_r+0x1f4>)
 8004c94:	bb1b      	cbnz	r3, 8004cde <_svfiprintf_r+0x1b2>
 8004c96:	9b03      	ldr	r3, [sp, #12]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	9303      	str	r3, [sp, #12]
 8004ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca4:	4433      	add	r3, r6
 8004ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca8:	e767      	b.n	8004b7a <_svfiprintf_r+0x4e>
 8004caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cae:	460c      	mov	r4, r1
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	e7a5      	b.n	8004c00 <_svfiprintf_r+0xd4>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	3401      	adds	r4, #1
 8004cb8:	9305      	str	r3, [sp, #20]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	f04f 0c0a 	mov.w	ip, #10
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc6:	3a30      	subs	r2, #48	; 0x30
 8004cc8:	2a09      	cmp	r2, #9
 8004cca:	d903      	bls.n	8004cd4 <_svfiprintf_r+0x1a8>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0c5      	beq.n	8004c5c <_svfiprintf_r+0x130>
 8004cd0:	9105      	str	r1, [sp, #20]
 8004cd2:	e7c3      	b.n	8004c5c <_svfiprintf_r+0x130>
 8004cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd8:	4604      	mov	r4, r0
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e7f0      	b.n	8004cc0 <_svfiprintf_r+0x194>
 8004cde:	ab03      	add	r3, sp, #12
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <_svfiprintf_r+0x1f8>)
 8004ce6:	a904      	add	r1, sp, #16
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f3af 8000 	nop.w
 8004cee:	1c42      	adds	r2, r0, #1
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	d1d6      	bne.n	8004ca2 <_svfiprintf_r+0x176>
 8004cf4:	89ab      	ldrh	r3, [r5, #12]
 8004cf6:	065b      	lsls	r3, r3, #25
 8004cf8:	f53f af2c 	bmi.w	8004b54 <_svfiprintf_r+0x28>
 8004cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfe:	b01d      	add	sp, #116	; 0x74
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <_svfiprintf_r+0x1f8>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f000 f87a 	bl	8004e08 <_printf_i>
 8004d14:	e7eb      	b.n	8004cee <_svfiprintf_r+0x1c2>
 8004d16:	bf00      	nop
 8004d18:	080058cc 	.word	0x080058cc
 8004d1c:	080058d6 	.word	0x080058d6
 8004d20:	00000000 	.word	0x00000000
 8004d24:	08004a77 	.word	0x08004a77
 8004d28:	080058d2 	.word	0x080058d2

08004d2c <_printf_common>:
 8004d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	4616      	mov	r6, r2
 8004d32:	4699      	mov	r9, r3
 8004d34:	688a      	ldr	r2, [r1, #8]
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	bfb8      	it	lt
 8004d40:	4613      	movlt	r3, r2
 8004d42:	6033      	str	r3, [r6, #0]
 8004d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d48:	4607      	mov	r7, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	b10a      	cbz	r2, 8004d52 <_printf_common+0x26>
 8004d4e:	3301      	adds	r3, #1
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	0699      	lsls	r1, r3, #26
 8004d56:	bf42      	ittt	mi
 8004d58:	6833      	ldrmi	r3, [r6, #0]
 8004d5a:	3302      	addmi	r3, #2
 8004d5c:	6033      	strmi	r3, [r6, #0]
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	f015 0506 	ands.w	r5, r5, #6
 8004d64:	d106      	bne.n	8004d74 <_printf_common+0x48>
 8004d66:	f104 0a19 	add.w	sl, r4, #25
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	6832      	ldr	r2, [r6, #0]
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dc26      	bgt.n	8004dc2 <_printf_common+0x96>
 8004d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d78:	1e13      	subs	r3, r2, #0
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	bf18      	it	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	0692      	lsls	r2, r2, #26
 8004d82:	d42b      	bmi.n	8004ddc <_printf_common+0xb0>
 8004d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d88:	4649      	mov	r1, r9
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d01e      	beq.n	8004dd0 <_printf_common+0xa4>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	68e5      	ldr	r5, [r4, #12]
 8004d96:	6832      	ldr	r2, [r6, #0]
 8004d98:	f003 0306 	and.w	r3, r3, #6
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	bf08      	it	eq
 8004da0:	1aad      	subeq	r5, r5, r2
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	bf0c      	ite	eq
 8004da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dac:	2500      	movne	r5, #0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bfc4      	itt	gt
 8004db2:	1a9b      	subgt	r3, r3, r2
 8004db4:	18ed      	addgt	r5, r5, r3
 8004db6:	2600      	movs	r6, #0
 8004db8:	341a      	adds	r4, #26
 8004dba:	42b5      	cmp	r5, r6
 8004dbc:	d11a      	bne.n	8004df4 <_printf_common+0xc8>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e008      	b.n	8004dd4 <_printf_common+0xa8>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	4638      	mov	r0, r7
 8004dca:	47c0      	blx	r8
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d103      	bne.n	8004dd8 <_printf_common+0xac>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7c6      	b.n	8004d6a <_printf_common+0x3e>
 8004ddc:	18e1      	adds	r1, r4, r3
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	2030      	movs	r0, #48	; 0x30
 8004de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de6:	4422      	add	r2, r4
 8004de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df0:	3302      	adds	r3, #2
 8004df2:	e7c7      	b.n	8004d84 <_printf_common+0x58>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4622      	mov	r2, r4
 8004df8:	4649      	mov	r1, r9
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	47c0      	blx	r8
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d0e6      	beq.n	8004dd0 <_printf_common+0xa4>
 8004e02:	3601      	adds	r6, #1
 8004e04:	e7d9      	b.n	8004dba <_printf_common+0x8e>
	...

08004e08 <_printf_i>:
 8004e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	7e0f      	ldrb	r7, [r1, #24]
 8004e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e10:	2f78      	cmp	r7, #120	; 0x78
 8004e12:	4691      	mov	r9, r2
 8004e14:	4680      	mov	r8, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	469a      	mov	sl, r3
 8004e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e1e:	d807      	bhi.n	8004e30 <_printf_i+0x28>
 8004e20:	2f62      	cmp	r7, #98	; 0x62
 8004e22:	d80a      	bhi.n	8004e3a <_printf_i+0x32>
 8004e24:	2f00      	cmp	r7, #0
 8004e26:	f000 80d8 	beq.w	8004fda <_printf_i+0x1d2>
 8004e2a:	2f58      	cmp	r7, #88	; 0x58
 8004e2c:	f000 80a3 	beq.w	8004f76 <_printf_i+0x16e>
 8004e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e38:	e03a      	b.n	8004eb0 <_printf_i+0xa8>
 8004e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e3e:	2b15      	cmp	r3, #21
 8004e40:	d8f6      	bhi.n	8004e30 <_printf_i+0x28>
 8004e42:	a101      	add	r1, pc, #4	; (adr r1, 8004e48 <_printf_i+0x40>)
 8004e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e48:	08004ea1 	.word	0x08004ea1
 8004e4c:	08004eb5 	.word	0x08004eb5
 8004e50:	08004e31 	.word	0x08004e31
 8004e54:	08004e31 	.word	0x08004e31
 8004e58:	08004e31 	.word	0x08004e31
 8004e5c:	08004e31 	.word	0x08004e31
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004e31 	.word	0x08004e31
 8004e68:	08004e31 	.word	0x08004e31
 8004e6c:	08004e31 	.word	0x08004e31
 8004e70:	08004e31 	.word	0x08004e31
 8004e74:	08004fc1 	.word	0x08004fc1
 8004e78:	08004ee5 	.word	0x08004ee5
 8004e7c:	08004fa3 	.word	0x08004fa3
 8004e80:	08004e31 	.word	0x08004e31
 8004e84:	08004e31 	.word	0x08004e31
 8004e88:	08004fe3 	.word	0x08004fe3
 8004e8c:	08004e31 	.word	0x08004e31
 8004e90:	08004ee5 	.word	0x08004ee5
 8004e94:	08004e31 	.word	0x08004e31
 8004e98:	08004e31 	.word	0x08004e31
 8004e9c:	08004fab 	.word	0x08004fab
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	1d1a      	adds	r2, r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	602a      	str	r2, [r5, #0]
 8004ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0a3      	b.n	8004ffc <_printf_i+0x1f4>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	6829      	ldr	r1, [r5, #0]
 8004eb8:	0606      	lsls	r6, r0, #24
 8004eba:	f101 0304 	add.w	r3, r1, #4
 8004ebe:	d50a      	bpl.n	8004ed6 <_printf_i+0xce>
 8004ec0:	680e      	ldr	r6, [r1, #0]
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	da03      	bge.n	8004ed0 <_printf_i+0xc8>
 8004ec8:	232d      	movs	r3, #45	; 0x2d
 8004eca:	4276      	negs	r6, r6
 8004ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed0:	485e      	ldr	r0, [pc, #376]	; (800504c <_printf_i+0x244>)
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	e019      	b.n	8004f0a <_printf_i+0x102>
 8004ed6:	680e      	ldr	r6, [r1, #0]
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ede:	bf18      	it	ne
 8004ee0:	b236      	sxthne	r6, r6
 8004ee2:	e7ef      	b.n	8004ec4 <_printf_i+0xbc>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	1d19      	adds	r1, r3, #4
 8004eea:	6029      	str	r1, [r5, #0]
 8004eec:	0601      	lsls	r1, r0, #24
 8004eee:	d501      	bpl.n	8004ef4 <_printf_i+0xec>
 8004ef0:	681e      	ldr	r6, [r3, #0]
 8004ef2:	e002      	b.n	8004efa <_printf_i+0xf2>
 8004ef4:	0646      	lsls	r6, r0, #25
 8004ef6:	d5fb      	bpl.n	8004ef0 <_printf_i+0xe8>
 8004ef8:	881e      	ldrh	r6, [r3, #0]
 8004efa:	4854      	ldr	r0, [pc, #336]	; (800504c <_printf_i+0x244>)
 8004efc:	2f6f      	cmp	r7, #111	; 0x6f
 8004efe:	bf0c      	ite	eq
 8004f00:	2308      	moveq	r3, #8
 8004f02:	230a      	movne	r3, #10
 8004f04:	2100      	movs	r1, #0
 8004f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f0a:	6865      	ldr	r5, [r4, #4]
 8004f0c:	60a5      	str	r5, [r4, #8]
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	bfa2      	ittt	ge
 8004f12:	6821      	ldrge	r1, [r4, #0]
 8004f14:	f021 0104 	bicge.w	r1, r1, #4
 8004f18:	6021      	strge	r1, [r4, #0]
 8004f1a:	b90e      	cbnz	r6, 8004f20 <_printf_i+0x118>
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	d04d      	beq.n	8004fbc <_printf_i+0x1b4>
 8004f20:	4615      	mov	r5, r2
 8004f22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f26:	fb03 6711 	mls	r7, r3, r1, r6
 8004f2a:	5dc7      	ldrb	r7, [r0, r7]
 8004f2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f30:	4637      	mov	r7, r6
 8004f32:	42bb      	cmp	r3, r7
 8004f34:	460e      	mov	r6, r1
 8004f36:	d9f4      	bls.n	8004f22 <_printf_i+0x11a>
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d10b      	bne.n	8004f54 <_printf_i+0x14c>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	07de      	lsls	r6, r3, #31
 8004f40:	d508      	bpl.n	8004f54 <_printf_i+0x14c>
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	4299      	cmp	r1, r3
 8004f48:	bfde      	ittt	le
 8004f4a:	2330      	movle	r3, #48	; 0x30
 8004f4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f54:	1b52      	subs	r2, r2, r5
 8004f56:	6122      	str	r2, [r4, #16]
 8004f58:	f8cd a000 	str.w	sl, [sp]
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	aa03      	add	r2, sp, #12
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fee2 	bl	8004d2c <_printf_common>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d14c      	bne.n	8005006 <_printf_i+0x1fe>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f70:	b004      	add	sp, #16
 8004f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f76:	4835      	ldr	r0, [pc, #212]	; (800504c <_printf_i+0x244>)
 8004f78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f7c:	6829      	ldr	r1, [r5, #0]
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f84:	6029      	str	r1, [r5, #0]
 8004f86:	061d      	lsls	r5, r3, #24
 8004f88:	d514      	bpl.n	8004fb4 <_printf_i+0x1ac>
 8004f8a:	07df      	lsls	r7, r3, #31
 8004f8c:	bf44      	itt	mi
 8004f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f92:	6023      	strmi	r3, [r4, #0]
 8004f94:	b91e      	cbnz	r6, 8004f9e <_printf_i+0x196>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f023 0320 	bic.w	r3, r3, #32
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	e7b0      	b.n	8004f04 <_printf_i+0xfc>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	f043 0320 	orr.w	r3, r3, #32
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	2378      	movs	r3, #120	; 0x78
 8004fac:	4828      	ldr	r0, [pc, #160]	; (8005050 <_printf_i+0x248>)
 8004fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fb2:	e7e3      	b.n	8004f7c <_printf_i+0x174>
 8004fb4:	0659      	lsls	r1, r3, #25
 8004fb6:	bf48      	it	mi
 8004fb8:	b2b6      	uxthmi	r6, r6
 8004fba:	e7e6      	b.n	8004f8a <_printf_i+0x182>
 8004fbc:	4615      	mov	r5, r2
 8004fbe:	e7bb      	b.n	8004f38 <_printf_i+0x130>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	6826      	ldr	r6, [r4, #0]
 8004fc4:	6961      	ldr	r1, [r4, #20]
 8004fc6:	1d18      	adds	r0, r3, #4
 8004fc8:	6028      	str	r0, [r5, #0]
 8004fca:	0635      	lsls	r5, r6, #24
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	d501      	bpl.n	8004fd4 <_printf_i+0x1cc>
 8004fd0:	6019      	str	r1, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <_printf_i+0x1d2>
 8004fd4:	0670      	lsls	r0, r6, #25
 8004fd6:	d5fb      	bpl.n	8004fd0 <_printf_i+0x1c8>
 8004fd8:	8019      	strh	r1, [r3, #0]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	4615      	mov	r5, r2
 8004fe0:	e7ba      	b.n	8004f58 <_printf_i+0x150>
 8004fe2:	682b      	ldr	r3, [r5, #0]
 8004fe4:	1d1a      	adds	r2, r3, #4
 8004fe6:	602a      	str	r2, [r5, #0]
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	2100      	movs	r1, #0
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f7fb f916 	bl	8000220 <memchr>
 8004ff4:	b108      	cbz	r0, 8004ffa <_printf_i+0x1f2>
 8004ff6:	1b40      	subs	r0, r0, r5
 8004ff8:	6060      	str	r0, [r4, #4]
 8004ffa:	6863      	ldr	r3, [r4, #4]
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	2300      	movs	r3, #0
 8005000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005004:	e7a8      	b.n	8004f58 <_printf_i+0x150>
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	462a      	mov	r2, r5
 800500a:	4649      	mov	r1, r9
 800500c:	4640      	mov	r0, r8
 800500e:	47d0      	blx	sl
 8005010:	3001      	adds	r0, #1
 8005012:	d0ab      	beq.n	8004f6c <_printf_i+0x164>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	079b      	lsls	r3, r3, #30
 8005018:	d413      	bmi.n	8005042 <_printf_i+0x23a>
 800501a:	68e0      	ldr	r0, [r4, #12]
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	4298      	cmp	r0, r3
 8005020:	bfb8      	it	lt
 8005022:	4618      	movlt	r0, r3
 8005024:	e7a4      	b.n	8004f70 <_printf_i+0x168>
 8005026:	2301      	movs	r3, #1
 8005028:	4632      	mov	r2, r6
 800502a:	4649      	mov	r1, r9
 800502c:	4640      	mov	r0, r8
 800502e:	47d0      	blx	sl
 8005030:	3001      	adds	r0, #1
 8005032:	d09b      	beq.n	8004f6c <_printf_i+0x164>
 8005034:	3501      	adds	r5, #1
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	9903      	ldr	r1, [sp, #12]
 800503a:	1a5b      	subs	r3, r3, r1
 800503c:	42ab      	cmp	r3, r5
 800503e:	dcf2      	bgt.n	8005026 <_printf_i+0x21e>
 8005040:	e7eb      	b.n	800501a <_printf_i+0x212>
 8005042:	2500      	movs	r5, #0
 8005044:	f104 0619 	add.w	r6, r4, #25
 8005048:	e7f5      	b.n	8005036 <_printf_i+0x22e>
 800504a:	bf00      	nop
 800504c:	080058dd 	.word	0x080058dd
 8005050:	080058ee 	.word	0x080058ee

08005054 <memmove>:
 8005054:	4288      	cmp	r0, r1
 8005056:	b510      	push	{r4, lr}
 8005058:	eb01 0402 	add.w	r4, r1, r2
 800505c:	d902      	bls.n	8005064 <memmove+0x10>
 800505e:	4284      	cmp	r4, r0
 8005060:	4623      	mov	r3, r4
 8005062:	d807      	bhi.n	8005074 <memmove+0x20>
 8005064:	1e43      	subs	r3, r0, #1
 8005066:	42a1      	cmp	r1, r4
 8005068:	d008      	beq.n	800507c <memmove+0x28>
 800506a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800506e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005072:	e7f8      	b.n	8005066 <memmove+0x12>
 8005074:	4402      	add	r2, r0
 8005076:	4601      	mov	r1, r0
 8005078:	428a      	cmp	r2, r1
 800507a:	d100      	bne.n	800507e <memmove+0x2a>
 800507c:	bd10      	pop	{r4, pc}
 800507e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005086:	e7f7      	b.n	8005078 <memmove+0x24>

08005088 <_free_r>:
 8005088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800508a:	2900      	cmp	r1, #0
 800508c:	d044      	beq.n	8005118 <_free_r+0x90>
 800508e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005092:	9001      	str	r0, [sp, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f1a1 0404 	sub.w	r4, r1, #4
 800509a:	bfb8      	it	lt
 800509c:	18e4      	addlt	r4, r4, r3
 800509e:	f000 f913 	bl	80052c8 <__malloc_lock>
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <_free_r+0x94>)
 80050a4:	9801      	ldr	r0, [sp, #4]
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	b933      	cbnz	r3, 80050b8 <_free_r+0x30>
 80050aa:	6063      	str	r3, [r4, #4]
 80050ac:	6014      	str	r4, [r2, #0]
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b4:	f000 b90e 	b.w	80052d4 <__malloc_unlock>
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	d908      	bls.n	80050ce <_free_r+0x46>
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf01      	itttt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	e7ed      	b.n	80050aa <_free_r+0x22>
 80050ce:	461a      	mov	r2, r3
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	b10b      	cbz	r3, 80050d8 <_free_r+0x50>
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	d9fa      	bls.n	80050ce <_free_r+0x46>
 80050d8:	6811      	ldr	r1, [r2, #0]
 80050da:	1855      	adds	r5, r2, r1
 80050dc:	42a5      	cmp	r5, r4
 80050de:	d10b      	bne.n	80050f8 <_free_r+0x70>
 80050e0:	6824      	ldr	r4, [r4, #0]
 80050e2:	4421      	add	r1, r4
 80050e4:	1854      	adds	r4, r2, r1
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	d1e0      	bne.n	80050ae <_free_r+0x26>
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	6053      	str	r3, [r2, #4]
 80050f2:	4421      	add	r1, r4
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	e7da      	b.n	80050ae <_free_r+0x26>
 80050f8:	d902      	bls.n	8005100 <_free_r+0x78>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	e7d6      	b.n	80050ae <_free_r+0x26>
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	1961      	adds	r1, r4, r5
 8005104:	428b      	cmp	r3, r1
 8005106:	bf04      	itt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	bf04      	itt	eq
 8005110:	1949      	addeq	r1, r1, r5
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	6054      	str	r4, [r2, #4]
 8005116:	e7ca      	b.n	80050ae <_free_r+0x26>
 8005118:	b003      	add	sp, #12
 800511a:	bd30      	pop	{r4, r5, pc}
 800511c:	200188ac 	.word	0x200188ac

08005120 <sbrk_aligned>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4e0e      	ldr	r6, [pc, #56]	; (800515c <sbrk_aligned+0x3c>)
 8005124:	460c      	mov	r4, r1
 8005126:	6831      	ldr	r1, [r6, #0]
 8005128:	4605      	mov	r5, r0
 800512a:	b911      	cbnz	r1, 8005132 <sbrk_aligned+0x12>
 800512c:	f000 f8bc 	bl	80052a8 <_sbrk_r>
 8005130:	6030      	str	r0, [r6, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 f8b7 	bl	80052a8 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d00a      	beq.n	8005154 <sbrk_aligned+0x34>
 800513e:	1cc4      	adds	r4, r0, #3
 8005140:	f024 0403 	bic.w	r4, r4, #3
 8005144:	42a0      	cmp	r0, r4
 8005146:	d007      	beq.n	8005158 <sbrk_aligned+0x38>
 8005148:	1a21      	subs	r1, r4, r0
 800514a:	4628      	mov	r0, r5
 800514c:	f000 f8ac 	bl	80052a8 <_sbrk_r>
 8005150:	3001      	adds	r0, #1
 8005152:	d101      	bne.n	8005158 <sbrk_aligned+0x38>
 8005154:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005158:	4620      	mov	r0, r4
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	200188b0 	.word	0x200188b0

08005160 <_malloc_r>:
 8005160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	1ccd      	adds	r5, r1, #3
 8005166:	f025 0503 	bic.w	r5, r5, #3
 800516a:	3508      	adds	r5, #8
 800516c:	2d0c      	cmp	r5, #12
 800516e:	bf38      	it	cc
 8005170:	250c      	movcc	r5, #12
 8005172:	2d00      	cmp	r5, #0
 8005174:	4607      	mov	r7, r0
 8005176:	db01      	blt.n	800517c <_malloc_r+0x1c>
 8005178:	42a9      	cmp	r1, r5
 800517a:	d905      	bls.n	8005188 <_malloc_r+0x28>
 800517c:	230c      	movs	r3, #12
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	2600      	movs	r6, #0
 8005182:	4630      	mov	r0, r6
 8005184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005188:	4e2e      	ldr	r6, [pc, #184]	; (8005244 <_malloc_r+0xe4>)
 800518a:	f000 f89d 	bl	80052c8 <__malloc_lock>
 800518e:	6833      	ldr	r3, [r6, #0]
 8005190:	461c      	mov	r4, r3
 8005192:	bb34      	cbnz	r4, 80051e2 <_malloc_r+0x82>
 8005194:	4629      	mov	r1, r5
 8005196:	4638      	mov	r0, r7
 8005198:	f7ff ffc2 	bl	8005120 <sbrk_aligned>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	4604      	mov	r4, r0
 80051a0:	d14d      	bne.n	800523e <_malloc_r+0xde>
 80051a2:	6834      	ldr	r4, [r6, #0]
 80051a4:	4626      	mov	r6, r4
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d140      	bne.n	800522c <_malloc_r+0xcc>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	4631      	mov	r1, r6
 80051ae:	4638      	mov	r0, r7
 80051b0:	eb04 0803 	add.w	r8, r4, r3
 80051b4:	f000 f878 	bl	80052a8 <_sbrk_r>
 80051b8:	4580      	cmp	r8, r0
 80051ba:	d13a      	bne.n	8005232 <_malloc_r+0xd2>
 80051bc:	6821      	ldr	r1, [r4, #0]
 80051be:	3503      	adds	r5, #3
 80051c0:	1a6d      	subs	r5, r5, r1
 80051c2:	f025 0503 	bic.w	r5, r5, #3
 80051c6:	3508      	adds	r5, #8
 80051c8:	2d0c      	cmp	r5, #12
 80051ca:	bf38      	it	cc
 80051cc:	250c      	movcc	r5, #12
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ffa5 	bl	8005120 <sbrk_aligned>
 80051d6:	3001      	adds	r0, #1
 80051d8:	d02b      	beq.n	8005232 <_malloc_r+0xd2>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	442b      	add	r3, r5
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	e00e      	b.n	8005200 <_malloc_r+0xa0>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	1b52      	subs	r2, r2, r5
 80051e6:	d41e      	bmi.n	8005226 <_malloc_r+0xc6>
 80051e8:	2a0b      	cmp	r2, #11
 80051ea:	d916      	bls.n	800521a <_malloc_r+0xba>
 80051ec:	1961      	adds	r1, r4, r5
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	6025      	str	r5, [r4, #0]
 80051f2:	bf18      	it	ne
 80051f4:	6059      	strne	r1, [r3, #4]
 80051f6:	6863      	ldr	r3, [r4, #4]
 80051f8:	bf08      	it	eq
 80051fa:	6031      	streq	r1, [r6, #0]
 80051fc:	5162      	str	r2, [r4, r5]
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	4638      	mov	r0, r7
 8005202:	f104 060b 	add.w	r6, r4, #11
 8005206:	f000 f865 	bl	80052d4 <__malloc_unlock>
 800520a:	f026 0607 	bic.w	r6, r6, #7
 800520e:	1d23      	adds	r3, r4, #4
 8005210:	1af2      	subs	r2, r6, r3
 8005212:	d0b6      	beq.n	8005182 <_malloc_r+0x22>
 8005214:	1b9b      	subs	r3, r3, r6
 8005216:	50a3      	str	r3, [r4, r2]
 8005218:	e7b3      	b.n	8005182 <_malloc_r+0x22>
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	42a3      	cmp	r3, r4
 800521e:	bf0c      	ite	eq
 8005220:	6032      	streq	r2, [r6, #0]
 8005222:	605a      	strne	r2, [r3, #4]
 8005224:	e7ec      	b.n	8005200 <_malloc_r+0xa0>
 8005226:	4623      	mov	r3, r4
 8005228:	6864      	ldr	r4, [r4, #4]
 800522a:	e7b2      	b.n	8005192 <_malloc_r+0x32>
 800522c:	4634      	mov	r4, r6
 800522e:	6876      	ldr	r6, [r6, #4]
 8005230:	e7b9      	b.n	80051a6 <_malloc_r+0x46>
 8005232:	230c      	movs	r3, #12
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4638      	mov	r0, r7
 8005238:	f000 f84c 	bl	80052d4 <__malloc_unlock>
 800523c:	e7a1      	b.n	8005182 <_malloc_r+0x22>
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	e7de      	b.n	8005200 <_malloc_r+0xa0>
 8005242:	bf00      	nop
 8005244:	200188ac 	.word	0x200188ac

08005248 <_realloc_r>:
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	4680      	mov	r8, r0
 800524e:	4614      	mov	r4, r2
 8005250:	460e      	mov	r6, r1
 8005252:	b921      	cbnz	r1, 800525e <_realloc_r+0x16>
 8005254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	4611      	mov	r1, r2
 800525a:	f7ff bf81 	b.w	8005160 <_malloc_r>
 800525e:	b92a      	cbnz	r2, 800526c <_realloc_r+0x24>
 8005260:	f7ff ff12 	bl	8005088 <_free_r>
 8005264:	4625      	mov	r5, r4
 8005266:	4628      	mov	r0, r5
 8005268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526c:	f000 f838 	bl	80052e0 <_malloc_usable_size_r>
 8005270:	4284      	cmp	r4, r0
 8005272:	4607      	mov	r7, r0
 8005274:	d802      	bhi.n	800527c <_realloc_r+0x34>
 8005276:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800527a:	d812      	bhi.n	80052a2 <_realloc_r+0x5a>
 800527c:	4621      	mov	r1, r4
 800527e:	4640      	mov	r0, r8
 8005280:	f7ff ff6e 	bl	8005160 <_malloc_r>
 8005284:	4605      	mov	r5, r0
 8005286:	2800      	cmp	r0, #0
 8005288:	d0ed      	beq.n	8005266 <_realloc_r+0x1e>
 800528a:	42bc      	cmp	r4, r7
 800528c:	4622      	mov	r2, r4
 800528e:	4631      	mov	r1, r6
 8005290:	bf28      	it	cs
 8005292:	463a      	movcs	r2, r7
 8005294:	f7ff fba6 	bl	80049e4 <memcpy>
 8005298:	4631      	mov	r1, r6
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff fef4 	bl	8005088 <_free_r>
 80052a0:	e7e1      	b.n	8005266 <_realloc_r+0x1e>
 80052a2:	4635      	mov	r5, r6
 80052a4:	e7df      	b.n	8005266 <_realloc_r+0x1e>
	...

080052a8 <_sbrk_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d06      	ldr	r5, [pc, #24]	; (80052c4 <_sbrk_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	602b      	str	r3, [r5, #0]
 80052b4:	f7fd fa66 	bl	8002784 <_sbrk>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_sbrk_r+0x1a>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_sbrk_r+0x1a>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	200188b4 	.word	0x200188b4

080052c8 <__malloc_lock>:
 80052c8:	4801      	ldr	r0, [pc, #4]	; (80052d0 <__malloc_lock+0x8>)
 80052ca:	f000 b811 	b.w	80052f0 <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	200188b8 	.word	0x200188b8

080052d4 <__malloc_unlock>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__malloc_unlock+0x8>)
 80052d6:	f000 b80c 	b.w	80052f2 <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	200188b8 	.word	0x200188b8

080052e0 <_malloc_usable_size_r>:
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f18      	subs	r0, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbc      	itt	lt
 80052ea:	580b      	ldrlt	r3, [r1, r0]
 80052ec:	18c0      	addlt	r0, r0, r3
 80052ee:	4770      	bx	lr

080052f0 <__retarget_lock_acquire_recursive>:
 80052f0:	4770      	bx	lr

080052f2 <__retarget_lock_release_recursive>:
 80052f2:	4770      	bx	lr

080052f4 <_init>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr

08005300 <_fini>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr
