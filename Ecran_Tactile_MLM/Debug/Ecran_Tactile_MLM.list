
Ecran_Tactile_MLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003560  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b8  080037b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003830  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003830  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af9d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196a  00000000  00000000  0002b03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220bc  00000000  00000000  0002db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9cd  00000000  00000000  0004fc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb6cd  00000000  00000000  0005b5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126cc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c1c  00000000  00000000  00126d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800370c 	.word	0x0800370c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	0800370c 	.word	0x0800370c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	2301      	movs	r3, #1
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <__io_putchar+0x20>)
 800051a:	f001 ff84 	bl	8002426 <HAL_UART_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000e4 	.word	0x200000e4

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fb89 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f83d 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f905 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053e:	f000 f8d9 	bl	80006f4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000542:	f000 f8a5 	bl	8000690 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t pdata[2];
  pdata[0]=0b00101001;
 8000546:	2329      	movs	r3, #41	; 0x29
 8000548:	713b      	strb	r3, [r7, #4]
  pdata[1]=0;
 800054a:	2300      	movs	r3, #0
 800054c:	717b      	strb	r3, [r7, #5]
  HAL_SPI_Transmit(&hspi2,pdata, 2, 1000);
 800054e:	1d39      	adds	r1, r7, #4
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	2202      	movs	r2, #2
 8000556:	4814      	ldr	r0, [pc, #80]	; (80005a8 <main+0x7c>)
 8000558:	f001 fd11 	bl	8001f7e <HAL_SPI_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("allume \n");
 800055c:	4813      	ldr	r0, [pc, #76]	; (80005ac <main+0x80>)
 800055e:	f002 fb77 	bl	8002c50 <puts>
	  pdata[0]=0b00101001;
 8000562:	2329      	movs	r3, #41	; 0x29
 8000564:	713b      	strb	r3, [r7, #4]
	  pdata[1]=0;
 8000566:	2300      	movs	r3, #0
 8000568:	717b      	strb	r3, [r7, #5]
	  HAL_SPI_Transmit(&hspi2,pdata, 2, 1000);
 800056a:	1d39      	adds	r1, r7, #4
 800056c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000570:	2202      	movs	r2, #2
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <main+0x7c>)
 8000574:	f001 fd03 	bl	8001f7e <HAL_SPI_Transmit>
	  HAL_Delay(5000);
 8000578:	f241 3088 	movw	r0, #5000	; 0x1388
 800057c:	f000 fbd6 	bl	8000d2c <HAL_Delay>
	  printf("Eteint \n");
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0x84>)
 8000582:	f002 fb65 	bl	8002c50 <puts>
	  pdata[0]=0b00101000;
 8000586:	2328      	movs	r3, #40	; 0x28
 8000588:	713b      	strb	r3, [r7, #4]
	  pdata[1]=0;
 800058a:	2300      	movs	r3, #0
 800058c:	717b      	strb	r3, [r7, #5]
	  HAL_SPI_Transmit(&hspi2,pdata, 2, 1000);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	2202      	movs	r2, #2
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <main+0x7c>)
 8000598:	f001 fcf1 	bl	8001f7e <HAL_SPI_Transmit>
	  HAL_Delay(5000);
 800059c:	f241 3088 	movw	r0, #5000	; 0x1388
 80005a0:	f000 fbc4 	bl	8000d2c <HAL_Delay>
	  printf("allume \n");
 80005a4:	e7da      	b.n	800055c <main+0x30>
 80005a6:	bf00      	nop
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	08003724 	.word	0x08003724
 80005b0:	0800372c 	.word	0x0800372c

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2234      	movs	r2, #52	; 0x34
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 face 	bl	8002b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <SystemClock_Config+0xd4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <SystemClock_Config+0xd4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xd4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a22      	ldr	r2, [pc, #136]	; (800068c <SystemClock_Config+0xd8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <SystemClock_Config+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000628:	2310      	movs	r3, #16
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800062c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f974 	bl	8001930 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800064e:	f000 f8e9 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe14 	bl	800129c <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800067a:	f000 f8d3 	bl	8000824 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_SPI2_Init+0x5c>)
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_SPI2_Init+0x60>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_SPI2_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006be:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_SPI2_Init+0x5c>)
 80006da:	f001 fbc7 	bl	8001e6c <HAL_SPI_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80006e4:	f000 f89e 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	40003800 	.word	0x40003800

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f001 fe2e 	bl	800238c <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f875 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000e4 	.word	0x200000e4
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2c      	ldr	r2, [pc, #176]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a25      	ldr	r2, [pc, #148]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0xd4>)
 80007d4:	f000 fd48 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_GPIO_Init+0xd8>)
 80007f0:	f000 fba6 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f4:	2320      	movs	r3, #32
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0xd4>)
 800080c:	f000 fb98 	bl	8000f40 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086e:	2007      	movs	r0, #7
 8000870:	f000 fb32 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a30      	ldr	r2, [pc, #192]	; (8000960 <HAL_SPI_MspInit+0xe0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d15a      	bne.n	8000958 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a27      	ldr	r2, [pc, #156]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a20      	ldr	r2, [pc, #128]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f6:	2302      	movs	r3, #2
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4815      	ldr	r0, [pc, #84]	; (8000968 <HAL_SPI_MspInit+0xe8>)
 8000912:	f000 fb15 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000916:	2304      	movs	r3, #4
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <HAL_SPI_MspInit+0xe8>)
 8000932:	f000 fb05 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000948:	2305      	movs	r3, #5
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <HAL_SPI_MspInit+0xec>)
 8000954:	f000 faf4 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40003800 	.word	0x40003800
 8000964:	40023800 	.word	0x40023800
 8000968:	40020800 	.word	0x40020800
 800096c:	40020400 	.word	0x40020400

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d143      	bne.n	8000a1a <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ca:	230c      	movs	r3, #12
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009da:	2307      	movs	r3, #7
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0xbc>)
 80009e6:	f000 faab 	bl	8000f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    /* disable input/output buffering */
    setvbuf(stdin ,NULL,_IONBF,0);
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0xc0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6858      	ldr	r0, [r3, #4]
 80009f0:	2300      	movs	r3, #0
 80009f2:	2202      	movs	r2, #2
 80009f4:	2100      	movs	r1, #0
 80009f6:	f002 f933 	bl	8002c60 <setvbuf>
    setvbuf(stdout,NULL,_IONBF,0);
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_UART_MspInit+0xc0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6898      	ldr	r0, [r3, #8]
 8000a00:	2300      	movs	r3, #0
 8000a02:	2202      	movs	r2, #2
 8000a04:	2100      	movs	r1, #0
 8000a06:	f002 f92b 	bl	8002c60 <setvbuf>
    setvbuf(stderr,NULL,_IONBF,0);
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_UART_MspInit+0xc0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68d8      	ldr	r0, [r3, #12]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2202      	movs	r2, #2
 8000a14:	2100      	movs	r1, #0
 8000a16:	f002 f923 	bl	8002c60 <setvbuf>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	2000000c 	.word	0x2000000c

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f934 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
  }

  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e009      	b.n	8000ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd13 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf1      	blt.n	8000ad4 <_write+0x12>
  }
  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
  return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f001 ffbc 	bl	8002b10 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000128 	.word	0x20000128
 8000bcc:	20000140 	.word	0x20000140

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f001 ff7b 	bl	8002b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fc81 	bl	800052c <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c38:	080037c0 	.word	0x080037c0
  ldr r2, =_sbss
 8000c3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c40:	20000140 	.word	0x20000140

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f931 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fdd8 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f93b 	bl	8000f26 <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc8:	f000 f911 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	2000012c 	.word	0x2000012c

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000012c 	.word	0x2000012c

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff47 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5c 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb0 	bl	8000e94 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	e165      	b.n	8001228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 8154 	bne.w	8001222 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d005      	beq.n	8000f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d130      	bne.n	8000ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 0201 	and.w	r2, r3, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d017      	beq.n	8001030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d123      	bne.n	8001084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	69b9      	ldr	r1, [r7, #24]
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0203 	and.w	r2, r3, #3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80ae 	beq.w	8001222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <HAL_GPIO_Init+0x300>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a5c      	ldr	r2, [pc, #368]	; (8001240 <HAL_GPIO_Init+0x300>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <HAL_GPIO_Init+0x300>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e2:	4a58      	ldr	r2, [pc, #352]	; (8001244 <HAL_GPIO_Init+0x304>)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_GPIO_Init+0x308>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d025      	beq.n	800115a <HAL_GPIO_Init+0x21a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4e      	ldr	r2, [pc, #312]	; (800124c <HAL_GPIO_Init+0x30c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <HAL_GPIO_Init+0x216>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <HAL_GPIO_Init+0x310>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x212>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <HAL_GPIO_Init+0x314>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x20e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4b      	ldr	r2, [pc, #300]	; (8001258 <HAL_GPIO_Init+0x318>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x20a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4a      	ldr	r2, [pc, #296]	; (800125c <HAL_GPIO_Init+0x31c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x206>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a49      	ldr	r2, [pc, #292]	; (8001260 <HAL_GPIO_Init+0x320>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x202>
 800113e:	2306      	movs	r3, #6
 8001140:	e00c      	b.n	800115c <HAL_GPIO_Init+0x21c>
 8001142:	2307      	movs	r3, #7
 8001144:	e00a      	b.n	800115c <HAL_GPIO_Init+0x21c>
 8001146:	2305      	movs	r3, #5
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x21c>
 800114a:	2304      	movs	r3, #4
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x21c>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x21c>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x21c>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x21c>
 800115a:	2300      	movs	r3, #0
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x304>)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <HAL_GPIO_Init+0x324>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a31      	ldr	r2, [pc, #196]	; (8001264 <HAL_GPIO_Init+0x324>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_GPIO_Init+0x324>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_GPIO_Init+0x324>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_GPIO_Init+0x324>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <HAL_GPIO_Init+0x324>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_GPIO_Init+0x324>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121c:	4a11      	ldr	r2, [pc, #68]	; (8001264 <HAL_GPIO_Init+0x324>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	f67f ae96 	bls.w	8000f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0cc      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d90c      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4b65      	ldr	r3, [pc, #404]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b8      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	494d      	ldr	r1, [pc, #308]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d044      	beq.n	80013bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d119      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e07f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d003      	beq.n	800135a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001356:	2b03      	cmp	r3, #3
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e06f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e067      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f023 0203 	bic.w	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4934      	ldr	r1, [pc, #208]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001388:	4313      	orrs	r3, r2
 800138a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800138c:	f7ff fcc2 	bl	8000d14 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	e00a      	b.n	80013aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001394:	f7ff fcbe 	bl	8000d14 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e04f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 020c 	and.w	r2, r3, #12
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d1eb      	bne.n	8001394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d20c      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e032      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	4313      	orrs	r3, r2
 8001420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001422:	f000 f855 	bl	80014d0 <HAL_RCC_GetSysClockFreq>
 8001426:	4602      	mov	r2, r0
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	5ccb      	ldrb	r3, [r1, r3]
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc22 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00
 8001458:	40023800 	.word	0x40023800
 800145c:	08003734 	.word	0x08003734
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_RCC_GetHCLKFreq+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001484:	f7ff fff0 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	0a9b      	lsrs	r3, r3, #10
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	08003744 	.word	0x08003744

080014a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014ac:	f7ff ffdc 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	0b5b      	lsrs	r3, r3, #13
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4903      	ldr	r1, [pc, #12]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	08003744 	.word	0x08003744

080014d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d4:	b0ae      	sub	sp, #184	; 0xb8
 80014d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f6:	4bcb      	ldr	r3, [pc, #812]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	f200 8206 	bhi.w	8001910 <HAL_RCC_GetSysClockFreq+0x440>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001541 	.word	0x08001541
 8001510:	08001911 	.word	0x08001911
 8001514:	08001911 	.word	0x08001911
 8001518:	08001911 	.word	0x08001911
 800151c:	08001549 	.word	0x08001549
 8001520:	08001911 	.word	0x08001911
 8001524:	08001911 	.word	0x08001911
 8001528:	08001911 	.word	0x08001911
 800152c:	08001551 	.word	0x08001551
 8001530:	08001911 	.word	0x08001911
 8001534:	08001911 	.word	0x08001911
 8001538:	08001911 	.word	0x08001911
 800153c:	08001741 	.word	0x08001741
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001540:	4bb9      	ldr	r3, [pc, #740]	; (8001828 <HAL_RCC_GetSysClockFreq+0x358>)
 8001542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001546:	e1e7      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001548:	4bb8      	ldr	r3, [pc, #736]	; (800182c <HAL_RCC_GetSysClockFreq+0x35c>)
 800154a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800154e:	e1e3      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001550:	4bb4      	ldr	r3, [pc, #720]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800155c:	4bb1      	ldr	r3, [pc, #708]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d071      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001568:	4bae      	ldr	r3, [pc, #696]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	2200      	movs	r2, #0
 8001570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001574:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800157c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800158a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800158e:	4622      	mov	r2, r4
 8001590:	462b      	mov	r3, r5
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	0159      	lsls	r1, r3, #5
 800159c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a0:	0150      	lsls	r0, r2, #5
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	1a51      	subs	r1, r2, r1
 80015aa:	6439      	str	r1, [r7, #64]	; 0x40
 80015ac:	4629      	mov	r1, r5
 80015ae:	eb63 0301 	sbc.w	r3, r3, r1
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015c0:	4649      	mov	r1, r9
 80015c2:	018b      	lsls	r3, r1, #6
 80015c4:	4641      	mov	r1, r8
 80015c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ca:	4641      	mov	r1, r8
 80015cc:	018a      	lsls	r2, r1, #6
 80015ce:	4641      	mov	r1, r8
 80015d0:	1a51      	subs	r1, r2, r1
 80015d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80015d4:	4649      	mov	r1, r9
 80015d6:	eb63 0301 	sbc.w	r3, r3, r1
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80015e8:	4649      	mov	r1, r9
 80015ea:	00cb      	lsls	r3, r1, #3
 80015ec:	4641      	mov	r1, r8
 80015ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015f2:	4641      	mov	r1, r8
 80015f4:	00ca      	lsls	r2, r1, #3
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	4622      	mov	r2, r4
 80015fe:	189b      	adds	r3, r3, r2
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
 8001602:	462b      	mov	r3, r5
 8001604:	460a      	mov	r2, r1
 8001606:	eb42 0303 	adc.w	r3, r2, r3
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001618:	4629      	mov	r1, r5
 800161a:	024b      	lsls	r3, r1, #9
 800161c:	4621      	mov	r1, r4
 800161e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001622:	4621      	mov	r1, r4
 8001624:	024a      	lsls	r2, r1, #9
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800162e:	2200      	movs	r2, #0
 8001630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001638:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800163c:	f7fe fde2 	bl	8000204 <__aeabi_uldivmod>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4613      	mov	r3, r2
 8001646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800164a:	e067      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164c:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001658:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800165c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001664:	67bb      	str	r3, [r7, #120]	; 0x78
 8001666:	2300      	movs	r3, #0
 8001668:	67fb      	str	r3, [r7, #124]	; 0x7c
 800166a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800166e:	4622      	mov	r2, r4
 8001670:	462b      	mov	r3, r5
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0159      	lsls	r1, r3, #5
 800167c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001680:	0150      	lsls	r0, r2, #5
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4621      	mov	r1, r4
 8001688:	1a51      	subs	r1, r2, r1
 800168a:	62b9      	str	r1, [r7, #40]	; 0x28
 800168c:	4629      	mov	r1, r5
 800168e:	eb63 0301 	sbc.w	r3, r3, r1
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016a0:	4649      	mov	r1, r9
 80016a2:	018b      	lsls	r3, r1, #6
 80016a4:	4641      	mov	r1, r8
 80016a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016aa:	4641      	mov	r1, r8
 80016ac:	018a      	lsls	r2, r1, #6
 80016ae:	4641      	mov	r1, r8
 80016b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80016b4:	4649      	mov	r1, r9
 80016b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016ce:	4692      	mov	sl, r2
 80016d0:	469b      	mov	fp, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	eb1a 0303 	adds.w	r3, sl, r3
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	462b      	mov	r3, r5
 80016dc:	eb4b 0303 	adc.w	r3, fp, r3
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016ee:	4629      	mov	r1, r5
 80016f0:	028b      	lsls	r3, r1, #10
 80016f2:	4621      	mov	r1, r4
 80016f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016f8:	4621      	mov	r1, r4
 80016fa:	028a      	lsls	r2, r1, #10
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001704:	2200      	movs	r2, #0
 8001706:	673b      	str	r3, [r7, #112]	; 0x70
 8001708:	677a      	str	r2, [r7, #116]	; 0x74
 800170a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800170e:	f7fe fd79 	bl	8000204 <__aeabi_uldivmod>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4613      	mov	r3, r2
 8001718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800171c:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	3301      	adds	r3, #1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800172e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800173e:	e0eb      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d06b      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	2200      	movs	r2, #0
 8001760:	66bb      	str	r3, [r7, #104]	; 0x68
 8001762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176a:	663b      	str	r3, [r7, #96]	; 0x60
 800176c:	2300      	movs	r3, #0
 800176e:	667b      	str	r3, [r7, #100]	; 0x64
 8001770:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001774:	4622      	mov	r2, r4
 8001776:	462b      	mov	r3, r5
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	0159      	lsls	r1, r3, #5
 8001782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001786:	0150      	lsls	r0, r2, #5
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4621      	mov	r1, r4
 800178e:	1a51      	subs	r1, r2, r1
 8001790:	61b9      	str	r1, [r7, #24]
 8001792:	4629      	mov	r1, r5
 8001794:	eb63 0301 	sbc.w	r3, r3, r1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017a6:	4659      	mov	r1, fp
 80017a8:	018b      	lsls	r3, r1, #6
 80017aa:	4651      	mov	r1, sl
 80017ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017b0:	4651      	mov	r1, sl
 80017b2:	018a      	lsls	r2, r1, #6
 80017b4:	4651      	mov	r1, sl
 80017b6:	ebb2 0801 	subs.w	r8, r2, r1
 80017ba:	4659      	mov	r1, fp
 80017bc:	eb63 0901 	sbc.w	r9, r3, r1
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	4623      	mov	r3, r4
 80017da:	eb18 0303 	adds.w	r3, r8, r3
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	462b      	mov	r3, r5
 80017e2:	eb49 0303 	adc.w	r3, r9, r3
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017f4:	4629      	mov	r1, r5
 80017f6:	024b      	lsls	r3, r1, #9
 80017f8:	4621      	mov	r1, r4
 80017fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017fe:	4621      	mov	r1, r4
 8001800:	024a      	lsls	r2, r1, #9
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800180a:	2200      	movs	r2, #0
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
 800180e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001814:	f7fe fcf6 	bl	8000204 <__aeabi_uldivmod>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4613      	mov	r3, r2
 800181e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001822:	e065      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x420>
 8001824:	40023800 	.word	0x40023800
 8001828:	00f42400 	.word	0x00f42400
 800182c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001830:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <HAL_RCC_GetSysClockFreq+0x458>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	2200      	movs	r2, #0
 8001838:	4618      	mov	r0, r3
 800183a:	4611      	mov	r1, r2
 800183c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001840:	653b      	str	r3, [r7, #80]	; 0x50
 8001842:	2300      	movs	r3, #0
 8001844:	657b      	str	r3, [r7, #84]	; 0x54
 8001846:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800184a:	4642      	mov	r2, r8
 800184c:	464b      	mov	r3, r9
 800184e:	f04f 0000 	mov.w	r0, #0
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	0159      	lsls	r1, r3, #5
 8001858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185c:	0150      	lsls	r0, r2, #5
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4641      	mov	r1, r8
 8001864:	1a51      	subs	r1, r2, r1
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	4649      	mov	r1, r9
 800186a:	eb63 0301 	sbc.w	r3, r3, r1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800187c:	4659      	mov	r1, fp
 800187e:	018b      	lsls	r3, r1, #6
 8001880:	4651      	mov	r1, sl
 8001882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001886:	4651      	mov	r1, sl
 8001888:	018a      	lsls	r2, r1, #6
 800188a:	4651      	mov	r1, sl
 800188c:	1a54      	subs	r4, r2, r1
 800188e:	4659      	mov	r1, fp
 8001890:	eb63 0501 	sbc.w	r5, r3, r1
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	00eb      	lsls	r3, r5, #3
 800189e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	18e3      	adds	r3, r4, r3
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	464b      	mov	r3, r9
 80018b0:	eb45 0303 	adc.w	r3, r5, r3
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c2:	4629      	mov	r1, r5
 80018c4:	028b      	lsls	r3, r1, #10
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018cc:	4621      	mov	r1, r4
 80018ce:	028a      	lsls	r2, r1, #10
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018d8:	2200      	movs	r2, #0
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
 80018dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018e2:	f7fe fc8f 	bl	8000204 <__aeabi_uldivmod>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4613      	mov	r3, r2
 80018ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_RCC_GetSysClockFreq+0x458>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0f1b      	lsrs	r3, r3, #28
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80018fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800190e:	e003      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800191c:	4618      	mov	r0, r3
 800191e:	37b8      	adds	r7, #184	; 0xb8
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400

08001930 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e28d      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8083 	beq.w	8001a56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001950:	4b94      	ldr	r3, [pc, #592]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d019      	beq.n	8001990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800195c:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001964:	2b08      	cmp	r3, #8
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001968:	4b8e      	ldr	r3, [pc, #568]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001974:	d00c      	beq.n	8001990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001976:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b84      	ldr	r3, [pc, #528]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x124>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e25a      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x90>
 80019b2:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xcc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xb4>
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xcc>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6b      	ldr	r2, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f986 	bl	8000d14 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f982 	bl	8000d14 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e21f      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xdc>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f972 	bl	8000d14 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f96e 	bl	8000d14 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e20b      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x104>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d06f      	beq.n	8001b42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d017      	beq.n	8001a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d11c      	bne.n	8001acc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d116      	bne.n	8001acc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x186>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e1d3      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	e03a      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_OscConfig+0x278>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f91b 	bl	8000d14 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f917 	bl	8000d14 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1b4      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4925      	ldr	r1, [pc, #148]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_OscConfig+0x278>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f8fa 	bl	8000d14 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff f8f6 	bl	8000d14 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e193      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d036      	beq.n	8001bbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d016      	beq.n	8001b84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x27c>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f8da 	bl	8000d14 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff f8d6 	bl	8000d14 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e173      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x234>
 8001b82:	e01b      	b.n	8001bbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_OscConfig+0x27c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f8c3 	bl	8000d14 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	e00e      	b.n	8001bb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff f8bf 	bl	8000d14 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d907      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e15c      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	42470000 	.word	0x42470000
 8001bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ea      	bne.n	8001b92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8097 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b83      	ldr	r3, [pc, #524]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfa:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c06:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f87f 	bl	8000d14 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1a:	f7ff f87b 	bl	8000d14 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e118      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x31e>
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x358>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x340>
 8001c56:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a60      	ldr	r2, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0x358>
 8001c70:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a59      	ldr	r2, [pc, #356]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	f023 0304 	bic.w	r3, r3, #4
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d015      	beq.n	8001cbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f840 	bl	8000d14 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7ff f83c 	bl	8000d14 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0d7      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ee      	beq.n	8001c98 <HAL_RCC_OscConfig+0x368>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f82a 	bl	8000d14 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f826 	bl	8000d14 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0c1      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ee      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80ad 	beq.w	8001e5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d060      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d145      	bne.n	8001da2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fffa 	bl	8000d14 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe fff6 	bl	8000d14 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e093      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	071b      	lsls	r3, r3, #28
 8001d6e:	491b      	ldr	r1, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7fe ffcb 	bl	8000d14 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe ffc7 	bl	8000d14 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e064      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x452>
 8001da0:	e05c      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7fe ffb4 	bl	8000d14 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe ffb0 	bl	8000d14 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e04d      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x480>
 8001dce:	e045      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e040      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_RCC_OscConfig+0x538>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d030      	beq.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d129      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d122      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d119      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10f      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07b      	b.n	8001f76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d108      	bne.n	8001e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e8e:	d009      	beq.n	8001ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
 8001e96:	e005      	b.n	8001ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fcde 	bl	8000880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	ea42 0103 	orr.w	r1, r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	f003 0104 	and.w	r1, r3, #4
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f003 0210 	and.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b088      	sub	sp, #32
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_SPI_Transmit+0x22>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e126      	b.n	80021ee <HAL_SPI_Transmit+0x270>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa8:	f7fe feb4 	bl	8000d14 <HAL_GetTick>
 8001fac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d002      	beq.n	8001fc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fc2:	e10b      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_SPI_Transmit+0x52>
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fd4:	e102      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201c:	d10f      	bne.n	800203e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800203c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d007      	beq.n	800205c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002064:	d14b      	bne.n	80020fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_SPI_Transmit+0xf6>
 800206e:	8afb      	ldrh	r3, [r7, #22]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d13e      	bne.n	80020f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002098:	e02b      	b.n	80020f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d112      	bne.n	80020ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	1c9a      	adds	r2, r3, #2
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80020cc:	e011      	b.n	80020f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ce:	f7fe fe21 	bl	8000d14 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d803      	bhi.n	80020e6 <HAL_SPI_Transmit+0x168>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e4:	d102      	bne.n	80020ec <HAL_SPI_Transmit+0x16e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020f0:	e074      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ce      	bne.n	800209a <HAL_SPI_Transmit+0x11c>
 80020fc:	e04c      	b.n	8002198 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_Transmit+0x18e>
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d140      	bne.n	800218e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002132:	e02c      	b.n	800218e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d113      	bne.n	800216a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	; 0x36
 8002168:	e011      	b.n	800218e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800216a:	f7fe fdd3 	bl	8000d14 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d803      	bhi.n	8002182 <HAL_SPI_Transmit+0x204>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002180:	d102      	bne.n	8002188 <HAL_SPI_Transmit+0x20a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800218c:	e026      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1cd      	bne.n	8002134 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f8b3 	bl	8002308 <SPI_EndRxTxTransaction>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77fb      	strb	r3, [r7, #31]
 80021d8:	e000      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80021da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002208:	f7fe fd84 	bl	8000d14 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002218:	f7fe fd7c 	bl	8000d14 <HAL_GetTick>
 800221c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	015b      	lsls	r3, r3, #5
 8002224:	0d1b      	lsrs	r3, r3, #20
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800222e:	e054      	b.n	80022da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002236:	d050      	beq.n	80022da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002238:	f7fe fd6c 	bl	8000d14 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	429a      	cmp	r2, r3
 8002246:	d902      	bls.n	800224e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d13d      	bne.n	80022ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800225c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002266:	d111      	bne.n	800228c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002270:	d004      	beq.n	800227c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d107      	bne.n	800228c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d10f      	bne.n	80022b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e017      	b.n	80022fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4013      	ands	r3, r2
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d19b      	bne.n	8002230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000000 	.word	0x20000000

08002308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <SPI_EndRxTxTransaction+0x7c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <SPI_EndRxTxTransaction+0x80>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0d5b      	lsrs	r3, r3, #21
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002332:	d112      	bne.n	800235a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff ff5a 	bl	80021f8 <SPI_WaitFlagStateUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e00f      	b.n	800237a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3b01      	subs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d0f2      	beq.n	800235a <SPI_EndRxTxTransaction+0x52>
 8002374:	e000      	b.n	8002378 <SPI_EndRxTxTransaction+0x70>
        break;
 8002376:	bf00      	nop
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000000 	.word	0x20000000
 8002388:	165e9f81 	.word	0x165e9f81

0800238c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e03f      	b.n	800241e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fadc 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f929 	bl	8002628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b08a      	sub	sp, #40	; 0x28
 800242a:	af02      	add	r7, sp, #8
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	d17c      	bne.n	8002540 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_UART_Transmit+0x2c>
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e075      	b.n	8002542 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_UART_Transmit+0x3e>
 8002460:	2302      	movs	r3, #2
 8002462:	e06e      	b.n	8002542 <HAL_UART_Transmit+0x11c>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2221      	movs	r2, #33	; 0x21
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247a:	f7fe fc4b 	bl	8000d14 <HAL_GetTick>
 800247e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002494:	d108      	bne.n	80024a8 <HAL_UART_Transmit+0x82>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d104      	bne.n	80024a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	e003      	b.n	80024b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024b8:	e02a      	b.n	8002510 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f840 	bl	800254a <UART_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e036      	b.n	8002542 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	3302      	adds	r3, #2
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	e007      	b.n	8002502 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	3301      	adds	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1cf      	bne.n	80024ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	2140      	movs	r1, #64	; 0x40
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f810 	bl	800254a <UART_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e006      	b.n	8002542 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b090      	sub	sp, #64	; 0x40
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	4613      	mov	r3, r2
 8002558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255a:	e050      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002562:	d04c      	beq.n	80025fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <UART_WaitOnFlagUntilTimeout+0x30>
 800256a:	f7fe fbd3 	bl	8000d14 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002576:	429a      	cmp	r2, r3
 8002578:	d241      	bcs.n	80025fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	e853 3f00 	ldrex	r3, [r3]
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800259a:	637a      	str	r2, [r7, #52]	; 0x34
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e5      	bne.n	800257a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	613b      	str	r3, [r7, #16]
   return(result);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ce:	623a      	str	r2, [r7, #32]
 80025d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d2:	69f9      	ldr	r1, [r7, #28]
 80025d4:	6a3a      	ldr	r2, [r7, #32]
 80025d6:	e841 2300 	strex	r3, r2, [r1]
 80025da:	61bb      	str	r3, [r7, #24]
   return(result);
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1e5      	bne.n	80025ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e00f      	b.n	800261e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	429a      	cmp	r2, r3
 800261a:	d09f      	beq.n	800255c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3740      	adds	r7, #64	; 0x40
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800262c:	b0c0      	sub	sp, #256	; 0x100
 800262e:	af00      	add	r7, sp, #0
 8002630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	ea40 0301 	orr.w	r3, r0, r1
 8002650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	431a      	orrs	r2, r3
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002680:	f021 010c 	bic.w	r1, r1, #12
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800268e:	430b      	orrs	r3, r1
 8002690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a2:	6999      	ldr	r1, [r3, #24]
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	ea40 0301 	orr.w	r3, r0, r1
 80026ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b8f      	ldr	r3, [pc, #572]	; (80028f4 <UART_SetConfig+0x2cc>)
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d005      	beq.n	80026c8 <UART_SetConfig+0xa0>
 80026bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b8d      	ldr	r3, [pc, #564]	; (80028f8 <UART_SetConfig+0x2d0>)
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d104      	bne.n	80026d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c8:	f7fe feee 	bl	80014a8 <HAL_RCC_GetPCLK2Freq>
 80026cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026d0:	e003      	b.n	80026da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026d2:	f7fe fed5 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 80026d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e4:	f040 810c 	bne.w	8002900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	1891      	adds	r1, r2, r2
 8002700:	65b9      	str	r1, [r7, #88]	; 0x58
 8002702:	415b      	adcs	r3, r3
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800270a:	4621      	mov	r1, r4
 800270c:	eb12 0801 	adds.w	r8, r2, r1
 8002710:	4629      	mov	r1, r5
 8002712:	eb43 0901 	adc.w	r9, r3, r1
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272a:	4690      	mov	r8, r2
 800272c:	4699      	mov	r9, r3
 800272e:	4623      	mov	r3, r4
 8002730:	eb18 0303 	adds.w	r3, r8, r3
 8002734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002738:	462b      	mov	r3, r5
 800273a:	eb49 0303 	adc.w	r3, r9, r3
 800273e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800274e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002756:	460b      	mov	r3, r1
 8002758:	18db      	adds	r3, r3, r3
 800275a:	653b      	str	r3, [r7, #80]	; 0x50
 800275c:	4613      	mov	r3, r2
 800275e:	eb42 0303 	adc.w	r3, r2, r3
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
 8002764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800276c:	f7fd fd4a 	bl	8000204 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4b61      	ldr	r3, [pc, #388]	; (80028fc <UART_SetConfig+0x2d4>)
 8002776:	fba3 2302 	umull	r2, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	011c      	lsls	r4, r3, #4
 800277e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002782:	2200      	movs	r2, #0
 8002784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002788:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800278c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	1891      	adds	r1, r2, r2
 8002796:	64b9      	str	r1, [r7, #72]	; 0x48
 8002798:	415b      	adcs	r3, r3
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800279c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027a0:	4641      	mov	r1, r8
 80027a2:	eb12 0a01 	adds.w	sl, r2, r1
 80027a6:	4649      	mov	r1, r9
 80027a8:	eb43 0b01 	adc.w	fp, r3, r1
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c0:	4692      	mov	sl, r2
 80027c2:	469b      	mov	fp, r3
 80027c4:	4643      	mov	r3, r8
 80027c6:	eb1a 0303 	adds.w	r3, sl, r3
 80027ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ce:	464b      	mov	r3, r9
 80027d0:	eb4b 0303 	adc.w	r3, fp, r3
 80027d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027ec:	460b      	mov	r3, r1
 80027ee:	18db      	adds	r3, r3, r3
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
 80027f2:	4613      	mov	r3, r2
 80027f4:	eb42 0303 	adc.w	r3, r2, r3
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
 80027fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002802:	f7fd fcff 	bl	8000204 <__aeabi_uldivmod>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4611      	mov	r1, r2
 800280c:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <UART_SetConfig+0x2d4>)
 800280e:	fba3 2301 	umull	r2, r3, r3, r1
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2264      	movs	r2, #100	; 0x64
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	1acb      	subs	r3, r1, r3
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <UART_SetConfig+0x2d4>)
 8002824:	fba3 2302 	umull	r2, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002830:	441c      	add	r4, r3
 8002832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002836:	2200      	movs	r2, #0
 8002838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800283c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002844:	4642      	mov	r2, r8
 8002846:	464b      	mov	r3, r9
 8002848:	1891      	adds	r1, r2, r2
 800284a:	63b9      	str	r1, [r7, #56]	; 0x38
 800284c:	415b      	adcs	r3, r3
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002854:	4641      	mov	r1, r8
 8002856:	1851      	adds	r1, r2, r1
 8002858:	6339      	str	r1, [r7, #48]	; 0x30
 800285a:	4649      	mov	r1, r9
 800285c:	414b      	adcs	r3, r1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800286c:	4659      	mov	r1, fp
 800286e:	00cb      	lsls	r3, r1, #3
 8002870:	4651      	mov	r1, sl
 8002872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002876:	4651      	mov	r1, sl
 8002878:	00ca      	lsls	r2, r1, #3
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	4603      	mov	r3, r0
 8002880:	4642      	mov	r2, r8
 8002882:	189b      	adds	r3, r3, r2
 8002884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002888:	464b      	mov	r3, r9
 800288a:	460a      	mov	r2, r1
 800288c:	eb42 0303 	adc.w	r3, r2, r3
 8002890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028a8:	460b      	mov	r3, r1
 80028aa:	18db      	adds	r3, r3, r3
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ae:	4613      	mov	r3, r2
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028be:	f7fd fca1 	bl	8000204 <__aeabi_uldivmod>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <UART_SetConfig+0x2d4>)
 80028c8:	fba3 1302 	umull	r1, r3, r3, r2
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	2164      	movs	r1, #100	; 0x64
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	3332      	adds	r3, #50	; 0x32
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <UART_SetConfig+0x2d4>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	f003 0207 	and.w	r2, r3, #7
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4422      	add	r2, r4
 80028ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028f0:	e105      	b.n	8002afe <UART_SetConfig+0x4d6>
 80028f2:	bf00      	nop
 80028f4:	40011000 	.word	0x40011000
 80028f8:	40011400 	.word	0x40011400
 80028fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002904:	2200      	movs	r2, #0
 8002906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800290a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800290e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002912:	4642      	mov	r2, r8
 8002914:	464b      	mov	r3, r9
 8002916:	1891      	adds	r1, r2, r2
 8002918:	6239      	str	r1, [r7, #32]
 800291a:	415b      	adcs	r3, r3
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002922:	4641      	mov	r1, r8
 8002924:	1854      	adds	r4, r2, r1
 8002926:	4649      	mov	r1, r9
 8002928:	eb43 0501 	adc.w	r5, r3, r1
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	00eb      	lsls	r3, r5, #3
 8002936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293a:	00e2      	lsls	r2, r4, #3
 800293c:	4614      	mov	r4, r2
 800293e:	461d      	mov	r5, r3
 8002940:	4643      	mov	r3, r8
 8002942:	18e3      	adds	r3, r4, r3
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002948:	464b      	mov	r3, r9
 800294a:	eb45 0303 	adc.w	r3, r5, r3
 800294e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800295e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800296e:	4629      	mov	r1, r5
 8002970:	008b      	lsls	r3, r1, #2
 8002972:	4621      	mov	r1, r4
 8002974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002978:	4621      	mov	r1, r4
 800297a:	008a      	lsls	r2, r1, #2
 800297c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002980:	f7fd fc40 	bl	8000204 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <UART_SetConfig+0x4e4>)
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	011c      	lsls	r4, r3, #4
 8002992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800299c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029a4:	4642      	mov	r2, r8
 80029a6:	464b      	mov	r3, r9
 80029a8:	1891      	adds	r1, r2, r2
 80029aa:	61b9      	str	r1, [r7, #24]
 80029ac:	415b      	adcs	r3, r3
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b4:	4641      	mov	r1, r8
 80029b6:	1851      	adds	r1, r2, r1
 80029b8:	6139      	str	r1, [r7, #16]
 80029ba:	4649      	mov	r1, r9
 80029bc:	414b      	adcs	r3, r1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029cc:	4659      	mov	r1, fp
 80029ce:	00cb      	lsls	r3, r1, #3
 80029d0:	4651      	mov	r1, sl
 80029d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d6:	4651      	mov	r1, sl
 80029d8:	00ca      	lsls	r2, r1, #3
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	4642      	mov	r2, r8
 80029e2:	189b      	adds	r3, r3, r2
 80029e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029e8:	464b      	mov	r3, r9
 80029ea:	460a      	mov	r2, r1
 80029ec:	eb42 0303 	adc.w	r3, r2, r3
 80029f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	008b      	lsls	r3, r1, #2
 8002a10:	4641      	mov	r1, r8
 8002a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a16:	4641      	mov	r1, r8
 8002a18:	008a      	lsls	r2, r1, #2
 8002a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a1e:	f7fd fbf1 	bl	8000204 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002a28:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	2164      	movs	r1, #100	; 0x64
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	3332      	adds	r3, #50	; 0x32
 8002a3a:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a46:	441c      	add	r4, r3
 8002a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002a50:	677a      	str	r2, [r7, #116]	; 0x74
 8002a52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a56:	4642      	mov	r2, r8
 8002a58:	464b      	mov	r3, r9
 8002a5a:	1891      	adds	r1, r2, r2
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	415b      	adcs	r3, r3
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a66:	4641      	mov	r1, r8
 8002a68:	1851      	adds	r1, r2, r1
 8002a6a:	6039      	str	r1, [r7, #0]
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	414b      	adcs	r3, r1
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a7e:	4659      	mov	r1, fp
 8002a80:	00cb      	lsls	r3, r1, #3
 8002a82:	4651      	mov	r1, sl
 8002a84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a88:	4651      	mov	r1, sl
 8002a8a:	00ca      	lsls	r2, r1, #3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4603      	mov	r3, r0
 8002a92:	4642      	mov	r2, r8
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a98:	464b      	mov	r3, r9
 8002a9a:	460a      	mov	r2, r1
 8002a9c:	eb42 0303 	adc.w	r3, r2, r3
 8002aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8002aac:	667a      	str	r2, [r7, #100]	; 0x64
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002aba:	4649      	mov	r1, r9
 8002abc:	008b      	lsls	r3, r1, #2
 8002abe:	4641      	mov	r1, r8
 8002ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	008a      	lsls	r2, r1, #2
 8002ac8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002acc:	f7fd fb9a 	bl	8000204 <__aeabi_uldivmod>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2164      	movs	r1, #100	; 0x64
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	3332      	adds	r3, #50	; 0x32
 8002ae8:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4422      	add	r2, r4
 8002afc:	609a      	str	r2, [r3, #8]
}
 8002afe:	bf00      	nop
 8002b00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b04:	46bd      	mov	sp, r7
 8002b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0a:	bf00      	nop
 8002b0c:	51eb851f 	.word	0x51eb851f

08002b10 <__errno>:
 8002b10:	4b01      	ldr	r3, [pc, #4]	; (8002b18 <__errno+0x8>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <__libc_init_array>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	4d0d      	ldr	r5, [pc, #52]	; (8002b54 <__libc_init_array+0x38>)
 8002b20:	4c0d      	ldr	r4, [pc, #52]	; (8002b58 <__libc_init_array+0x3c>)
 8002b22:	1b64      	subs	r4, r4, r5
 8002b24:	10a4      	asrs	r4, r4, #2
 8002b26:	2600      	movs	r6, #0
 8002b28:	42a6      	cmp	r6, r4
 8002b2a:	d109      	bne.n	8002b40 <__libc_init_array+0x24>
 8002b2c:	4d0b      	ldr	r5, [pc, #44]	; (8002b5c <__libc_init_array+0x40>)
 8002b2e:	4c0c      	ldr	r4, [pc, #48]	; (8002b60 <__libc_init_array+0x44>)
 8002b30:	f000 fdec 	bl	800370c <_init>
 8002b34:	1b64      	subs	r4, r4, r5
 8002b36:	10a4      	asrs	r4, r4, #2
 8002b38:	2600      	movs	r6, #0
 8002b3a:	42a6      	cmp	r6, r4
 8002b3c:	d105      	bne.n	8002b4a <__libc_init_array+0x2e>
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b44:	4798      	blx	r3
 8002b46:	3601      	adds	r6, #1
 8002b48:	e7ee      	b.n	8002b28 <__libc_init_array+0xc>
 8002b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4e:	4798      	blx	r3
 8002b50:	3601      	adds	r6, #1
 8002b52:	e7f2      	b.n	8002b3a <__libc_init_array+0x1e>
 8002b54:	080037b8 	.word	0x080037b8
 8002b58:	080037b8 	.word	0x080037b8
 8002b5c:	080037b8 	.word	0x080037b8
 8002b60:	080037bc 	.word	0x080037bc

08002b64 <memset>:
 8002b64:	4402      	add	r2, r0
 8002b66:	4603      	mov	r3, r0
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <memset+0xa>
 8002b6c:	4770      	bx	lr
 8002b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b72:	e7f9      	b.n	8002b68 <memset+0x4>

08002b74 <_puts_r>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	460e      	mov	r6, r1
 8002b78:	4605      	mov	r5, r0
 8002b7a:	b118      	cbz	r0, 8002b84 <_puts_r+0x10>
 8002b7c:	6983      	ldr	r3, [r0, #24]
 8002b7e:	b90b      	cbnz	r3, 8002b84 <_puts_r+0x10>
 8002b80:	f000 fb0e 	bl	80031a0 <__sinit>
 8002b84:	69ab      	ldr	r3, [r5, #24]
 8002b86:	68ac      	ldr	r4, [r5, #8]
 8002b88:	b913      	cbnz	r3, 8002b90 <_puts_r+0x1c>
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	f000 fb08 	bl	80031a0 <__sinit>
 8002b90:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <_puts_r+0xd0>)
 8002b92:	429c      	cmp	r4, r3
 8002b94:	d120      	bne.n	8002bd8 <_puts_r+0x64>
 8002b96:	686c      	ldr	r4, [r5, #4]
 8002b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b9a:	07db      	lsls	r3, r3, #31
 8002b9c:	d405      	bmi.n	8002baa <_puts_r+0x36>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	0598      	lsls	r0, r3, #22
 8002ba2:	d402      	bmi.n	8002baa <_puts_r+0x36>
 8002ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ba6:	f000 fb99 	bl	80032dc <__retarget_lock_acquire_recursive>
 8002baa:	89a3      	ldrh	r3, [r4, #12]
 8002bac:	0719      	lsls	r1, r3, #28
 8002bae:	d51d      	bpl.n	8002bec <_puts_r+0x78>
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	b1db      	cbz	r3, 8002bec <_puts_r+0x78>
 8002bb4:	3e01      	subs	r6, #1
 8002bb6:	68a3      	ldr	r3, [r4, #8]
 8002bb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60a3      	str	r3, [r4, #8]
 8002bc0:	bb39      	cbnz	r1, 8002c12 <_puts_r+0x9e>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da38      	bge.n	8002c38 <_puts_r+0xc4>
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	210a      	movs	r1, #10
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f000 f90e 	bl	8002dec <__swbuf_r>
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	d011      	beq.n	8002bf8 <_puts_r+0x84>
 8002bd4:	250a      	movs	r5, #10
 8002bd6:	e011      	b.n	8002bfc <_puts_r+0x88>
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <_puts_r+0xd4>)
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	d101      	bne.n	8002be2 <_puts_r+0x6e>
 8002bde:	68ac      	ldr	r4, [r5, #8]
 8002be0:	e7da      	b.n	8002b98 <_puts_r+0x24>
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <_puts_r+0xd8>)
 8002be4:	429c      	cmp	r4, r3
 8002be6:	bf08      	it	eq
 8002be8:	68ec      	ldreq	r4, [r5, #12]
 8002bea:	e7d5      	b.n	8002b98 <_puts_r+0x24>
 8002bec:	4621      	mov	r1, r4
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f000 f94e 	bl	8002e90 <__swsetup_r>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d0dd      	beq.n	8002bb4 <_puts_r+0x40>
 8002bf8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bfe:	07da      	lsls	r2, r3, #31
 8002c00:	d405      	bmi.n	8002c0e <_puts_r+0x9a>
 8002c02:	89a3      	ldrh	r3, [r4, #12]
 8002c04:	059b      	lsls	r3, r3, #22
 8002c06:	d402      	bmi.n	8002c0e <_puts_r+0x9a>
 8002c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c0a:	f000 fb68 	bl	80032de <__retarget_lock_release_recursive>
 8002c0e:	4628      	mov	r0, r5
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da04      	bge.n	8002c20 <_puts_r+0xac>
 8002c16:	69a2      	ldr	r2, [r4, #24]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	dc06      	bgt.n	8002c2a <_puts_r+0xb6>
 8002c1c:	290a      	cmp	r1, #10
 8002c1e:	d004      	beq.n	8002c2a <_puts_r+0xb6>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	6022      	str	r2, [r4, #0]
 8002c26:	7019      	strb	r1, [r3, #0]
 8002c28:	e7c5      	b.n	8002bb6 <_puts_r+0x42>
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f000 f8dd 	bl	8002dec <__swbuf_r>
 8002c32:	3001      	adds	r0, #1
 8002c34:	d1bf      	bne.n	8002bb6 <_puts_r+0x42>
 8002c36:	e7df      	b.n	8002bf8 <_puts_r+0x84>
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	250a      	movs	r5, #10
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	6022      	str	r2, [r4, #0]
 8002c40:	701d      	strb	r5, [r3, #0]
 8002c42:	e7db      	b.n	8002bfc <_puts_r+0x88>
 8002c44:	08003770 	.word	0x08003770
 8002c48:	08003790 	.word	0x08003790
 8002c4c:	08003750 	.word	0x08003750

08002c50 <puts>:
 8002c50:	4b02      	ldr	r3, [pc, #8]	; (8002c5c <puts+0xc>)
 8002c52:	4601      	mov	r1, r0
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	f7ff bf8d 	b.w	8002b74 <_puts_r>
 8002c5a:	bf00      	nop
 8002c5c:	2000000c 	.word	0x2000000c

08002c60 <setvbuf>:
 8002c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002c64:	461d      	mov	r5, r3
 8002c66:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <setvbuf+0x17c>)
 8002c68:	681f      	ldr	r7, [r3, #0]
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	460e      	mov	r6, r1
 8002c6e:	4690      	mov	r8, r2
 8002c70:	b127      	cbz	r7, 8002c7c <setvbuf+0x1c>
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	b913      	cbnz	r3, 8002c7c <setvbuf+0x1c>
 8002c76:	4638      	mov	r0, r7
 8002c78:	f000 fa92 	bl	80031a0 <__sinit>
 8002c7c:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <setvbuf+0x180>)
 8002c7e:	429c      	cmp	r4, r3
 8002c80:	d167      	bne.n	8002d52 <setvbuf+0xf2>
 8002c82:	687c      	ldr	r4, [r7, #4]
 8002c84:	f1b8 0f02 	cmp.w	r8, #2
 8002c88:	d006      	beq.n	8002c98 <setvbuf+0x38>
 8002c8a:	f1b8 0f01 	cmp.w	r8, #1
 8002c8e:	f200 809f 	bhi.w	8002dd0 <setvbuf+0x170>
 8002c92:	2d00      	cmp	r5, #0
 8002c94:	f2c0 809c 	blt.w	8002dd0 <setvbuf+0x170>
 8002c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c9a:	07db      	lsls	r3, r3, #31
 8002c9c:	d405      	bmi.n	8002caa <setvbuf+0x4a>
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	0598      	lsls	r0, r3, #22
 8002ca2:	d402      	bmi.n	8002caa <setvbuf+0x4a>
 8002ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ca6:	f000 fb19 	bl	80032dc <__retarget_lock_acquire_recursive>
 8002caa:	4621      	mov	r1, r4
 8002cac:	4638      	mov	r0, r7
 8002cae:	f000 f9e3 	bl	8003078 <_fflush_r>
 8002cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cb4:	b141      	cbz	r1, 8002cc8 <setvbuf+0x68>
 8002cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cba:	4299      	cmp	r1, r3
 8002cbc:	d002      	beq.n	8002cc4 <setvbuf+0x64>
 8002cbe:	4638      	mov	r0, r7
 8002cc0:	f000 fb7c 	bl	80033bc <_free_r>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61a3      	str	r3, [r4, #24]
 8002ccc:	6063      	str	r3, [r4, #4]
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	0619      	lsls	r1, r3, #24
 8002cd2:	d503      	bpl.n	8002cdc <setvbuf+0x7c>
 8002cd4:	6921      	ldr	r1, [r4, #16]
 8002cd6:	4638      	mov	r0, r7
 8002cd8:	f000 fb70 	bl	80033bc <_free_r>
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	f1b8 0f02 	cmp.w	r8, #2
 8002cea:	81a3      	strh	r3, [r4, #12]
 8002cec:	d06c      	beq.n	8002dc8 <setvbuf+0x168>
 8002cee:	ab01      	add	r3, sp, #4
 8002cf0:	466a      	mov	r2, sp
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	f000 faf3 	bl	80032e0 <__swhatbuf_r>
 8002cfa:	89a3      	ldrh	r3, [r4, #12]
 8002cfc:	4318      	orrs	r0, r3
 8002cfe:	81a0      	strh	r0, [r4, #12]
 8002d00:	2d00      	cmp	r5, #0
 8002d02:	d130      	bne.n	8002d66 <setvbuf+0x106>
 8002d04:	9d00      	ldr	r5, [sp, #0]
 8002d06:	4628      	mov	r0, r5
 8002d08:	f000 fb50 	bl	80033ac <malloc>
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d155      	bne.n	8002dbe <setvbuf+0x15e>
 8002d12:	f8dd 9000 	ldr.w	r9, [sp]
 8002d16:	45a9      	cmp	r9, r5
 8002d18:	d14a      	bne.n	8002db0 <setvbuf+0x150>
 8002d1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60a2      	str	r2, [r4, #8]
 8002d22:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002d26:	6022      	str	r2, [r4, #0]
 8002d28:	6122      	str	r2, [r4, #16]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d30:	6162      	str	r2, [r4, #20]
 8002d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	07d2      	lsls	r2, r2, #31
 8002d3a:	81a3      	strh	r3, [r4, #12]
 8002d3c:	d405      	bmi.n	8002d4a <setvbuf+0xea>
 8002d3e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002d42:	d102      	bne.n	8002d4a <setvbuf+0xea>
 8002d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d46:	f000 faca 	bl	80032de <__retarget_lock_release_recursive>
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	b003      	add	sp, #12
 8002d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <setvbuf+0x184>)
 8002d54:	429c      	cmp	r4, r3
 8002d56:	d101      	bne.n	8002d5c <setvbuf+0xfc>
 8002d58:	68bc      	ldr	r4, [r7, #8]
 8002d5a:	e793      	b.n	8002c84 <setvbuf+0x24>
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <setvbuf+0x188>)
 8002d5e:	429c      	cmp	r4, r3
 8002d60:	bf08      	it	eq
 8002d62:	68fc      	ldreq	r4, [r7, #12]
 8002d64:	e78e      	b.n	8002c84 <setvbuf+0x24>
 8002d66:	2e00      	cmp	r6, #0
 8002d68:	d0cd      	beq.n	8002d06 <setvbuf+0xa6>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	b913      	cbnz	r3, 8002d74 <setvbuf+0x114>
 8002d6e:	4638      	mov	r0, r7
 8002d70:	f000 fa16 	bl	80031a0 <__sinit>
 8002d74:	f1b8 0f01 	cmp.w	r8, #1
 8002d78:	bf08      	it	eq
 8002d7a:	89a3      	ldrheq	r3, [r4, #12]
 8002d7c:	6026      	str	r6, [r4, #0]
 8002d7e:	bf04      	itt	eq
 8002d80:	f043 0301 	orreq.w	r3, r3, #1
 8002d84:	81a3      	strheq	r3, [r4, #12]
 8002d86:	89a2      	ldrh	r2, [r4, #12]
 8002d88:	f012 0308 	ands.w	r3, r2, #8
 8002d8c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002d90:	d01c      	beq.n	8002dcc <setvbuf+0x16c>
 8002d92:	07d3      	lsls	r3, r2, #31
 8002d94:	bf41      	itttt	mi
 8002d96:	2300      	movmi	r3, #0
 8002d98:	426d      	negmi	r5, r5
 8002d9a:	60a3      	strmi	r3, [r4, #8]
 8002d9c:	61a5      	strmi	r5, [r4, #24]
 8002d9e:	bf58      	it	pl
 8002da0:	60a5      	strpl	r5, [r4, #8]
 8002da2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002da4:	f015 0501 	ands.w	r5, r5, #1
 8002da8:	d115      	bne.n	8002dd6 <setvbuf+0x176>
 8002daa:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002dae:	e7c8      	b.n	8002d42 <setvbuf+0xe2>
 8002db0:	4648      	mov	r0, r9
 8002db2:	f000 fafb 	bl	80033ac <malloc>
 8002db6:	4606      	mov	r6, r0
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d0ae      	beq.n	8002d1a <setvbuf+0xba>
 8002dbc:	464d      	mov	r5, r9
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	81a3      	strh	r3, [r4, #12]
 8002dc6:	e7d0      	b.n	8002d6a <setvbuf+0x10a>
 8002dc8:	2500      	movs	r5, #0
 8002dca:	e7a8      	b.n	8002d1e <setvbuf+0xbe>
 8002dcc:	60a3      	str	r3, [r4, #8]
 8002dce:	e7e8      	b.n	8002da2 <setvbuf+0x142>
 8002dd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002dd4:	e7b9      	b.n	8002d4a <setvbuf+0xea>
 8002dd6:	2500      	movs	r5, #0
 8002dd8:	e7b7      	b.n	8002d4a <setvbuf+0xea>
 8002dda:	bf00      	nop
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	08003770 	.word	0x08003770
 8002de4:	08003790 	.word	0x08003790
 8002de8:	08003750 	.word	0x08003750

08002dec <__swbuf_r>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	460e      	mov	r6, r1
 8002df0:	4614      	mov	r4, r2
 8002df2:	4605      	mov	r5, r0
 8002df4:	b118      	cbz	r0, 8002dfe <__swbuf_r+0x12>
 8002df6:	6983      	ldr	r3, [r0, #24]
 8002df8:	b90b      	cbnz	r3, 8002dfe <__swbuf_r+0x12>
 8002dfa:	f000 f9d1 	bl	80031a0 <__sinit>
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <__swbuf_r+0x98>)
 8002e00:	429c      	cmp	r4, r3
 8002e02:	d12b      	bne.n	8002e5c <__swbuf_r+0x70>
 8002e04:	686c      	ldr	r4, [r5, #4]
 8002e06:	69a3      	ldr	r3, [r4, #24]
 8002e08:	60a3      	str	r3, [r4, #8]
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	071a      	lsls	r2, r3, #28
 8002e0e:	d52f      	bpl.n	8002e70 <__swbuf_r+0x84>
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	b36b      	cbz	r3, 8002e70 <__swbuf_r+0x84>
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	6820      	ldr	r0, [r4, #0]
 8002e18:	1ac0      	subs	r0, r0, r3
 8002e1a:	6963      	ldr	r3, [r4, #20]
 8002e1c:	b2f6      	uxtb	r6, r6
 8002e1e:	4283      	cmp	r3, r0
 8002e20:	4637      	mov	r7, r6
 8002e22:	dc04      	bgt.n	8002e2e <__swbuf_r+0x42>
 8002e24:	4621      	mov	r1, r4
 8002e26:	4628      	mov	r0, r5
 8002e28:	f000 f926 	bl	8003078 <_fflush_r>
 8002e2c:	bb30      	cbnz	r0, 8002e7c <__swbuf_r+0x90>
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60a3      	str	r3, [r4, #8]
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	6022      	str	r2, [r4, #0]
 8002e3a:	701e      	strb	r6, [r3, #0]
 8002e3c:	6963      	ldr	r3, [r4, #20]
 8002e3e:	3001      	adds	r0, #1
 8002e40:	4283      	cmp	r3, r0
 8002e42:	d004      	beq.n	8002e4e <__swbuf_r+0x62>
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	07db      	lsls	r3, r3, #31
 8002e48:	d506      	bpl.n	8002e58 <__swbuf_r+0x6c>
 8002e4a:	2e0a      	cmp	r6, #10
 8002e4c:	d104      	bne.n	8002e58 <__swbuf_r+0x6c>
 8002e4e:	4621      	mov	r1, r4
 8002e50:	4628      	mov	r0, r5
 8002e52:	f000 f911 	bl	8003078 <_fflush_r>
 8002e56:	b988      	cbnz	r0, 8002e7c <__swbuf_r+0x90>
 8002e58:	4638      	mov	r0, r7
 8002e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <__swbuf_r+0x9c>)
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d101      	bne.n	8002e66 <__swbuf_r+0x7a>
 8002e62:	68ac      	ldr	r4, [r5, #8]
 8002e64:	e7cf      	b.n	8002e06 <__swbuf_r+0x1a>
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <__swbuf_r+0xa0>)
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	bf08      	it	eq
 8002e6c:	68ec      	ldreq	r4, [r5, #12]
 8002e6e:	e7ca      	b.n	8002e06 <__swbuf_r+0x1a>
 8002e70:	4621      	mov	r1, r4
 8002e72:	4628      	mov	r0, r5
 8002e74:	f000 f80c 	bl	8002e90 <__swsetup_r>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d0cb      	beq.n	8002e14 <__swbuf_r+0x28>
 8002e7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e80:	e7ea      	b.n	8002e58 <__swbuf_r+0x6c>
 8002e82:	bf00      	nop
 8002e84:	08003770 	.word	0x08003770
 8002e88:	08003790 	.word	0x08003790
 8002e8c:	08003750 	.word	0x08003750

08002e90 <__swsetup_r>:
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <__swsetup_r+0xcc>)
 8002e92:	b570      	push	{r4, r5, r6, lr}
 8002e94:	681d      	ldr	r5, [r3, #0]
 8002e96:	4606      	mov	r6, r0
 8002e98:	460c      	mov	r4, r1
 8002e9a:	b125      	cbz	r5, 8002ea6 <__swsetup_r+0x16>
 8002e9c:	69ab      	ldr	r3, [r5, #24]
 8002e9e:	b913      	cbnz	r3, 8002ea6 <__swsetup_r+0x16>
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	f000 f97d 	bl	80031a0 <__sinit>
 8002ea6:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <__swsetup_r+0xd0>)
 8002ea8:	429c      	cmp	r4, r3
 8002eaa:	d10f      	bne.n	8002ecc <__swsetup_r+0x3c>
 8002eac:	686c      	ldr	r4, [r5, #4]
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eb4:	0719      	lsls	r1, r3, #28
 8002eb6:	d42c      	bmi.n	8002f12 <__swsetup_r+0x82>
 8002eb8:	06dd      	lsls	r5, r3, #27
 8002eba:	d411      	bmi.n	8002ee0 <__swsetup_r+0x50>
 8002ebc:	2309      	movs	r3, #9
 8002ebe:	6033      	str	r3, [r6, #0]
 8002ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eca:	e03e      	b.n	8002f4a <__swsetup_r+0xba>
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <__swsetup_r+0xd4>)
 8002ece:	429c      	cmp	r4, r3
 8002ed0:	d101      	bne.n	8002ed6 <__swsetup_r+0x46>
 8002ed2:	68ac      	ldr	r4, [r5, #8]
 8002ed4:	e7eb      	b.n	8002eae <__swsetup_r+0x1e>
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <__swsetup_r+0xd8>)
 8002ed8:	429c      	cmp	r4, r3
 8002eda:	bf08      	it	eq
 8002edc:	68ec      	ldreq	r4, [r5, #12]
 8002ede:	e7e6      	b.n	8002eae <__swsetup_r+0x1e>
 8002ee0:	0758      	lsls	r0, r3, #29
 8002ee2:	d512      	bpl.n	8002f0a <__swsetup_r+0x7a>
 8002ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee6:	b141      	cbz	r1, 8002efa <__swsetup_r+0x6a>
 8002ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eec:	4299      	cmp	r1, r3
 8002eee:	d002      	beq.n	8002ef6 <__swsetup_r+0x66>
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f000 fa63 	bl	80033bc <_free_r>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f00:	81a3      	strh	r3, [r4, #12]
 8002f02:	2300      	movs	r3, #0
 8002f04:	6063      	str	r3, [r4, #4]
 8002f06:	6923      	ldr	r3, [r4, #16]
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	81a3      	strh	r3, [r4, #12]
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	b94b      	cbnz	r3, 8002f2a <__swsetup_r+0x9a>
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f20:	d003      	beq.n	8002f2a <__swsetup_r+0x9a>
 8002f22:	4621      	mov	r1, r4
 8002f24:	4630      	mov	r0, r6
 8002f26:	f000 fa01 	bl	800332c <__smakebuf_r>
 8002f2a:	89a0      	ldrh	r0, [r4, #12]
 8002f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f30:	f010 0301 	ands.w	r3, r0, #1
 8002f34:	d00a      	beq.n	8002f4c <__swsetup_r+0xbc>
 8002f36:	2300      	movs	r3, #0
 8002f38:	60a3      	str	r3, [r4, #8]
 8002f3a:	6963      	ldr	r3, [r4, #20]
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	61a3      	str	r3, [r4, #24]
 8002f40:	6923      	ldr	r3, [r4, #16]
 8002f42:	b943      	cbnz	r3, 8002f56 <__swsetup_r+0xc6>
 8002f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f48:	d1ba      	bne.n	8002ec0 <__swsetup_r+0x30>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	0781      	lsls	r1, r0, #30
 8002f4e:	bf58      	it	pl
 8002f50:	6963      	ldrpl	r3, [r4, #20]
 8002f52:	60a3      	str	r3, [r4, #8]
 8002f54:	e7f4      	b.n	8002f40 <__swsetup_r+0xb0>
 8002f56:	2000      	movs	r0, #0
 8002f58:	e7f7      	b.n	8002f4a <__swsetup_r+0xba>
 8002f5a:	bf00      	nop
 8002f5c:	2000000c 	.word	0x2000000c
 8002f60:	08003770 	.word	0x08003770
 8002f64:	08003790 	.word	0x08003790
 8002f68:	08003750 	.word	0x08003750

08002f6c <__sflush_r>:
 8002f6c:	898a      	ldrh	r2, [r1, #12]
 8002f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f72:	4605      	mov	r5, r0
 8002f74:	0710      	lsls	r0, r2, #28
 8002f76:	460c      	mov	r4, r1
 8002f78:	d458      	bmi.n	800302c <__sflush_r+0xc0>
 8002f7a:	684b      	ldr	r3, [r1, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dc05      	bgt.n	8002f8c <__sflush_r+0x20>
 8002f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc02      	bgt.n	8002f8c <__sflush_r+0x20>
 8002f86:	2000      	movs	r0, #0
 8002f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f8e:	2e00      	cmp	r6, #0
 8002f90:	d0f9      	beq.n	8002f86 <__sflush_r+0x1a>
 8002f92:	2300      	movs	r3, #0
 8002f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f98:	682f      	ldr	r7, [r5, #0]
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	d032      	beq.n	8003004 <__sflush_r+0x98>
 8002f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	075a      	lsls	r2, r3, #29
 8002fa4:	d505      	bpl.n	8002fb2 <__sflush_r+0x46>
 8002fa6:	6863      	ldr	r3, [r4, #4]
 8002fa8:	1ac0      	subs	r0, r0, r3
 8002faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fac:	b10b      	cbz	r3, 8002fb2 <__sflush_r+0x46>
 8002fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fb0:	1ac0      	subs	r0, r0, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fb8:	6a21      	ldr	r1, [r4, #32]
 8002fba:	4628      	mov	r0, r5
 8002fbc:	47b0      	blx	r6
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	d106      	bne.n	8002fd2 <__sflush_r+0x66>
 8002fc4:	6829      	ldr	r1, [r5, #0]
 8002fc6:	291d      	cmp	r1, #29
 8002fc8:	d82c      	bhi.n	8003024 <__sflush_r+0xb8>
 8002fca:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <__sflush_r+0x108>)
 8002fcc:	40ca      	lsrs	r2, r1
 8002fce:	07d6      	lsls	r6, r2, #31
 8002fd0:	d528      	bpl.n	8003024 <__sflush_r+0xb8>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	6062      	str	r2, [r4, #4]
 8002fd6:	04d9      	lsls	r1, r3, #19
 8002fd8:	6922      	ldr	r2, [r4, #16]
 8002fda:	6022      	str	r2, [r4, #0]
 8002fdc:	d504      	bpl.n	8002fe8 <__sflush_r+0x7c>
 8002fde:	1c42      	adds	r2, r0, #1
 8002fe0:	d101      	bne.n	8002fe6 <__sflush_r+0x7a>
 8002fe2:	682b      	ldr	r3, [r5, #0]
 8002fe4:	b903      	cbnz	r3, 8002fe8 <__sflush_r+0x7c>
 8002fe6:	6560      	str	r0, [r4, #84]	; 0x54
 8002fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fea:	602f      	str	r7, [r5, #0]
 8002fec:	2900      	cmp	r1, #0
 8002fee:	d0ca      	beq.n	8002f86 <__sflush_r+0x1a>
 8002ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ff4:	4299      	cmp	r1, r3
 8002ff6:	d002      	beq.n	8002ffe <__sflush_r+0x92>
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 f9df 	bl	80033bc <_free_r>
 8002ffe:	2000      	movs	r0, #0
 8003000:	6360      	str	r0, [r4, #52]	; 0x34
 8003002:	e7c1      	b.n	8002f88 <__sflush_r+0x1c>
 8003004:	6a21      	ldr	r1, [r4, #32]
 8003006:	2301      	movs	r3, #1
 8003008:	4628      	mov	r0, r5
 800300a:	47b0      	blx	r6
 800300c:	1c41      	adds	r1, r0, #1
 800300e:	d1c7      	bne.n	8002fa0 <__sflush_r+0x34>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0c4      	beq.n	8002fa0 <__sflush_r+0x34>
 8003016:	2b1d      	cmp	r3, #29
 8003018:	d001      	beq.n	800301e <__sflush_r+0xb2>
 800301a:	2b16      	cmp	r3, #22
 800301c:	d101      	bne.n	8003022 <__sflush_r+0xb6>
 800301e:	602f      	str	r7, [r5, #0]
 8003020:	e7b1      	b.n	8002f86 <__sflush_r+0x1a>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003028:	81a3      	strh	r3, [r4, #12]
 800302a:	e7ad      	b.n	8002f88 <__sflush_r+0x1c>
 800302c:	690f      	ldr	r7, [r1, #16]
 800302e:	2f00      	cmp	r7, #0
 8003030:	d0a9      	beq.n	8002f86 <__sflush_r+0x1a>
 8003032:	0793      	lsls	r3, r2, #30
 8003034:	680e      	ldr	r6, [r1, #0]
 8003036:	bf08      	it	eq
 8003038:	694b      	ldreq	r3, [r1, #20]
 800303a:	600f      	str	r7, [r1, #0]
 800303c:	bf18      	it	ne
 800303e:	2300      	movne	r3, #0
 8003040:	eba6 0807 	sub.w	r8, r6, r7
 8003044:	608b      	str	r3, [r1, #8]
 8003046:	f1b8 0f00 	cmp.w	r8, #0
 800304a:	dd9c      	ble.n	8002f86 <__sflush_r+0x1a>
 800304c:	6a21      	ldr	r1, [r4, #32]
 800304e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003050:	4643      	mov	r3, r8
 8003052:	463a      	mov	r2, r7
 8003054:	4628      	mov	r0, r5
 8003056:	47b0      	blx	r6
 8003058:	2800      	cmp	r0, #0
 800305a:	dc06      	bgt.n	800306a <__sflush_r+0xfe>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003068:	e78e      	b.n	8002f88 <__sflush_r+0x1c>
 800306a:	4407      	add	r7, r0
 800306c:	eba8 0800 	sub.w	r8, r8, r0
 8003070:	e7e9      	b.n	8003046 <__sflush_r+0xda>
 8003072:	bf00      	nop
 8003074:	20400001 	.word	0x20400001

08003078 <_fflush_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	4605      	mov	r5, r0
 800307e:	460c      	mov	r4, r1
 8003080:	b913      	cbnz	r3, 8003088 <_fflush_r+0x10>
 8003082:	2500      	movs	r5, #0
 8003084:	4628      	mov	r0, r5
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	b118      	cbz	r0, 8003092 <_fflush_r+0x1a>
 800308a:	6983      	ldr	r3, [r0, #24]
 800308c:	b90b      	cbnz	r3, 8003092 <_fflush_r+0x1a>
 800308e:	f000 f887 	bl	80031a0 <__sinit>
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <_fflush_r+0x6c>)
 8003094:	429c      	cmp	r4, r3
 8003096:	d11b      	bne.n	80030d0 <_fflush_r+0x58>
 8003098:	686c      	ldr	r4, [r5, #4]
 800309a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ef      	beq.n	8003082 <_fflush_r+0xa>
 80030a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030a4:	07d0      	lsls	r0, r2, #31
 80030a6:	d404      	bmi.n	80030b2 <_fflush_r+0x3a>
 80030a8:	0599      	lsls	r1, r3, #22
 80030aa:	d402      	bmi.n	80030b2 <_fflush_r+0x3a>
 80030ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ae:	f000 f915 	bl	80032dc <__retarget_lock_acquire_recursive>
 80030b2:	4628      	mov	r0, r5
 80030b4:	4621      	mov	r1, r4
 80030b6:	f7ff ff59 	bl	8002f6c <__sflush_r>
 80030ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030bc:	07da      	lsls	r2, r3, #31
 80030be:	4605      	mov	r5, r0
 80030c0:	d4e0      	bmi.n	8003084 <_fflush_r+0xc>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	059b      	lsls	r3, r3, #22
 80030c6:	d4dd      	bmi.n	8003084 <_fflush_r+0xc>
 80030c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ca:	f000 f908 	bl	80032de <__retarget_lock_release_recursive>
 80030ce:	e7d9      	b.n	8003084 <_fflush_r+0xc>
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <_fflush_r+0x70>)
 80030d2:	429c      	cmp	r4, r3
 80030d4:	d101      	bne.n	80030da <_fflush_r+0x62>
 80030d6:	68ac      	ldr	r4, [r5, #8]
 80030d8:	e7df      	b.n	800309a <_fflush_r+0x22>
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <_fflush_r+0x74>)
 80030dc:	429c      	cmp	r4, r3
 80030de:	bf08      	it	eq
 80030e0:	68ec      	ldreq	r4, [r5, #12]
 80030e2:	e7da      	b.n	800309a <_fflush_r+0x22>
 80030e4:	08003770 	.word	0x08003770
 80030e8:	08003790 	.word	0x08003790
 80030ec:	08003750 	.word	0x08003750

080030f0 <std>:
 80030f0:	2300      	movs	r3, #0
 80030f2:	b510      	push	{r4, lr}
 80030f4:	4604      	mov	r4, r0
 80030f6:	e9c0 3300 	strd	r3, r3, [r0]
 80030fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030fe:	6083      	str	r3, [r0, #8]
 8003100:	8181      	strh	r1, [r0, #12]
 8003102:	6643      	str	r3, [r0, #100]	; 0x64
 8003104:	81c2      	strh	r2, [r0, #14]
 8003106:	6183      	str	r3, [r0, #24]
 8003108:	4619      	mov	r1, r3
 800310a:	2208      	movs	r2, #8
 800310c:	305c      	adds	r0, #92	; 0x5c
 800310e:	f7ff fd29 	bl	8002b64 <memset>
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <std+0x38>)
 8003114:	6263      	str	r3, [r4, #36]	; 0x24
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <std+0x3c>)
 8003118:	62a3      	str	r3, [r4, #40]	; 0x28
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <std+0x40>)
 800311c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <std+0x44>)
 8003120:	6224      	str	r4, [r4, #32]
 8003122:	6323      	str	r3, [r4, #48]	; 0x30
 8003124:	bd10      	pop	{r4, pc}
 8003126:	bf00      	nop
 8003128:	0800359d 	.word	0x0800359d
 800312c:	080035bf 	.word	0x080035bf
 8003130:	080035f7 	.word	0x080035f7
 8003134:	0800361b 	.word	0x0800361b

08003138 <_cleanup_r>:
 8003138:	4901      	ldr	r1, [pc, #4]	; (8003140 <_cleanup_r+0x8>)
 800313a:	f000 b8af 	b.w	800329c <_fwalk_reent>
 800313e:	bf00      	nop
 8003140:	08003079 	.word	0x08003079

08003144 <__sfmoreglue>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	2268      	movs	r2, #104	; 0x68
 8003148:	1e4d      	subs	r5, r1, #1
 800314a:	4355      	muls	r5, r2
 800314c:	460e      	mov	r6, r1
 800314e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003152:	f000 f99f 	bl	8003494 <_malloc_r>
 8003156:	4604      	mov	r4, r0
 8003158:	b140      	cbz	r0, 800316c <__sfmoreglue+0x28>
 800315a:	2100      	movs	r1, #0
 800315c:	e9c0 1600 	strd	r1, r6, [r0]
 8003160:	300c      	adds	r0, #12
 8003162:	60a0      	str	r0, [r4, #8]
 8003164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003168:	f7ff fcfc 	bl	8002b64 <memset>
 800316c:	4620      	mov	r0, r4
 800316e:	bd70      	pop	{r4, r5, r6, pc}

08003170 <__sfp_lock_acquire>:
 8003170:	4801      	ldr	r0, [pc, #4]	; (8003178 <__sfp_lock_acquire+0x8>)
 8003172:	f000 b8b3 	b.w	80032dc <__retarget_lock_acquire_recursive>
 8003176:	bf00      	nop
 8003178:	20000131 	.word	0x20000131

0800317c <__sfp_lock_release>:
 800317c:	4801      	ldr	r0, [pc, #4]	; (8003184 <__sfp_lock_release+0x8>)
 800317e:	f000 b8ae 	b.w	80032de <__retarget_lock_release_recursive>
 8003182:	bf00      	nop
 8003184:	20000131 	.word	0x20000131

08003188 <__sinit_lock_acquire>:
 8003188:	4801      	ldr	r0, [pc, #4]	; (8003190 <__sinit_lock_acquire+0x8>)
 800318a:	f000 b8a7 	b.w	80032dc <__retarget_lock_acquire_recursive>
 800318e:	bf00      	nop
 8003190:	20000132 	.word	0x20000132

08003194 <__sinit_lock_release>:
 8003194:	4801      	ldr	r0, [pc, #4]	; (800319c <__sinit_lock_release+0x8>)
 8003196:	f000 b8a2 	b.w	80032de <__retarget_lock_release_recursive>
 800319a:	bf00      	nop
 800319c:	20000132 	.word	0x20000132

080031a0 <__sinit>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	4604      	mov	r4, r0
 80031a4:	f7ff fff0 	bl	8003188 <__sinit_lock_acquire>
 80031a8:	69a3      	ldr	r3, [r4, #24]
 80031aa:	b11b      	cbz	r3, 80031b4 <__sinit+0x14>
 80031ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b0:	f7ff bff0 	b.w	8003194 <__sinit_lock_release>
 80031b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031b8:	6523      	str	r3, [r4, #80]	; 0x50
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <__sinit+0x68>)
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <__sinit+0x6c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80031c2:	42a3      	cmp	r3, r4
 80031c4:	bf04      	itt	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	61a3      	streq	r3, [r4, #24]
 80031ca:	4620      	mov	r0, r4
 80031cc:	f000 f820 	bl	8003210 <__sfp>
 80031d0:	6060      	str	r0, [r4, #4]
 80031d2:	4620      	mov	r0, r4
 80031d4:	f000 f81c 	bl	8003210 <__sfp>
 80031d8:	60a0      	str	r0, [r4, #8]
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 f818 	bl	8003210 <__sfp>
 80031e0:	2200      	movs	r2, #0
 80031e2:	60e0      	str	r0, [r4, #12]
 80031e4:	2104      	movs	r1, #4
 80031e6:	6860      	ldr	r0, [r4, #4]
 80031e8:	f7ff ff82 	bl	80030f0 <std>
 80031ec:	68a0      	ldr	r0, [r4, #8]
 80031ee:	2201      	movs	r2, #1
 80031f0:	2109      	movs	r1, #9
 80031f2:	f7ff ff7d 	bl	80030f0 <std>
 80031f6:	68e0      	ldr	r0, [r4, #12]
 80031f8:	2202      	movs	r2, #2
 80031fa:	2112      	movs	r1, #18
 80031fc:	f7ff ff78 	bl	80030f0 <std>
 8003200:	2301      	movs	r3, #1
 8003202:	61a3      	str	r3, [r4, #24]
 8003204:	e7d2      	b.n	80031ac <__sinit+0xc>
 8003206:	bf00      	nop
 8003208:	0800374c 	.word	0x0800374c
 800320c:	08003139 	.word	0x08003139

08003210 <__sfp>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	4607      	mov	r7, r0
 8003214:	f7ff ffac 	bl	8003170 <__sfp_lock_acquire>
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <__sfp+0x84>)
 800321a:	681e      	ldr	r6, [r3, #0]
 800321c:	69b3      	ldr	r3, [r6, #24]
 800321e:	b913      	cbnz	r3, 8003226 <__sfp+0x16>
 8003220:	4630      	mov	r0, r6
 8003222:	f7ff ffbd 	bl	80031a0 <__sinit>
 8003226:	3648      	adds	r6, #72	; 0x48
 8003228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800322c:	3b01      	subs	r3, #1
 800322e:	d503      	bpl.n	8003238 <__sfp+0x28>
 8003230:	6833      	ldr	r3, [r6, #0]
 8003232:	b30b      	cbz	r3, 8003278 <__sfp+0x68>
 8003234:	6836      	ldr	r6, [r6, #0]
 8003236:	e7f7      	b.n	8003228 <__sfp+0x18>
 8003238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800323c:	b9d5      	cbnz	r5, 8003274 <__sfp+0x64>
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <__sfp+0x88>)
 8003240:	60e3      	str	r3, [r4, #12]
 8003242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003246:	6665      	str	r5, [r4, #100]	; 0x64
 8003248:	f000 f847 	bl	80032da <__retarget_lock_init_recursive>
 800324c:	f7ff ff96 	bl	800317c <__sfp_lock_release>
 8003250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003258:	6025      	str	r5, [r4, #0]
 800325a:	61a5      	str	r5, [r4, #24]
 800325c:	2208      	movs	r2, #8
 800325e:	4629      	mov	r1, r5
 8003260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003264:	f7ff fc7e 	bl	8002b64 <memset>
 8003268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800326c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003270:	4620      	mov	r0, r4
 8003272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003274:	3468      	adds	r4, #104	; 0x68
 8003276:	e7d9      	b.n	800322c <__sfp+0x1c>
 8003278:	2104      	movs	r1, #4
 800327a:	4638      	mov	r0, r7
 800327c:	f7ff ff62 	bl	8003144 <__sfmoreglue>
 8003280:	4604      	mov	r4, r0
 8003282:	6030      	str	r0, [r6, #0]
 8003284:	2800      	cmp	r0, #0
 8003286:	d1d5      	bne.n	8003234 <__sfp+0x24>
 8003288:	f7ff ff78 	bl	800317c <__sfp_lock_release>
 800328c:	230c      	movs	r3, #12
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	e7ee      	b.n	8003270 <__sfp+0x60>
 8003292:	bf00      	nop
 8003294:	0800374c 	.word	0x0800374c
 8003298:	ffff0001 	.word	0xffff0001

0800329c <_fwalk_reent>:
 800329c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032a0:	4606      	mov	r6, r0
 80032a2:	4688      	mov	r8, r1
 80032a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032a8:	2700      	movs	r7, #0
 80032aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032ae:	f1b9 0901 	subs.w	r9, r9, #1
 80032b2:	d505      	bpl.n	80032c0 <_fwalk_reent+0x24>
 80032b4:	6824      	ldr	r4, [r4, #0]
 80032b6:	2c00      	cmp	r4, #0
 80032b8:	d1f7      	bne.n	80032aa <_fwalk_reent+0xe>
 80032ba:	4638      	mov	r0, r7
 80032bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032c0:	89ab      	ldrh	r3, [r5, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d907      	bls.n	80032d6 <_fwalk_reent+0x3a>
 80032c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032ca:	3301      	adds	r3, #1
 80032cc:	d003      	beq.n	80032d6 <_fwalk_reent+0x3a>
 80032ce:	4629      	mov	r1, r5
 80032d0:	4630      	mov	r0, r6
 80032d2:	47c0      	blx	r8
 80032d4:	4307      	orrs	r7, r0
 80032d6:	3568      	adds	r5, #104	; 0x68
 80032d8:	e7e9      	b.n	80032ae <_fwalk_reent+0x12>

080032da <__retarget_lock_init_recursive>:
 80032da:	4770      	bx	lr

080032dc <__retarget_lock_acquire_recursive>:
 80032dc:	4770      	bx	lr

080032de <__retarget_lock_release_recursive>:
 80032de:	4770      	bx	lr

080032e0 <__swhatbuf_r>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	460e      	mov	r6, r1
 80032e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e8:	2900      	cmp	r1, #0
 80032ea:	b096      	sub	sp, #88	; 0x58
 80032ec:	4614      	mov	r4, r2
 80032ee:	461d      	mov	r5, r3
 80032f0:	da08      	bge.n	8003304 <__swhatbuf_r+0x24>
 80032f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	602a      	str	r2, [r5, #0]
 80032fa:	061a      	lsls	r2, r3, #24
 80032fc:	d410      	bmi.n	8003320 <__swhatbuf_r+0x40>
 80032fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003302:	e00e      	b.n	8003322 <__swhatbuf_r+0x42>
 8003304:	466a      	mov	r2, sp
 8003306:	f000 f9af 	bl	8003668 <_fstat_r>
 800330a:	2800      	cmp	r0, #0
 800330c:	dbf1      	blt.n	80032f2 <__swhatbuf_r+0x12>
 800330e:	9a01      	ldr	r2, [sp, #4]
 8003310:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003314:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003318:	425a      	negs	r2, r3
 800331a:	415a      	adcs	r2, r3
 800331c:	602a      	str	r2, [r5, #0]
 800331e:	e7ee      	b.n	80032fe <__swhatbuf_r+0x1e>
 8003320:	2340      	movs	r3, #64	; 0x40
 8003322:	2000      	movs	r0, #0
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	b016      	add	sp, #88	; 0x58
 8003328:	bd70      	pop	{r4, r5, r6, pc}
	...

0800332c <__smakebuf_r>:
 800332c:	898b      	ldrh	r3, [r1, #12]
 800332e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003330:	079d      	lsls	r5, r3, #30
 8003332:	4606      	mov	r6, r0
 8003334:	460c      	mov	r4, r1
 8003336:	d507      	bpl.n	8003348 <__smakebuf_r+0x1c>
 8003338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	6123      	str	r3, [r4, #16]
 8003340:	2301      	movs	r3, #1
 8003342:	6163      	str	r3, [r4, #20]
 8003344:	b002      	add	sp, #8
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	ab01      	add	r3, sp, #4
 800334a:	466a      	mov	r2, sp
 800334c:	f7ff ffc8 	bl	80032e0 <__swhatbuf_r>
 8003350:	9900      	ldr	r1, [sp, #0]
 8003352:	4605      	mov	r5, r0
 8003354:	4630      	mov	r0, r6
 8003356:	f000 f89d 	bl	8003494 <_malloc_r>
 800335a:	b948      	cbnz	r0, 8003370 <__smakebuf_r+0x44>
 800335c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003360:	059a      	lsls	r2, r3, #22
 8003362:	d4ef      	bmi.n	8003344 <__smakebuf_r+0x18>
 8003364:	f023 0303 	bic.w	r3, r3, #3
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	e7e3      	b.n	8003338 <__smakebuf_r+0xc>
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <__smakebuf_r+0x7c>)
 8003372:	62b3      	str	r3, [r6, #40]	; 0x28
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	6020      	str	r0, [r4, #0]
 8003378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	9b00      	ldr	r3, [sp, #0]
 8003380:	6163      	str	r3, [r4, #20]
 8003382:	9b01      	ldr	r3, [sp, #4]
 8003384:	6120      	str	r0, [r4, #16]
 8003386:	b15b      	cbz	r3, 80033a0 <__smakebuf_r+0x74>
 8003388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800338c:	4630      	mov	r0, r6
 800338e:	f000 f97d 	bl	800368c <_isatty_r>
 8003392:	b128      	cbz	r0, 80033a0 <__smakebuf_r+0x74>
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	f023 0303 	bic.w	r3, r3, #3
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	81a3      	strh	r3, [r4, #12]
 80033a0:	89a0      	ldrh	r0, [r4, #12]
 80033a2:	4305      	orrs	r5, r0
 80033a4:	81a5      	strh	r5, [r4, #12]
 80033a6:	e7cd      	b.n	8003344 <__smakebuf_r+0x18>
 80033a8:	08003139 	.word	0x08003139

080033ac <malloc>:
 80033ac:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <malloc+0xc>)
 80033ae:	4601      	mov	r1, r0
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f000 b86f 	b.w	8003494 <_malloc_r>
 80033b6:	bf00      	nop
 80033b8:	2000000c 	.word	0x2000000c

080033bc <_free_r>:
 80033bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033be:	2900      	cmp	r1, #0
 80033c0:	d044      	beq.n	800344c <_free_r+0x90>
 80033c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c6:	9001      	str	r0, [sp, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f1a1 0404 	sub.w	r4, r1, #4
 80033ce:	bfb8      	it	lt
 80033d0:	18e4      	addlt	r4, r4, r3
 80033d2:	f000 f97d 	bl	80036d0 <__malloc_lock>
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <_free_r+0x94>)
 80033d8:	9801      	ldr	r0, [sp, #4]
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	b933      	cbnz	r3, 80033ec <_free_r+0x30>
 80033de:	6063      	str	r3, [r4, #4]
 80033e0:	6014      	str	r4, [r2, #0]
 80033e2:	b003      	add	sp, #12
 80033e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033e8:	f000 b978 	b.w	80036dc <__malloc_unlock>
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	d908      	bls.n	8003402 <_free_r+0x46>
 80033f0:	6825      	ldr	r5, [r4, #0]
 80033f2:	1961      	adds	r1, r4, r5
 80033f4:	428b      	cmp	r3, r1
 80033f6:	bf01      	itttt	eq
 80033f8:	6819      	ldreq	r1, [r3, #0]
 80033fa:	685b      	ldreq	r3, [r3, #4]
 80033fc:	1949      	addeq	r1, r1, r5
 80033fe:	6021      	streq	r1, [r4, #0]
 8003400:	e7ed      	b.n	80033de <_free_r+0x22>
 8003402:	461a      	mov	r2, r3
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b10b      	cbz	r3, 800340c <_free_r+0x50>
 8003408:	42a3      	cmp	r3, r4
 800340a:	d9fa      	bls.n	8003402 <_free_r+0x46>
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	1855      	adds	r5, r2, r1
 8003410:	42a5      	cmp	r5, r4
 8003412:	d10b      	bne.n	800342c <_free_r+0x70>
 8003414:	6824      	ldr	r4, [r4, #0]
 8003416:	4421      	add	r1, r4
 8003418:	1854      	adds	r4, r2, r1
 800341a:	42a3      	cmp	r3, r4
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	d1e0      	bne.n	80033e2 <_free_r+0x26>
 8003420:	681c      	ldr	r4, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	6053      	str	r3, [r2, #4]
 8003426:	4421      	add	r1, r4
 8003428:	6011      	str	r1, [r2, #0]
 800342a:	e7da      	b.n	80033e2 <_free_r+0x26>
 800342c:	d902      	bls.n	8003434 <_free_r+0x78>
 800342e:	230c      	movs	r3, #12
 8003430:	6003      	str	r3, [r0, #0]
 8003432:	e7d6      	b.n	80033e2 <_free_r+0x26>
 8003434:	6825      	ldr	r5, [r4, #0]
 8003436:	1961      	adds	r1, r4, r5
 8003438:	428b      	cmp	r3, r1
 800343a:	bf04      	itt	eq
 800343c:	6819      	ldreq	r1, [r3, #0]
 800343e:	685b      	ldreq	r3, [r3, #4]
 8003440:	6063      	str	r3, [r4, #4]
 8003442:	bf04      	itt	eq
 8003444:	1949      	addeq	r1, r1, r5
 8003446:	6021      	streq	r1, [r4, #0]
 8003448:	6054      	str	r4, [r2, #4]
 800344a:	e7ca      	b.n	80033e2 <_free_r+0x26>
 800344c:	b003      	add	sp, #12
 800344e:	bd30      	pop	{r4, r5, pc}
 8003450:	20000134 	.word	0x20000134

08003454 <sbrk_aligned>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4e0e      	ldr	r6, [pc, #56]	; (8003490 <sbrk_aligned+0x3c>)
 8003458:	460c      	mov	r4, r1
 800345a:	6831      	ldr	r1, [r6, #0]
 800345c:	4605      	mov	r5, r0
 800345e:	b911      	cbnz	r1, 8003466 <sbrk_aligned+0x12>
 8003460:	f000 f88c 	bl	800357c <_sbrk_r>
 8003464:	6030      	str	r0, [r6, #0]
 8003466:	4621      	mov	r1, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 f887 	bl	800357c <_sbrk_r>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	d00a      	beq.n	8003488 <sbrk_aligned+0x34>
 8003472:	1cc4      	adds	r4, r0, #3
 8003474:	f024 0403 	bic.w	r4, r4, #3
 8003478:	42a0      	cmp	r0, r4
 800347a:	d007      	beq.n	800348c <sbrk_aligned+0x38>
 800347c:	1a21      	subs	r1, r4, r0
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f87c 	bl	800357c <_sbrk_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d101      	bne.n	800348c <sbrk_aligned+0x38>
 8003488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800348c:	4620      	mov	r0, r4
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	20000138 	.word	0x20000138

08003494 <_malloc_r>:
 8003494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003498:	1ccd      	adds	r5, r1, #3
 800349a:	f025 0503 	bic.w	r5, r5, #3
 800349e:	3508      	adds	r5, #8
 80034a0:	2d0c      	cmp	r5, #12
 80034a2:	bf38      	it	cc
 80034a4:	250c      	movcc	r5, #12
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	4607      	mov	r7, r0
 80034aa:	db01      	blt.n	80034b0 <_malloc_r+0x1c>
 80034ac:	42a9      	cmp	r1, r5
 80034ae:	d905      	bls.n	80034bc <_malloc_r+0x28>
 80034b0:	230c      	movs	r3, #12
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	2600      	movs	r6, #0
 80034b6:	4630      	mov	r0, r6
 80034b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034bc:	4e2e      	ldr	r6, [pc, #184]	; (8003578 <_malloc_r+0xe4>)
 80034be:	f000 f907 	bl	80036d0 <__malloc_lock>
 80034c2:	6833      	ldr	r3, [r6, #0]
 80034c4:	461c      	mov	r4, r3
 80034c6:	bb34      	cbnz	r4, 8003516 <_malloc_r+0x82>
 80034c8:	4629      	mov	r1, r5
 80034ca:	4638      	mov	r0, r7
 80034cc:	f7ff ffc2 	bl	8003454 <sbrk_aligned>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	4604      	mov	r4, r0
 80034d4:	d14d      	bne.n	8003572 <_malloc_r+0xde>
 80034d6:	6834      	ldr	r4, [r6, #0]
 80034d8:	4626      	mov	r6, r4
 80034da:	2e00      	cmp	r6, #0
 80034dc:	d140      	bne.n	8003560 <_malloc_r+0xcc>
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	4631      	mov	r1, r6
 80034e2:	4638      	mov	r0, r7
 80034e4:	eb04 0803 	add.w	r8, r4, r3
 80034e8:	f000 f848 	bl	800357c <_sbrk_r>
 80034ec:	4580      	cmp	r8, r0
 80034ee:	d13a      	bne.n	8003566 <_malloc_r+0xd2>
 80034f0:	6821      	ldr	r1, [r4, #0]
 80034f2:	3503      	adds	r5, #3
 80034f4:	1a6d      	subs	r5, r5, r1
 80034f6:	f025 0503 	bic.w	r5, r5, #3
 80034fa:	3508      	adds	r5, #8
 80034fc:	2d0c      	cmp	r5, #12
 80034fe:	bf38      	it	cc
 8003500:	250c      	movcc	r5, #12
 8003502:	4629      	mov	r1, r5
 8003504:	4638      	mov	r0, r7
 8003506:	f7ff ffa5 	bl	8003454 <sbrk_aligned>
 800350a:	3001      	adds	r0, #1
 800350c:	d02b      	beq.n	8003566 <_malloc_r+0xd2>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	442b      	add	r3, r5
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	e00e      	b.n	8003534 <_malloc_r+0xa0>
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	1b52      	subs	r2, r2, r5
 800351a:	d41e      	bmi.n	800355a <_malloc_r+0xc6>
 800351c:	2a0b      	cmp	r2, #11
 800351e:	d916      	bls.n	800354e <_malloc_r+0xba>
 8003520:	1961      	adds	r1, r4, r5
 8003522:	42a3      	cmp	r3, r4
 8003524:	6025      	str	r5, [r4, #0]
 8003526:	bf18      	it	ne
 8003528:	6059      	strne	r1, [r3, #4]
 800352a:	6863      	ldr	r3, [r4, #4]
 800352c:	bf08      	it	eq
 800352e:	6031      	streq	r1, [r6, #0]
 8003530:	5162      	str	r2, [r4, r5]
 8003532:	604b      	str	r3, [r1, #4]
 8003534:	4638      	mov	r0, r7
 8003536:	f104 060b 	add.w	r6, r4, #11
 800353a:	f000 f8cf 	bl	80036dc <__malloc_unlock>
 800353e:	f026 0607 	bic.w	r6, r6, #7
 8003542:	1d23      	adds	r3, r4, #4
 8003544:	1af2      	subs	r2, r6, r3
 8003546:	d0b6      	beq.n	80034b6 <_malloc_r+0x22>
 8003548:	1b9b      	subs	r3, r3, r6
 800354a:	50a3      	str	r3, [r4, r2]
 800354c:	e7b3      	b.n	80034b6 <_malloc_r+0x22>
 800354e:	6862      	ldr	r2, [r4, #4]
 8003550:	42a3      	cmp	r3, r4
 8003552:	bf0c      	ite	eq
 8003554:	6032      	streq	r2, [r6, #0]
 8003556:	605a      	strne	r2, [r3, #4]
 8003558:	e7ec      	b.n	8003534 <_malloc_r+0xa0>
 800355a:	4623      	mov	r3, r4
 800355c:	6864      	ldr	r4, [r4, #4]
 800355e:	e7b2      	b.n	80034c6 <_malloc_r+0x32>
 8003560:	4634      	mov	r4, r6
 8003562:	6876      	ldr	r6, [r6, #4]
 8003564:	e7b9      	b.n	80034da <_malloc_r+0x46>
 8003566:	230c      	movs	r3, #12
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4638      	mov	r0, r7
 800356c:	f000 f8b6 	bl	80036dc <__malloc_unlock>
 8003570:	e7a1      	b.n	80034b6 <_malloc_r+0x22>
 8003572:	6025      	str	r5, [r4, #0]
 8003574:	e7de      	b.n	8003534 <_malloc_r+0xa0>
 8003576:	bf00      	nop
 8003578:	20000134 	.word	0x20000134

0800357c <_sbrk_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4d06      	ldr	r5, [pc, #24]	; (8003598 <_sbrk_r+0x1c>)
 8003580:	2300      	movs	r3, #0
 8003582:	4604      	mov	r4, r0
 8003584:	4608      	mov	r0, r1
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	f7fd faec 	bl	8000b64 <_sbrk>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_sbrk_r+0x1a>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_sbrk_r+0x1a>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	2000013c 	.word	0x2000013c

0800359c <__sread>:
 800359c:	b510      	push	{r4, lr}
 800359e:	460c      	mov	r4, r1
 80035a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a4:	f000 f8a0 	bl	80036e8 <_read_r>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	bfab      	itete	ge
 80035ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035ae:	89a3      	ldrhlt	r3, [r4, #12]
 80035b0:	181b      	addge	r3, r3, r0
 80035b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035b6:	bfac      	ite	ge
 80035b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80035ba:	81a3      	strhlt	r3, [r4, #12]
 80035bc:	bd10      	pop	{r4, pc}

080035be <__swrite>:
 80035be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c2:	461f      	mov	r7, r3
 80035c4:	898b      	ldrh	r3, [r1, #12]
 80035c6:	05db      	lsls	r3, r3, #23
 80035c8:	4605      	mov	r5, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	4616      	mov	r6, r2
 80035ce:	d505      	bpl.n	80035dc <__swrite+0x1e>
 80035d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d4:	2302      	movs	r3, #2
 80035d6:	2200      	movs	r2, #0
 80035d8:	f000 f868 	bl	80036ac <_lseek_r>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035e6:	81a3      	strh	r3, [r4, #12]
 80035e8:	4632      	mov	r2, r6
 80035ea:	463b      	mov	r3, r7
 80035ec:	4628      	mov	r0, r5
 80035ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035f2:	f000 b817 	b.w	8003624 <_write_r>

080035f6 <__sseek>:
 80035f6:	b510      	push	{r4, lr}
 80035f8:	460c      	mov	r4, r1
 80035fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fe:	f000 f855 	bl	80036ac <_lseek_r>
 8003602:	1c43      	adds	r3, r0, #1
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	bf15      	itete	ne
 8003608:	6560      	strne	r0, [r4, #84]	; 0x54
 800360a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800360e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003612:	81a3      	strheq	r3, [r4, #12]
 8003614:	bf18      	it	ne
 8003616:	81a3      	strhne	r3, [r4, #12]
 8003618:	bd10      	pop	{r4, pc}

0800361a <__sclose>:
 800361a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800361e:	f000 b813 	b.w	8003648 <_close_r>
	...

08003624 <_write_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4d07      	ldr	r5, [pc, #28]	; (8003644 <_write_r+0x20>)
 8003628:	4604      	mov	r4, r0
 800362a:	4608      	mov	r0, r1
 800362c:	4611      	mov	r1, r2
 800362e:	2200      	movs	r2, #0
 8003630:	602a      	str	r2, [r5, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f7fd fa45 	bl	8000ac2 <_write>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_write_r+0x1e>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b103      	cbz	r3, 8003642 <_write_r+0x1e>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	2000013c 	.word	0x2000013c

08003648 <_close_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4d06      	ldr	r5, [pc, #24]	; (8003664 <_close_r+0x1c>)
 800364c:	2300      	movs	r3, #0
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	602b      	str	r3, [r5, #0]
 8003654:	f7fd fa51 	bl	8000afa <_close>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d102      	bne.n	8003662 <_close_r+0x1a>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b103      	cbz	r3, 8003662 <_close_r+0x1a>
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	bd38      	pop	{r3, r4, r5, pc}
 8003664:	2000013c 	.word	0x2000013c

08003668 <_fstat_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4d07      	ldr	r5, [pc, #28]	; (8003688 <_fstat_r+0x20>)
 800366c:	2300      	movs	r3, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	602b      	str	r3, [r5, #0]
 8003676:	f7fd fa4c 	bl	8000b12 <_fstat>
 800367a:	1c43      	adds	r3, r0, #1
 800367c:	d102      	bne.n	8003684 <_fstat_r+0x1c>
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	b103      	cbz	r3, 8003684 <_fstat_r+0x1c>
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	2000013c 	.word	0x2000013c

0800368c <_isatty_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4d06      	ldr	r5, [pc, #24]	; (80036a8 <_isatty_r+0x1c>)
 8003690:	2300      	movs	r3, #0
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7fd fa4b 	bl	8000b32 <_isatty>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_isatty_r+0x1a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_isatty_r+0x1a>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	2000013c 	.word	0x2000013c

080036ac <_lseek_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4d07      	ldr	r5, [pc, #28]	; (80036cc <_lseek_r+0x20>)
 80036b0:	4604      	mov	r4, r0
 80036b2:	4608      	mov	r0, r1
 80036b4:	4611      	mov	r1, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	602a      	str	r2, [r5, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f7fd fa44 	bl	8000b48 <_lseek>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_lseek_r+0x1e>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_lseek_r+0x1e>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	2000013c 	.word	0x2000013c

080036d0 <__malloc_lock>:
 80036d0:	4801      	ldr	r0, [pc, #4]	; (80036d8 <__malloc_lock+0x8>)
 80036d2:	f7ff be03 	b.w	80032dc <__retarget_lock_acquire_recursive>
 80036d6:	bf00      	nop
 80036d8:	20000130 	.word	0x20000130

080036dc <__malloc_unlock>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__malloc_unlock+0x8>)
 80036de:	f7ff bdfe 	b.w	80032de <__retarget_lock_release_recursive>
 80036e2:	bf00      	nop
 80036e4:	20000130 	.word	0x20000130

080036e8 <_read_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4d07      	ldr	r5, [pc, #28]	; (8003708 <_read_r+0x20>)
 80036ec:	4604      	mov	r4, r0
 80036ee:	4608      	mov	r0, r1
 80036f0:	4611      	mov	r1, r2
 80036f2:	2200      	movs	r2, #0
 80036f4:	602a      	str	r2, [r5, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f7fd f9c6 	bl	8000a88 <_read>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_read_r+0x1e>
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	b103      	cbz	r3, 8003706 <_read_r+0x1e>
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	2000013c 	.word	0x2000013c

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
